{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logPolicy } from \"./policies/logPolicy\";\nimport { createEmptyPipeline } from \"./pipeline\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy\";\nimport { formDataPolicy } from \"./policies/formDataPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy\";\nimport { tlsPolicy } from \"./policies/tlsPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n  const pipeline = createEmptyPipeline();\n  if (isNode) {\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n  pipeline.addPolicy(formDataPolicy());\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy());\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), {\n    phase: \"Retry\"\n  });\n  pipeline.addPolicy(tracingPolicy(options.userAgentOptions), {\n    afterPhase: \"Retry\"\n  });\n  if (isNode) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), {\n      afterPhase: \"Retry\"\n    });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), {\n    afterPhase: \"Sign\"\n  });\n  return pipeline;\n}","map":{"version":3,"names":["logPolicy","createEmptyPipeline","redirectPolicy","userAgentPolicy","decompressResponsePolicy","defaultRetryPolicy","formDataPolicy","isNode","proxyPolicy","setClientRequestIdPolicy","tlsPolicy","tracingPolicy","createPipelineFromOptions","options","pipeline","tlsOptions","addPolicy","proxyOptions","userAgentOptions","retryOptions","phase","afterPhase","redirectOptions","loggingOptions"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-rest-pipeline/dist-esm/src/createPipelineFromOptions.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logPolicy } from \"./policies/logPolicy\";\nimport { createEmptyPipeline } from \"./pipeline\";\nimport { redirectPolicy } from \"./policies/redirectPolicy\";\nimport { userAgentPolicy } from \"./policies/userAgentPolicy\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy\";\nimport { formDataPolicy } from \"./policies/formDataPolicy\";\nimport { isNode } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy\";\nimport { tlsPolicy } from \"./policies/tlsPolicy\";\nimport { tracingPolicy } from \"./policies/tracingPolicy\";\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options) {\n    const pipeline = createEmptyPipeline();\n    if (isNode) {\n        if (options.tlsOptions) {\n            pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n        }\n        pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n        pipeline.addPolicy(decompressResponsePolicy());\n    }\n    pipeline.addPolicy(formDataPolicy());\n    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n    pipeline.addPolicy(setClientRequestIdPolicy());\n    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy(tracingPolicy(options.userAgentOptions), { afterPhase: \"Retry\" });\n    if (isNode) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,QAAQ,sBAAsB;AAChD,SAASC,mBAAmB,QAAQ,YAAY;AAChD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,wBAAwB,QAAQ,qCAAqC;AAC9E,SAASC,kBAAkB,QAAQ,+BAA+B;AAClE,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,wBAAwB,QAAQ,qCAAqC;AAC9E,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,aAAa,QAAQ,0BAA0B;AACxD;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,OAAO,EAAE;EAC/C,MAAMC,QAAQ,GAAGb,mBAAmB,EAAE;EACtC,IAAIM,MAAM,EAAE;IACR,IAAIM,OAAO,CAACE,UAAU,EAAE;MACpBD,QAAQ,CAACE,SAAS,CAACN,SAAS,CAACG,OAAO,CAACE,UAAU,CAAC,CAAC;IACrD;IACAD,QAAQ,CAACE,SAAS,CAACR,WAAW,CAACK,OAAO,CAACI,YAAY,CAAC,CAAC;IACrDH,QAAQ,CAACE,SAAS,CAACZ,wBAAwB,EAAE,CAAC;EAClD;EACAU,QAAQ,CAACE,SAAS,CAACV,cAAc,EAAE,CAAC;EACpCQ,QAAQ,CAACE,SAAS,CAACb,eAAe,CAACU,OAAO,CAACK,gBAAgB,CAAC,CAAC;EAC7DJ,QAAQ,CAACE,SAAS,CAACP,wBAAwB,EAAE,CAAC;EAC9CK,QAAQ,CAACE,SAAS,CAACX,kBAAkB,CAACQ,OAAO,CAACM,YAAY,CAAC,EAAE;IAAEC,KAAK,EAAE;EAAQ,CAAC,CAAC;EAChFN,QAAQ,CAACE,SAAS,CAACL,aAAa,CAACE,OAAO,CAACK,gBAAgB,CAAC,EAAE;IAAEG,UAAU,EAAE;EAAQ,CAAC,CAAC;EACpF,IAAId,MAAM,EAAE;IACR;IACA;IACAO,QAAQ,CAACE,SAAS,CAACd,cAAc,CAACW,OAAO,CAACS,eAAe,CAAC,EAAE;MAAED,UAAU,EAAE;IAAQ,CAAC,CAAC;EACxF;EACAP,QAAQ,CAACE,SAAS,CAAChB,SAAS,CAACa,OAAO,CAACU,cAAc,CAAC,EAAE;IAAEF,UAAU,EAAE;EAAO,CAAC,CAAC;EAC7E,OAAOP,QAAQ;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}