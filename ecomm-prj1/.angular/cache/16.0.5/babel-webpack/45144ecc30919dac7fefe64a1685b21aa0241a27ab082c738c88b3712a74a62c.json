{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 Device code client\r\n */\nvar DeviceCodeClient = /** @class */function (_super) {\n  __extends(DeviceCodeClient, _super);\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getDeviceCode(request)];\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createExtraQueryParameters(request);\n        endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the device code request\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.createExtraQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2 /*return*/, {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError.createUserTimeoutReachedError();\n    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError.createDeviceCodeExpiredError();\n    }\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 8];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error)) return [3 /*break*/, 6];\n            if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\n            this.logger.info(\"Authorization pending. Continue polling.\");\n            return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\n          case 3:\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            // for any other error, throw\n            this.logger.info(\"Unexpected error in polling from the server\");\n            throw ServerError.createPostRequestFailed(response.body.error);\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2 /*return*/, response.body];\n          case 7:\n            return [3 /*break*/, 1];\n          case 8:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n    requestParameters.addThrottling();\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return requestParameters.createQueryString();\n  };\n  return DeviceCodeClient;\n}(BaseClient);\nexport { DeviceCodeClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","ClientAuthError","RequestParameterBuilder","GrantType","Constants","TimeUtils","ResponseHandler","StringUtils","ServerError","UrlString","DeviceCodeClient","_super","configuration","call","prototype","acquireToken","request","deviceCodeResponse","reqTimestamp","response","responseHandler","_a","label","getDeviceCode","sent","deviceCodeCallback","nowSeconds","acquireTokenWithDeviceCode","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","authority","queryParametersString","endpoint","queryString","headers","thumbprint","createExtraQueryParameters","appendQueryString","deviceCodeEndpoint","createQueryString","createTokenRequestHeaders","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostRequestToDeviceCodeEndpoint","parameterBuilder","extraQueryParameters","addExtraQueryParameters","userCode","deviceCode","verificationUri","expiresIn","interval","message","_b","networkManager","sendPostRequest","body","user_code","device_code","verification_uri","expires_in","addScopes","addClientId","isEmpty","clientCapabilities","length","addClaims","continuePolling","deviceCodeExpirationTime","userSpecifiedTimeout","userSpecifiedCancelFlag","error","createDeviceCodeCancelledError","createUserTimeoutReachedError","verbose","createDeviceCodeExpiredError","requestBody","pollingIntervalMilli","createTokenQueryParameters","tokenEndpoint","createTokenRequestBody","timeout","undefined","cancel","executePostToTokenEndpoint","AUTHORIZATION_PENDING","info","delay","createPostRequestFailed","createDeviceCodeUnknownError","requestParameters","addGrantType","DEVICE_CODE_GRANT","addDeviceCode","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","isEmptyObj"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/client/DeviceCodeClient.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nvar DeviceCodeClient = /** @class */ (function (_super) {\r\n    __extends(DeviceCodeClient, _super);\r\n    function DeviceCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deviceCodeResponse, reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getDeviceCode(request)];\r\n                    case 1:\r\n                        deviceCodeResponse = _a.sent();\r\n                        request.deviceCodeCallback(deviceCodeResponse);\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.getDeviceCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, queryString, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryParametersString = this.createExtraQueryParameters(request);\r\n                endpoint = UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\r\n                queryString = this.createQueryString(request);\r\n                headers = this.createTokenRequestHeaders();\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: request.authority,\r\n                    scopes: request.scopes,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the device code request\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.createExtraQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\r\n                            body: queryString,\r\n                            headers: headers\r\n                        })];\r\n                    case 1:\r\n                        _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\r\n                        return [2 /*return*/, {\r\n                                userCode: userCode,\r\n                                deviceCode: deviceCode,\r\n                                verificationUri: verificationUri,\r\n                                expiresIn: expiresIn,\r\n                                interval: interval,\r\n                                message: message\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    DeviceCodeClient.prototype.createQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        }\r\n        else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        }\r\n        else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\r\n            }\r\n            this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\r\n                        requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n                        deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n                        pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 8];\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (!(response.body && response.body.error)) return [3 /*break*/, 6];\r\n                        if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\r\n                        this.logger.info(\"Authorization pending. Continue polling.\");\r\n                        return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // for any other error, throw\r\n                        this.logger.info(\"Unexpected error in polling from the server\");\r\n                        throw ServerError.createPostRequestFailed(response.body.error);\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                        return [2 /*return*/, response.body];\r\n                    case 7: return [3 /*break*/, 1];\r\n                    case 8:\r\n                        /*\r\n                         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n                         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n                         */\r\n                        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n                        throw ClientAuthError.createDeviceCodeUnknownError();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\r\n        var requestParameters = new RequestParameterBuilder();\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addApplicationTelemetry(this.config.telemetry.application);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    };\r\n    return DeviceCodeClient;\r\n}(BaseClient));\n\nexport { DeviceCodeClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}