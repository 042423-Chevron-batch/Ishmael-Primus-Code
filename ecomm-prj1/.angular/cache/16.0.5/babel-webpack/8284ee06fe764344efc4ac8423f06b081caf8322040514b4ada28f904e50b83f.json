{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n */\nexport const multiTenantADFSErrorMessage = \"A new tenant Id can't be assigned through the GetTokenOptions when a credential has been originally configured to use the tenant `adfs`.\";\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nexport function processMultiTenantRequest(tenantId, getTokenOptions) {\n  if (!(getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId)) {\n    return tenantId;\n  }\n  if (tenantId === \"adfs\") {\n    throw new Error(multiTenantADFSErrorMessage);\n  }\n  return getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId;\n}","map":{"version":3,"names":["multiTenantADFSErrorMessage","processMultiTenantRequest","tenantId","getTokenOptions","Error"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/identity/dist-esm/src/util/validateMultiTenant.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * @internal\n */\nexport const multiTenantADFSErrorMessage = \"A new tenant Id can't be assigned through the GetTokenOptions when a credential has been originally configured to use the tenant `adfs`.\";\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nexport function processMultiTenantRequest(tenantId, getTokenOptions) {\n    if (!(getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId)) {\n        return tenantId;\n    }\n    if (tenantId === \"adfs\") {\n        throw new Error(multiTenantADFSErrorMessage);\n    }\n    return getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,2BAA2B,GAAG,0IAA0I;AACrL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyBA,CAACC,QAAQ,EAAEC,eAAe,EAAE;EACjE,IAAI,EAAEA,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACD,QAAQ,CAAC,EAAE;IAC/F,OAAOA,QAAQ;EACnB;EACA,IAAIA,QAAQ,KAAK,MAAM,EAAE;IACrB,MAAM,IAAIE,KAAK,CAACJ,2BAA2B,CAAC;EAChD;EACA,OAAOG,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACD,QAAQ;AACrG"},"metadata":{},"sourceType":"module","externalDependencies":[]}