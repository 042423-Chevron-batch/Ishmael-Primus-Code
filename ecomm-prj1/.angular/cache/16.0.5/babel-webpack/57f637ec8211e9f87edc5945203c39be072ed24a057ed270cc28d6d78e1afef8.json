{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar ThrottlingUtils = /** @class */function () {\n  function ThrottlingUtils() {}\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n  ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\n    return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\n  };\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n  ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\n    var _a;\n    var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    var value = cacheManager.getThrottlingCache(key);\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key);\n        return;\n      }\n      throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  };\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n  ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      var thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  };\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n  ThrottlingUtils.checkResponseStatus = function (response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  };\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n  ThrottlingUtils.checkResponseForRetryAfter = function (response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n    return false;\n  };\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n  ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\n    var time = throttleTime <= 0 ? 0 : throttleTime;\n    var currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  };\n  ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\n    var thumbprint = {\n      clientId: clientId,\n      authority: request.authority,\n      scopes: request.scopes,\n      homeAccountIdentifier: homeAccountIdentifier,\n      claims: request.claims,\n      authenticationScheme: request.authenticationScheme,\n      resourceRequestMethod: request.resourceRequestMethod,\n      resourceRequestUri: request.resourceRequestUri,\n      shrClaims: request.shrClaims,\n      sshKid: request.sshKid\n    };\n    var key = this.generateThrottlingStorageKey(thumbprint);\n    cacheManager.removeItem(key);\n  };\n  return ThrottlingUtils;\n}();\nexport { ThrottlingUtils };","map":{"version":3,"names":["ThrottlingConstants","Constants","HeaderNames","ServerError","ThrottlingUtils","generateThrottlingStorageKey","thumbprint","THROTTLING_PREFIX","JSON","stringify","preProcess","cacheManager","_a","key","value","getThrottlingCache","throttleTime","Date","now","removeItem","errorCodes","join","EMPTY_STRING","errorMessage","subError","postProcess","response","checkResponseStatus","checkResponseForRetryAfter","thumbprintValue","calculateThrottleTime","parseInt","headers","RETRY_AFTER","error","body","error_codes","error_description","suberror","setThrottlingCache","status","hasOwnProperty","time","currentSeconds","Math","floor","min","DEFAULT_THROTTLE_TIME_SECONDS","DEFAULT_MAX_THROTTLE_TIME_SECONDS","removeThrottle","clientId","request","homeAccountIdentifier","authority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/network/ThrottlingUtils.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ThrottlingUtils = /** @class */ (function () {\r\n    function ThrottlingUtils() {\r\n    }\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\r\n        return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\r\n        var _a;\r\n        var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        var value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key);\r\n                return;\r\n            }\r\n            throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    };\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            var thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\r\n        }\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseStatus = function (response) {\r\n        return response.status === 429 || response.status >= 500 && response.status < 600;\r\n    };\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    ThrottlingUtils.checkResponseForRetryAfter = function (response) {\r\n        if (response.headers) {\r\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\r\n        var time = throttleTime <= 0 ? 0 : throttleTime;\r\n        var currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    };\r\n    ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {\r\n        var thumbprint = {\r\n            clientId: clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: homeAccountIdentifier,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n        var key = this.generateThrottlingStorageKey(thumbprint);\r\n        cacheManager.removeItem(key);\r\n    };\r\n    return ThrottlingUtils;\r\n}());\n\nexport { ThrottlingUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}