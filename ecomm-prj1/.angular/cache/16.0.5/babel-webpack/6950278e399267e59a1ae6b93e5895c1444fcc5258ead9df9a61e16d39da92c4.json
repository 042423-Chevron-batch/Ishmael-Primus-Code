{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Constants\r\n */\nvar BrowserConstants = {\n  /**\r\n   * Interaction in progress cache value\r\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n  /**\r\n   * Invalid grant error code\r\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  /**\r\n   * Default popup window width\r\n   */\n  POPUP_WIDTH: 483,\n  /**\r\n   * Default popup window height\r\n   */\n  POPUP_HEIGHT: 600,\n  /**\r\n   * Name of the popup window starts with\r\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n  /**\r\n   * Default popup monitor poll interval in milliseconds\r\n   */\n  DEFAULT_POLL_INTERVAL_MS: 30,\n  /**\r\n   * Msal-browser SKU\r\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nvar NativeConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n  MATS_TELEMETRY: \"MATS\"\n};\nvar NativeExtensionMethod;\n(function (NativeExtensionMethod) {\n  NativeExtensionMethod[\"HandshakeRequest\"] = \"Handshake\";\n  NativeExtensionMethod[\"HandshakeResponse\"] = \"HandshakeResponse\";\n  NativeExtensionMethod[\"GetToken\"] = \"GetToken\";\n  NativeExtensionMethod[\"Response\"] = \"Response\";\n})(NativeExtensionMethod || (NativeExtensionMethod = {}));\nvar BrowserCacheLocation;\n(function (BrowserCacheLocation) {\n  BrowserCacheLocation[\"LocalStorage\"] = \"localStorage\";\n  BrowserCacheLocation[\"SessionStorage\"] = \"sessionStorage\";\n  BrowserCacheLocation[\"MemoryStorage\"] = \"memoryStorage\";\n})(BrowserCacheLocation || (BrowserCacheLocation = {}));\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\nvar HTTP_REQUEST_TYPE;\n(function (HTTP_REQUEST_TYPE) {\n  HTTP_REQUEST_TYPE[\"GET\"] = \"GET\";\n  HTTP_REQUEST_TYPE[\"POST\"] = \"POST\";\n})(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\nvar TemporaryCacheKeys;\n(function (TemporaryCacheKeys) {\n  TemporaryCacheKeys[\"AUTHORITY\"] = \"authority\";\n  TemporaryCacheKeys[\"ACQUIRE_TOKEN_ACCOUNT\"] = \"acquireToken.account\";\n  TemporaryCacheKeys[\"SESSION_STATE\"] = \"session.state\";\n  TemporaryCacheKeys[\"REQUEST_STATE\"] = \"request.state\";\n  TemporaryCacheKeys[\"NONCE_IDTOKEN\"] = \"nonce.id_token\";\n  TemporaryCacheKeys[\"ORIGIN_URI\"] = \"request.origin\";\n  TemporaryCacheKeys[\"RENEW_STATUS\"] = \"token.renew.status\";\n  TemporaryCacheKeys[\"URL_HASH\"] = \"urlHash\";\n  TemporaryCacheKeys[\"REQUEST_PARAMS\"] = \"request.params\";\n  TemporaryCacheKeys[\"SCOPES\"] = \"scopes\";\n  TemporaryCacheKeys[\"INTERACTION_STATUS_KEY\"] = \"interaction.status\";\n  TemporaryCacheKeys[\"CCS_CREDENTIAL\"] = \"ccs.credential\";\n  TemporaryCacheKeys[\"CORRELATION_ID\"] = \"request.correlationId\";\n  TemporaryCacheKeys[\"NATIVE_REQUEST\"] = \"request.native\";\n  TemporaryCacheKeys[\"REDIRECT_CONTEXT\"] = \"request.redirect.context\";\n})(TemporaryCacheKeys || (TemporaryCacheKeys = {}));\nvar StaticCacheKeys;\n(function (StaticCacheKeys) {\n  StaticCacheKeys[\"ACCOUNT_KEYS\"] = \"msal.account.keys\";\n  StaticCacheKeys[\"TOKEN_KEYS\"] = \"msal.token.keys\";\n})(StaticCacheKeys || (StaticCacheKeys = {}));\n/**\r\n * Cache keys stored in-memory\r\n */\nvar InMemoryCacheKeys;\n(function (InMemoryCacheKeys) {\n  InMemoryCacheKeys[\"WRAPPER_SKU\"] = \"wrapper.sku\";\n  InMemoryCacheKeys[\"WRAPPER_VER\"] = \"wrapper.version\";\n})(InMemoryCacheKeys || (InMemoryCacheKeys = {}));\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\nvar ApiId;\n(function (ApiId) {\n  ApiId[ApiId[\"acquireTokenRedirect\"] = 861] = \"acquireTokenRedirect\";\n  ApiId[ApiId[\"acquireTokenPopup\"] = 862] = \"acquireTokenPopup\";\n  ApiId[ApiId[\"ssoSilent\"] = 863] = \"ssoSilent\";\n  ApiId[ApiId[\"acquireTokenSilent_authCode\"] = 864] = \"acquireTokenSilent_authCode\";\n  ApiId[ApiId[\"handleRedirectPromise\"] = 865] = \"handleRedirectPromise\";\n  ApiId[ApiId[\"acquireTokenByCode\"] = 866] = \"acquireTokenByCode\";\n  ApiId[ApiId[\"acquireTokenSilent_silentFlow\"] = 61] = \"acquireTokenSilent_silentFlow\";\n  ApiId[ApiId[\"logout\"] = 961] = \"logout\";\n  ApiId[ApiId[\"logoutPopup\"] = 962] = \"logoutPopup\";\n})(ApiId || (ApiId = {}));\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\nvar InteractionType;\n(function (InteractionType) {\n  InteractionType[\"Redirect\"] = \"redirect\";\n  InteractionType[\"Popup\"] = \"popup\";\n  InteractionType[\"Silent\"] = \"silent\";\n  InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\nvar InteractionStatus;\n(function (InteractionStatus) {\n  /**\r\n   * Initial status before interaction occurs\r\n   */\n  InteractionStatus[\"Startup\"] = \"startup\";\n  /**\r\n   * Status set when all login calls occuring\r\n   */\n  InteractionStatus[\"Login\"] = \"login\";\n  /**\r\n   * Status set when logout call occuring\r\n   */\n  InteractionStatus[\"Logout\"] = \"logout\";\n  /**\r\n   * Status set for acquireToken calls\r\n   */\n  InteractionStatus[\"AcquireToken\"] = \"acquireToken\";\n  /**\r\n   * Status set for ssoSilent calls\r\n   */\n  InteractionStatus[\"SsoSilent\"] = \"ssoSilent\";\n  /**\r\n   * Status set when handleRedirect in progress\r\n   */\n  InteractionStatus[\"HandleRedirect\"] = \"handleRedirect\";\n  /**\r\n   * Status set when interaction is complete\r\n   */\n  InteractionStatus[\"None\"] = \"none\";\n})(InteractionStatus || (InteractionStatus = {}));\nvar DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\nvar KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nvar WrapperSKU;\n(function (WrapperSKU) {\n  WrapperSKU[\"React\"] = \"@azure/msal-react\";\n  WrapperSKU[\"Angular\"] = \"@azure/msal-angular\";\n})(WrapperSKU || (WrapperSKU = {}));\n// DatabaseStorage Constants\nvar DB_NAME = \"msal.db\";\nvar DB_VERSION = 1;\nvar DB_TABLE_NAME = DB_NAME + \".keys\";\nvar CacheLookupPolicy;\n(function (CacheLookupPolicy) {\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n   * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n   * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"Default\"] = 0] = \"Default\";\n  /*\r\n   * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n   * refresh tokens.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"AccessToken\"] = 1] = \"AccessToken\";\n  /*\r\n   * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n   * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n   * will not be renewed and acquireTokenSilent will fail.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"AccessTokenAndRefreshToken\"] = 2] = \"AccessTokenAndRefreshToken\";\n  /*\r\n   * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n   * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n   * renewed and acquireTokenSilent will fail.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"RefreshToken\"] = 3] = \"RefreshToken\";\n  /*\r\n   * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n   * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n   * setting \"forceRefresh: true\".\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"RefreshTokenAndNetwork\"] = 4] = \"RefreshTokenAndNetwork\";\n  /*\r\n   * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n   * always fail if 3rd party cookies are blocked by the browser.\r\n   */\n  CacheLookupPolicy[CacheLookupPolicy[\"Skip\"] = 5] = \"Skip\";\n})(CacheLookupPolicy || (CacheLookupPolicy = {}));\nexport { ApiId, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU };","map":{"version":3,"names":["OIDC_DEFAULT_SCOPES","BrowserConstants","INTERACTION_IN_PROGRESS_VALUE","INVALID_GRANT_ERROR","POPUP_WIDTH","POPUP_HEIGHT","POPUP_NAME_PREFIX","DEFAULT_POLL_INTERVAL_MS","MSAL_SKU","NativeConstants","CHANNEL_ID","PREFERRED_EXTENSION_ID","MATS_TELEMETRY","NativeExtensionMethod","BrowserCacheLocation","HTTP_REQUEST_TYPE","TemporaryCacheKeys","StaticCacheKeys","InMemoryCacheKeys","ApiId","InteractionType","InteractionStatus","DEFAULT_REQUEST","scopes","KEY_FORMAT_JWK","WrapperSKU","DB_NAME","DB_VERSION","DB_TABLE_NAME","CacheLookupPolicy"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/utils/BrowserConstants.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Constants\r\n */\r\nvar BrowserConstants = {\r\n    /**\r\n     * Interaction in progress cache value\r\n     */\r\n    INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\r\n    /**\r\n     * Invalid grant error code\r\n     */\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    /**\r\n     * Default popup window width\r\n     */\r\n    POPUP_WIDTH: 483,\r\n    /**\r\n     * Default popup window height\r\n     */\r\n    POPUP_HEIGHT: 600,\r\n    /**\r\n     * Name of the popup window starts with\r\n     */\r\n    POPUP_NAME_PREFIX: \"msal\",\r\n    /**\r\n     * Default popup monitor poll interval in milliseconds\r\n     */\r\n    DEFAULT_POLL_INTERVAL_MS: 30,\r\n    /**\r\n     * Msal-browser SKU\r\n     */\r\n    MSAL_SKU: \"msal.js.browser\",\r\n};\r\nvar NativeConstants = {\r\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\r\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\r\n    MATS_TELEMETRY: \"MATS\"\r\n};\r\nvar NativeExtensionMethod;\r\n(function (NativeExtensionMethod) {\r\n    NativeExtensionMethod[\"HandshakeRequest\"] = \"Handshake\";\r\n    NativeExtensionMethod[\"HandshakeResponse\"] = \"HandshakeResponse\";\r\n    NativeExtensionMethod[\"GetToken\"] = \"GetToken\";\r\n    NativeExtensionMethod[\"Response\"] = \"Response\";\r\n})(NativeExtensionMethod || (NativeExtensionMethod = {}));\r\nvar BrowserCacheLocation;\r\n(function (BrowserCacheLocation) {\r\n    BrowserCacheLocation[\"LocalStorage\"] = \"localStorage\";\r\n    BrowserCacheLocation[\"SessionStorage\"] = \"sessionStorage\";\r\n    BrowserCacheLocation[\"MemoryStorage\"] = \"memoryStorage\";\r\n})(BrowserCacheLocation || (BrowserCacheLocation = {}));\r\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\r\nvar HTTP_REQUEST_TYPE;\r\n(function (HTTP_REQUEST_TYPE) {\r\n    HTTP_REQUEST_TYPE[\"GET\"] = \"GET\";\r\n    HTTP_REQUEST_TYPE[\"POST\"] = \"POST\";\r\n})(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));\r\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\r\nvar TemporaryCacheKeys;\r\n(function (TemporaryCacheKeys) {\r\n    TemporaryCacheKeys[\"AUTHORITY\"] = \"authority\";\r\n    TemporaryCacheKeys[\"ACQUIRE_TOKEN_ACCOUNT\"] = \"acquireToken.account\";\r\n    TemporaryCacheKeys[\"SESSION_STATE\"] = \"session.state\";\r\n    TemporaryCacheKeys[\"REQUEST_STATE\"] = \"request.state\";\r\n    TemporaryCacheKeys[\"NONCE_IDTOKEN\"] = \"nonce.id_token\";\r\n    TemporaryCacheKeys[\"ORIGIN_URI\"] = \"request.origin\";\r\n    TemporaryCacheKeys[\"RENEW_STATUS\"] = \"token.renew.status\";\r\n    TemporaryCacheKeys[\"URL_HASH\"] = \"urlHash\";\r\n    TemporaryCacheKeys[\"REQUEST_PARAMS\"] = \"request.params\";\r\n    TemporaryCacheKeys[\"SCOPES\"] = \"scopes\";\r\n    TemporaryCacheKeys[\"INTERACTION_STATUS_KEY\"] = \"interaction.status\";\r\n    TemporaryCacheKeys[\"CCS_CREDENTIAL\"] = \"ccs.credential\";\r\n    TemporaryCacheKeys[\"CORRELATION_ID\"] = \"request.correlationId\";\r\n    TemporaryCacheKeys[\"NATIVE_REQUEST\"] = \"request.native\";\r\n    TemporaryCacheKeys[\"REDIRECT_CONTEXT\"] = \"request.redirect.context\";\r\n})(TemporaryCacheKeys || (TemporaryCacheKeys = {}));\r\nvar StaticCacheKeys;\r\n(function (StaticCacheKeys) {\r\n    StaticCacheKeys[\"ACCOUNT_KEYS\"] = \"msal.account.keys\";\r\n    StaticCacheKeys[\"TOKEN_KEYS\"] = \"msal.token.keys\";\r\n})(StaticCacheKeys || (StaticCacheKeys = {}));\r\n/**\r\n * Cache keys stored in-memory\r\n */\r\nvar InMemoryCacheKeys;\r\n(function (InMemoryCacheKeys) {\r\n    InMemoryCacheKeys[\"WRAPPER_SKU\"] = \"wrapper.sku\";\r\n    InMemoryCacheKeys[\"WRAPPER_VER\"] = \"wrapper.version\";\r\n})(InMemoryCacheKeys || (InMemoryCacheKeys = {}));\r\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\r\nvar ApiId;\r\n(function (ApiId) {\r\n    ApiId[ApiId[\"acquireTokenRedirect\"] = 861] = \"acquireTokenRedirect\";\r\n    ApiId[ApiId[\"acquireTokenPopup\"] = 862] = \"acquireTokenPopup\";\r\n    ApiId[ApiId[\"ssoSilent\"] = 863] = \"ssoSilent\";\r\n    ApiId[ApiId[\"acquireTokenSilent_authCode\"] = 864] = \"acquireTokenSilent_authCode\";\r\n    ApiId[ApiId[\"handleRedirectPromise\"] = 865] = \"handleRedirectPromise\";\r\n    ApiId[ApiId[\"acquireTokenByCode\"] = 866] = \"acquireTokenByCode\";\r\n    ApiId[ApiId[\"acquireTokenSilent_silentFlow\"] = 61] = \"acquireTokenSilent_silentFlow\";\r\n    ApiId[ApiId[\"logout\"] = 961] = \"logout\";\r\n    ApiId[ApiId[\"logoutPopup\"] = 962] = \"logoutPopup\";\r\n})(ApiId || (ApiId = {}));\r\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\r\nvar InteractionType;\r\n(function (InteractionType) {\r\n    InteractionType[\"Redirect\"] = \"redirect\";\r\n    InteractionType[\"Popup\"] = \"popup\";\r\n    InteractionType[\"Silent\"] = \"silent\";\r\n    InteractionType[\"None\"] = \"none\";\r\n})(InteractionType || (InteractionType = {}));\r\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\r\nvar InteractionStatus;\r\n(function (InteractionStatus) {\r\n    /**\r\n     * Initial status before interaction occurs\r\n     */\r\n    InteractionStatus[\"Startup\"] = \"startup\";\r\n    /**\r\n     * Status set when all login calls occuring\r\n     */\r\n    InteractionStatus[\"Login\"] = \"login\";\r\n    /**\r\n     * Status set when logout call occuring\r\n     */\r\n    InteractionStatus[\"Logout\"] = \"logout\";\r\n    /**\r\n     * Status set for acquireToken calls\r\n     */\r\n    InteractionStatus[\"AcquireToken\"] = \"acquireToken\";\r\n    /**\r\n     * Status set for ssoSilent calls\r\n     */\r\n    InteractionStatus[\"SsoSilent\"] = \"ssoSilent\";\r\n    /**\r\n     * Status set when handleRedirect in progress\r\n     */\r\n    InteractionStatus[\"HandleRedirect\"] = \"handleRedirect\";\r\n    /**\r\n     * Status set when interaction is complete\r\n     */\r\n    InteractionStatus[\"None\"] = \"none\";\r\n})(InteractionStatus || (InteractionStatus = {}));\r\nvar DEFAULT_REQUEST = {\r\n    scopes: OIDC_DEFAULT_SCOPES\r\n};\r\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\r\nvar KEY_FORMAT_JWK = \"jwk\";\r\n// Supported wrapper SKUs\r\nvar WrapperSKU;\r\n(function (WrapperSKU) {\r\n    WrapperSKU[\"React\"] = \"@azure/msal-react\";\r\n    WrapperSKU[\"Angular\"] = \"@azure/msal-angular\";\r\n})(WrapperSKU || (WrapperSKU = {}));\r\n// DatabaseStorage Constants\r\nvar DB_NAME = \"msal.db\";\r\nvar DB_VERSION = 1;\r\nvar DB_TABLE_NAME = DB_NAME + \".keys\";\r\nvar CacheLookupPolicy;\r\n(function (CacheLookupPolicy) {\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n     */\r\n    CacheLookupPolicy[CacheLookupPolicy[\"Default\"] = 0] = \"Default\";\r\n    /*\r\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n     * refresh tokens.\r\n     */\r\n    CacheLookupPolicy[CacheLookupPolicy[\"AccessToken\"] = 1] = \"AccessToken\";\r\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n     * will not be renewed and acquireTokenSilent will fail.\r\n     */\r\n    CacheLookupPolicy[CacheLookupPolicy[\"AccessTokenAndRefreshToken\"] = 2] = \"AccessTokenAndRefreshToken\";\r\n    /*\r\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n     * renewed and acquireTokenSilent will fail.\r\n     */\r\n    CacheLookupPolicy[CacheLookupPolicy[\"RefreshToken\"] = 3] = \"RefreshToken\";\r\n    /*\r\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n     * setting \"forceRefresh: true\".\r\n     */\r\n    CacheLookupPolicy[CacheLookupPolicy[\"RefreshTokenAndNetwork\"] = 4] = \"RefreshTokenAndNetwork\";\r\n    /*\r\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n     * always fail if 3rd party cookies are blocked by the browser.\r\n     */\r\n    CacheLookupPolicy[CacheLookupPolicy[\"Skip\"] = 5] = \"Skip\";\r\n})(CacheLookupPolicy || (CacheLookupPolicy = {}));\n\nexport { ApiId, BrowserCacheLocation, BrowserConstants, CacheLookupPolicy, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, NativeConstants, NativeExtensionMethod, StaticCacheKeys, TemporaryCacheKeys, WrapperSKU };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}