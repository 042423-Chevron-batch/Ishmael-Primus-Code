{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar CollectionMode;\n(function (CollectionMode) {\n  CollectionMode[CollectionMode[\"key\"] = 0] = \"key\";\n  CollectionMode[CollectionMode[\"value\"] = 1] = \"value\";\n})(CollectionMode || (CollectionMode = {}));\nconst CONFIG = Object.freeze({\n  key: {\n    terminator: '=',\n    quotes: {}\n  },\n  value: {\n    terminator: ';',\n    quotes: {\n      '\"': '\"',\n      \"'\": \"'\",\n      '{': '}'\n    }\n  }\n});\nfunction connectionStringParser(connectionString, parserConfig = CONFIG) {\n  const parsed = {};\n  let collectionMode = CollectionMode.key;\n  let started = false;\n  let finished = false;\n  let quoted = false;\n  let quote = '';\n  let buffer = '';\n  let currentKey = '';\n  let pointer = 0;\n  function start() {\n    started = true;\n  }\n  function finish() {\n    finished = true;\n  }\n  function reset() {\n    started = false;\n    finished = false;\n    quoted = false;\n    quote = '';\n    buffer = '';\n  }\n  function config() {\n    return collectionMode === CollectionMode.key ? parserConfig.key : parserConfig.value;\n  }\n  function isTerminator(char) {\n    return config().terminator === char;\n  }\n  function isStartQuote(char) {\n    return Object.keys(config().quotes).some(val => char === val);\n  }\n  function isEndQuote(char) {\n    return quoted && char === config().quotes[quote];\n  }\n  function push(char) {\n    buffer += char;\n  }\n  function collect() {\n    if (!quoted) {\n      buffer = buffer.trim();\n    }\n    switch (collectionMode) {\n      case CollectionMode.key:\n        currentKey = buffer.toLowerCase();\n        collectionMode = CollectionMode.value;\n        break;\n      case CollectionMode.value:\n        collectionMode = CollectionMode.key;\n        parsed[currentKey] = buffer;\n        currentKey = '';\n        break;\n    }\n    reset();\n  }\n  while (pointer < connectionString.length) {\n    const current = connectionString.charAt(pointer);\n    if (!finished) {\n      if (!started) {\n        if (current.trim()) {\n          start();\n          if (isStartQuote(current)) {\n            quoted = true;\n            quote = current;\n          } else {\n            push(current);\n          }\n        }\n      } else {\n        if (quoted && isEndQuote(current)) {\n          const next = connectionString.charAt(pointer + 1);\n          if (current === next) {\n            push(current);\n            pointer++;\n          } else {\n            finish();\n          }\n        } else if (!quoted && isTerminator(current)) {\n          const next = connectionString.charAt(pointer + 1);\n          if (current === next) {\n            push(current);\n            pointer++;\n          } else {\n            collect();\n          }\n        } else {\n          push(current);\n        }\n      }\n    } else if (isTerminator(current)) {\n      collect();\n    } else if (current.trim()) {\n      throw new Error('Malformed connection string');\n    }\n    pointer++;\n  }\n  if (quoted && !finished) {\n    throw new Error('Connection string terminated unexpectedly');\n  } else {\n    collect();\n  }\n  return parsed;\n}\nexports.default = connectionStringParser;","map":{"version":3,"names":["Object","defineProperty","exports","value","CollectionMode","CONFIG","freeze","key","terminator","quotes","connectionStringParser","connectionString","parserConfig","parsed","collectionMode","started","finished","quoted","quote","buffer","currentKey","pointer","start","finish","reset","config","isTerminator","char","isStartQuote","keys","some","val","isEndQuote","push","collect","trim","toLowerCase","length","current","charAt","next","Error","default"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@tediousjs/connection-string/lib/parser/connection-string.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CollectionMode;\n(function (CollectionMode) {\n    CollectionMode[CollectionMode[\"key\"] = 0] = \"key\";\n    CollectionMode[CollectionMode[\"value\"] = 1] = \"value\";\n})(CollectionMode || (CollectionMode = {}));\nconst CONFIG = Object.freeze({\n    key: {\n        terminator: '=',\n        quotes: {},\n    },\n    value: {\n        terminator: ';',\n        quotes: {\n            '\"': '\"',\n            \"'\": \"'\",\n            '{': '}',\n        },\n    },\n});\nfunction connectionStringParser(connectionString, parserConfig = CONFIG) {\n    const parsed = {};\n    let collectionMode = CollectionMode.key;\n    let started = false;\n    let finished = false;\n    let quoted = false;\n    let quote = '';\n    let buffer = '';\n    let currentKey = '';\n    let pointer = 0;\n    function start() {\n        started = true;\n    }\n    function finish() {\n        finished = true;\n    }\n    function reset() {\n        started = false;\n        finished = false;\n        quoted = false;\n        quote = '';\n        buffer = '';\n    }\n    function config() {\n        return collectionMode === CollectionMode.key ? parserConfig.key : parserConfig.value;\n    }\n    function isTerminator(char) {\n        return config().terminator === char;\n    }\n    function isStartQuote(char) {\n        return Object.keys(config().quotes).some((val) => char === val);\n    }\n    function isEndQuote(char) {\n        return quoted && char === config().quotes[quote];\n    }\n    function push(char) {\n        buffer += char;\n    }\n    function collect() {\n        if (!quoted) {\n            buffer = buffer.trim();\n        }\n        switch (collectionMode) {\n            case CollectionMode.key:\n                currentKey = buffer.toLowerCase();\n                collectionMode = CollectionMode.value;\n                break;\n            case CollectionMode.value:\n                collectionMode = CollectionMode.key;\n                parsed[currentKey] = buffer;\n                currentKey = '';\n                break;\n        }\n        reset();\n    }\n    while (pointer < connectionString.length) {\n        const current = connectionString.charAt(pointer);\n        if (!finished) {\n            if (!started) {\n                if (current.trim()) {\n                    start();\n                    if (isStartQuote(current)) {\n                        quoted = true;\n                        quote = current;\n                    }\n                    else {\n                        push(current);\n                    }\n                }\n            }\n            else {\n                if (quoted && isEndQuote(current)) {\n                    const next = connectionString.charAt(pointer + 1);\n                    if (current === next) {\n                        push(current);\n                        pointer++;\n                    }\n                    else {\n                        finish();\n                    }\n                }\n                else if (!quoted && isTerminator(current)) {\n                    const next = connectionString.charAt(pointer + 1);\n                    if (current === next) {\n                        push(current);\n                        pointer++;\n                    }\n                    else {\n                        collect();\n                    }\n                }\n                else {\n                    push(current);\n                }\n            }\n        }\n        else if (isTerminator(current)) {\n            collect();\n        }\n        else if (current.trim()) {\n            throw new Error('Malformed connection string');\n        }\n        pointer++;\n    }\n    if (quoted && !finished) {\n        throw new Error('Connection string terminated unexpectedly');\n    }\n    else {\n        collect();\n    }\n    return parsed;\n}\nexports.default = connectionStringParser;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,cAAc;AAClB,CAAC,UAAUA,cAAc,EAAE;EACvBA,cAAc,CAACA,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;EACjDA,cAAc,CAACA,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;AACzD,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3C,MAAMC,MAAM,GAAGL,MAAM,CAACM,MAAM,CAAC;EACzBC,GAAG,EAAE;IACDC,UAAU,EAAE,GAAG;IACfC,MAAM,EAAE,CAAC;EACb,CAAC;EACDN,KAAK,EAAE;IACHK,UAAU,EAAE,GAAG;IACfC,MAAM,EAAE;MACJ,GAAG,EAAE,GAAG;MACR,GAAG,EAAE,GAAG;MACR,GAAG,EAAE;IACT;EACJ;AACJ,CAAC,CAAC;AACF,SAASC,sBAAsBA,CAACC,gBAAgB,EAAEC,YAAY,GAAGP,MAAM,EAAE;EACrE,MAAMQ,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIC,cAAc,GAAGV,cAAc,CAACG,GAAG;EACvC,IAAIQ,OAAO,GAAG,KAAK;EACnB,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,OAAO,GAAG,CAAC;EACf,SAASC,KAAKA,CAAA,EAAG;IACbP,OAAO,GAAG,IAAI;EAClB;EACA,SAASQ,MAAMA,CAAA,EAAG;IACdP,QAAQ,GAAG,IAAI;EACnB;EACA,SAASQ,KAAKA,CAAA,EAAG;IACbT,OAAO,GAAG,KAAK;IACfC,QAAQ,GAAG,KAAK;IAChBC,MAAM,GAAG,KAAK;IACdC,KAAK,GAAG,EAAE;IACVC,MAAM,GAAG,EAAE;EACf;EACA,SAASM,MAAMA,CAAA,EAAG;IACd,OAAOX,cAAc,KAAKV,cAAc,CAACG,GAAG,GAAGK,YAAY,CAACL,GAAG,GAAGK,YAAY,CAACT,KAAK;EACxF;EACA,SAASuB,YAAYA,CAACC,IAAI,EAAE;IACxB,OAAOF,MAAM,EAAE,CAACjB,UAAU,KAAKmB,IAAI;EACvC;EACA,SAASC,YAAYA,CAACD,IAAI,EAAE;IACxB,OAAO3B,MAAM,CAAC6B,IAAI,CAACJ,MAAM,EAAE,CAAChB,MAAM,CAAC,CAACqB,IAAI,CAAEC,GAAG,IAAKJ,IAAI,KAAKI,GAAG,CAAC;EACnE;EACA,SAASC,UAAUA,CAACL,IAAI,EAAE;IACtB,OAAOV,MAAM,IAAIU,IAAI,KAAKF,MAAM,EAAE,CAAChB,MAAM,CAACS,KAAK,CAAC;EACpD;EACA,SAASe,IAAIA,CAACN,IAAI,EAAE;IAChBR,MAAM,IAAIQ,IAAI;EAClB;EACA,SAASO,OAAOA,CAAA,EAAG;IACf,IAAI,CAACjB,MAAM,EAAE;MACTE,MAAM,GAAGA,MAAM,CAACgB,IAAI,EAAE;IAC1B;IACA,QAAQrB,cAAc;MAClB,KAAKV,cAAc,CAACG,GAAG;QACnBa,UAAU,GAAGD,MAAM,CAACiB,WAAW,EAAE;QACjCtB,cAAc,GAAGV,cAAc,CAACD,KAAK;QACrC;MACJ,KAAKC,cAAc,CAACD,KAAK;QACrBW,cAAc,GAAGV,cAAc,CAACG,GAAG;QACnCM,MAAM,CAACO,UAAU,CAAC,GAAGD,MAAM;QAC3BC,UAAU,GAAG,EAAE;QACf;IAAM;IAEdI,KAAK,EAAE;EACX;EACA,OAAOH,OAAO,GAAGV,gBAAgB,CAAC0B,MAAM,EAAE;IACtC,MAAMC,OAAO,GAAG3B,gBAAgB,CAAC4B,MAAM,CAAClB,OAAO,CAAC;IAChD,IAAI,CAACL,QAAQ,EAAE;MACX,IAAI,CAACD,OAAO,EAAE;QACV,IAAIuB,OAAO,CAACH,IAAI,EAAE,EAAE;UAChBb,KAAK,EAAE;UACP,IAAIM,YAAY,CAACU,OAAO,CAAC,EAAE;YACvBrB,MAAM,GAAG,IAAI;YACbC,KAAK,GAAGoB,OAAO;UACnB,CAAC,MACI;YACDL,IAAI,CAACK,OAAO,CAAC;UACjB;QACJ;MACJ,CAAC,MACI;QACD,IAAIrB,MAAM,IAAIe,UAAU,CAACM,OAAO,CAAC,EAAE;UAC/B,MAAME,IAAI,GAAG7B,gBAAgB,CAAC4B,MAAM,CAAClB,OAAO,GAAG,CAAC,CAAC;UACjD,IAAIiB,OAAO,KAAKE,IAAI,EAAE;YAClBP,IAAI,CAACK,OAAO,CAAC;YACbjB,OAAO,EAAE;UACb,CAAC,MACI;YACDE,MAAM,EAAE;UACZ;QACJ,CAAC,MACI,IAAI,CAACN,MAAM,IAAIS,YAAY,CAACY,OAAO,CAAC,EAAE;UACvC,MAAME,IAAI,GAAG7B,gBAAgB,CAAC4B,MAAM,CAAClB,OAAO,GAAG,CAAC,CAAC;UACjD,IAAIiB,OAAO,KAAKE,IAAI,EAAE;YAClBP,IAAI,CAACK,OAAO,CAAC;YACbjB,OAAO,EAAE;UACb,CAAC,MACI;YACDa,OAAO,EAAE;UACb;QACJ,CAAC,MACI;UACDD,IAAI,CAACK,OAAO,CAAC;QACjB;MACJ;IACJ,CAAC,MACI,IAAIZ,YAAY,CAACY,OAAO,CAAC,EAAE;MAC5BJ,OAAO,EAAE;IACb,CAAC,MACI,IAAII,OAAO,CAACH,IAAI,EAAE,EAAE;MACrB,MAAM,IAAIM,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACApB,OAAO,EAAE;EACb;EACA,IAAIJ,MAAM,IAAI,CAACD,QAAQ,EAAE;IACrB,MAAM,IAAIyB,KAAK,CAAC,2CAA2C,CAAC;EAChE,CAAC,MACI;IACDP,OAAO,EAAE;EACb;EACA,OAAOrB,MAAM;AACjB;AACAX,OAAO,CAACwC,OAAO,GAAGhC,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}