{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { AuthToken, CacheRecord, Authority, AccountEntity, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Token cache manager\r\n */\nvar TokenCache = /** @class */function () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  }\n  // Move getAllAccounts here and cache utility APIs\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @returns `AuthenticationResult` for the response that was loaded.\r\n   */\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n    var idToken = new AuthToken(response.id_token, this.cryptoObj);\n    var cacheRecord;\n    var authority;\n    if (request.account) {\n      var cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\n      cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata,\n        skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n      };\n      authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\n      // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\n        cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n    return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\n  };\n  /**\r\n   * Helper function to load account to msal-browser cache\r\n   * @param idToken\r\n   * @param environment\r\n   * @param clientInfo\r\n   * @param authorityType\r\n   * @param requestHomeAccountId\r\n   * @returns `AccountEntity`\r\n   */\n  TokenCache.prototype.loadAccount = function (idToken, environment, clientInfo, authorityType, requestHomeAccountId) {\n    var homeAccountId;\n    if (requestHomeAccountId) {\n      homeAccountId = requestHomeAccountId;\n    } else if (authorityType !== undefined && clientInfo) {\n      homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\n    }\n    if (!homeAccountId) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\n    }\n    var accountEntity = clientInfo ? AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading account\");\n      this.storage.setAccount(accountEntity);\n      return accountEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `IdTokenEntity`\r\n   */\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setIdTokenCredential(idTokenEntity);\n      return idTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns `AccessTokenEntity`\r\n   */\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return null;\n    }\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n      return accessTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load refresh tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @returns `RefreshTokenEntity`\r\n   */\n  TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\n    if (!response.refresh_token) {\n      this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\n      return null;\n    }\n    var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading refresh token\");\n      this.storage.setRefreshTokenCredential(refreshTokenEntity);\n      return refreshTokenEntity;\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to generate an `AuthenticationResult` for the result.\r\n   * @param request\r\n   * @param idTokenObj\r\n   * @param cacheRecord\r\n   * @param authority\r\n   * @returns `AuthenticationResult`\r\n   */\n  TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, authority) {\n    var _a, _b, _c;\n    var accessToken = Constants.EMPTY_STRING;\n    var responseScopes = [];\n    var expiresOn = null;\n    var extExpiresOn;\n    if (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) {\n      accessToken = cacheRecord.accessToken.secret;\n      responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n      expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n      extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n    }\n    var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\n    var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\n    return {\n      authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\n      uniqueId: uid,\n      tenantId: tid,\n      scopes: responseScopes,\n      account: (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) ? cacheRecord.account.getAccountInfo() : null,\n      idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\n      idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n      accessToken: accessToken,\n      fromCache: true,\n      expiresOn: expiresOn,\n      correlationId: request.correlationId || Constants.EMPTY_STRING,\n      requestId: Constants.EMPTY_STRING,\n      extExpiresOn: extExpiresOn,\n      familyId: Constants.EMPTY_STRING,\n      tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\n      state: Constants.EMPTY_STRING,\n      cloudGraphHostName: ((_b = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\n      msGraphHost: ((_c = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\n      code: undefined,\n      fromNativeBroker: false\n    };\n  };\n  return TokenCache;\n}();\nexport { TokenCache };","map":{"version":3,"names":["AuthToken","CacheRecord","Authority","AccountEntity","IdTokenEntity","ScopeSet","AccessTokenEntity","RefreshTokenEntity","Constants","BrowserAuthError","TokenCache","configuration","storage","logger","cryptoObj","isBrowserEnvironment","window","config","prototype","loadExternalTokens","request","response","options","info","id_token","createUnableToLoadTokenError","idToken","cacheRecord","authority","account","cacheRecordAccount","loadAccount","environment","undefined","homeAccountId","loadIdToken","tenantId","loadAccessToken","loadRefreshToken","authorityUrl","generateAuthority","azureCloudOptions","authorityOptions","protocolMode","auth","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","system","networkClient","clientInfo","trace","hostnameAndPort","authorityType","tenant","client_info","generateAuthenticationResult","requestHomeAccountId","generateHomeAccountId","accountEntity","createAccount","createGenericAccount","verbose","setAccount","idTokenEntity","createIdTokenEntity","rawToken","clientId","setIdTokenCredential","access_token","expires_in","extendedExpiresOn","scopes","printScopes","expiresOn","Date","getTime","accessTokenEntity","createAccessTokenEntity","setAccessTokenCredential","refresh_token","refreshTokenEntity","createRefreshTokenEntity","setRefreshTokenCredential","idTokenObj","_a","_b","_c","accessToken","EMPTY_STRING","responseScopes","extExpiresOn","secret","fromString","target","asArray","Number","uid","claims","oid","sub","tid","canonicalAuthority","uniqueId","getAccountInfo","idTokenClaims","fromCache","correlationId","requestId","familyId","tokenType","state","cloudGraphHostName","msGraphHost","code","fromNativeBroker"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/cache/TokenCache.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { AuthToken, CacheRecord, Authority, AccountEntity, IdTokenEntity, ScopeSet, AccessTokenEntity, RefreshTokenEntity, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Token cache manager\r\n */\r\nvar TokenCache = /** @class */ (function () {\r\n    function TokenCache(configuration, storage, logger, cryptoObj) {\r\n        this.isBrowserEnvironment = typeof window !== \"undefined\";\r\n        this.config = configuration;\r\n        this.storage = storage;\r\n        this.logger = logger;\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n    // Move getAllAccounts here and cache utility APIs\r\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */\r\n    TokenCache.prototype.loadExternalTokens = function (request, response, options) {\r\n        this.logger.info(\"TokenCache - loadExternalTokens called\");\r\n        if (!response.id_token) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\r\n        }\r\n        var idToken = new AuthToken(response.id_token, this.cryptoObj);\r\n        var cacheRecord;\r\n        var authority;\r\n        if (request.account) {\r\n            var cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);\r\n            cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));\r\n        }\r\n        else if (request.authority) {\r\n            var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\r\n            var authorityOptions = {\r\n                protocolMode: this.config.auth.protocolMode,\r\n                knownAuthorities: this.config.auth.knownAuthorities,\r\n                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                authorityMetadata: this.config.auth.authorityMetadata,\r\n                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,\r\n            };\r\n            authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);\r\n            // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\r\n            if (options.clientInfo) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from options\");\r\n                var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);\r\n                cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\r\n            }\r\n            else if (response.client_info) {\r\n                this.logger.trace(\"TokenCache - homeAccountId from response\");\r\n                var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);\r\n                cacheRecord = new CacheRecord(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));\r\n            }\r\n            else {\r\n                throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\r\n            }\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\r\n        }\r\n        return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);\r\n    };\r\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */\r\n    TokenCache.prototype.loadAccount = function (idToken, environment, clientInfo, authorityType, requestHomeAccountId) {\r\n        var homeAccountId;\r\n        if (requestHomeAccountId) {\r\n            homeAccountId = requestHomeAccountId;\r\n        }\r\n        else if (authorityType !== undefined && clientInfo) {\r\n            homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);\r\n        }\r\n        if (!homeAccountId) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Unexpected missing homeAccountId\");\r\n        }\r\n        var accountEntity = clientInfo ?\r\n            AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) :\r\n            AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading account\");\r\n            this.storage.setAccount(accountEntity);\r\n            return accountEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */\r\n    TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {\r\n        var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading id token\");\r\n            this.storage.setIdTokenCredential(idTokenEntity);\r\n            return idTokenEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */\r\n    TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\r\n        if (!response.access_token) {\r\n            this.logger.verbose(\"TokenCache - No access token provided for caching\");\r\n            return null;\r\n        }\r\n        if (!response.expires_in) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\r\n        }\r\n        if (!options.extendedExpiresOn) {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\r\n        }\r\n        var scopes = new ScopeSet(request.scopes).printScopes();\r\n        var expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);\r\n        var extendedExpiresOn = options.extendedExpiresOn;\r\n        var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading access token\");\r\n            this.storage.setAccessTokenCredential(accessTokenEntity);\r\n            return accessTokenEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */\r\n    TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {\r\n        if (!response.refresh_token) {\r\n            this.logger.verbose(\"TokenCache - No refresh token provided for caching\");\r\n            return null;\r\n        }\r\n        var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);\r\n        if (this.isBrowserEnvironment) {\r\n            this.logger.verbose(\"TokenCache - loading refresh token\");\r\n            this.storage.setRefreshTokenCredential(refreshTokenEntity);\r\n            return refreshTokenEntity;\r\n        }\r\n        else {\r\n            throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\r\n        }\r\n    };\r\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */\r\n    TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, authority) {\r\n        var _a, _b, _c;\r\n        var accessToken = Constants.EMPTY_STRING;\r\n        var responseScopes = [];\r\n        var expiresOn = null;\r\n        var extExpiresOn;\r\n        if (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) {\r\n            accessToken = cacheRecord.accessToken.secret;\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n        }\r\n        var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;\r\n        var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;\r\n        return {\r\n            authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) ? cacheRecord.account.getAccountInfo() : null,\r\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n            accessToken: accessToken,\r\n            fromCache: true,\r\n            expiresOn: expiresOn,\r\n            correlationId: request.correlationId || Constants.EMPTY_STRING,\r\n            requestId: Constants.EMPTY_STRING,\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: Constants.EMPTY_STRING,\r\n            tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,\r\n            state: Constants.EMPTY_STRING,\r\n            cloudGraphHostName: ((_b = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,\r\n            msGraphHost: ((_c = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,\r\n            code: undefined,\r\n            fromNativeBroker: false\r\n        };\r\n    };\r\n    return TokenCache;\r\n}());\n\nexport { TokenCache };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}