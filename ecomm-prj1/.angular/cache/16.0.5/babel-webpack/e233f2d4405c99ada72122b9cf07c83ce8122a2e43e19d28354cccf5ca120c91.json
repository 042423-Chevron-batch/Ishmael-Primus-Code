{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\nvar UsernamePasswordClient = /** @class */function (_super) {\n  __extends(UsernamePasswordClient, _super);\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addResponseTypeForTokenAndIdToken();\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return UsernamePasswordClient;\n}(BaseClient);\nexport { UsernamePasswordClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","ResponseHandler","RequestParameterBuilder","GrantType","StringUtils","TimeUtils","CcsCredentialType","UsernamePasswordClient","_super","configuration","call","prototype","acquireToken","request","reqTimestamp","response","responseHandler","tokenResponse","_a","label","logger","info","nowSeconds","executeTokenRequest","authority","sent","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","thumbprint","requestBody","headers","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","createTokenRequestBody","createTokenRequestHeaders","credential","username","type","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addResponseTypeForTokenAndIdToken","addGrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/client/UsernamePasswordClient.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nvar UsernamePasswordClient = /** @class */ (function (_super) {\r\n    __extends(UsernamePasswordClient, _super);\r\n    function UsernamePasswordClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, headers;\r\n            return __generator(this, function (_a) {\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: authority.canonicalAuthority,\r\n                    scopes: request.scopes,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                requestBody = this.createTokenRequestBody(request);\r\n                headers = this.createTokenRequestHeaders({\r\n                    credential: request.username,\r\n                    type: CcsCredentialType.UPN\r\n                });\r\n                return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return UsernamePasswordClient;\r\n}(BaseClient));\n\nexport { UsernamePasswordClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}