{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\nvar AuthToken = /** @class */function () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils.decodeAuthToken(encodedToken);\n    // token will be decoded to get the username\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload;\n      // base64Decode() should throw an error if there is an issue\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  };\n  /**\r\n   * Determine if the token's max_age has transpired\r\n   */\n  AuthToken.checkMaxAge = function (authTime, maxAge) {\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */\n    var fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n      throw ClientAuthError.createMaxAgeTranspiredError();\n    }\n  };\n  return AuthToken;\n}();\nexport { AuthToken };","map":{"version":3,"names":["ClientAuthError","StringUtils","AuthToken","rawToken","crypto","isEmpty","createTokenNullOrEmptyError","claims","extractTokenClaims","encodedToken","decodedToken","decodeAuthToken","base64TokenPayload","JWSPayload","base64Decoded","base64Decode","JSON","parse","err","createTokenParsingError","checkMaxAge","authTime","maxAge","fiveMinuteSkew","Date","now","createMaxAgeTranspiredError"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/account/AuthToken.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\r\nvar AuthToken = /** @class */ (function () {\r\n    function AuthToken(rawToken, crypto) {\r\n        if (StringUtils.isEmpty(rawToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\r\n        }\r\n        this.rawToken = rawToken;\r\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\r\n    }\r\n    /**\r\n     * Extract token by decoding the rawToken\r\n     *\r\n     * @param encodedToken\r\n     */\r\n    AuthToken.extractTokenClaims = function (encodedToken, crypto) {\r\n        var decodedToken = StringUtils.decodeAuthToken(encodedToken);\r\n        // token will be decoded to get the username\r\n        try {\r\n            var base64TokenPayload = decodedToken.JWSPayload;\r\n            // base64Decode() should throw an error if there is an issue\r\n            var base64Decoded = crypto.base64Decode(base64TokenPayload);\r\n            return JSON.parse(base64Decoded);\r\n        }\r\n        catch (err) {\r\n            throw ClientAuthError.createTokenParsingError(err);\r\n        }\r\n    };\r\n    /**\r\n     * Determine if the token's max_age has transpired\r\n     */\r\n    AuthToken.checkMaxAge = function (authTime, maxAge) {\r\n        /*\r\n         * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n         * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n         * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n         */\r\n        var fiveMinuteSkew = 300000; // five minutes in milliseconds\r\n        if ((maxAge === 0) || ((Date.now() - fiveMinuteSkew) > (authTime + maxAge))) {\r\n            throw ClientAuthError.createMaxAgeTranspiredError();\r\n        }\r\n    };\r\n    return AuthToken;\r\n}());\n\nexport { AuthToken };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,WAAW,QAAQ,yBAAyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,aAAe,YAAY;EACvC,SAASA,SAASA,CAACC,QAAQ,EAAEC,MAAM,EAAE;IACjC,IAAIH,WAAW,CAACI,OAAO,CAACF,QAAQ,CAAC,EAAE;MAC/B,MAAMH,eAAe,CAACM,2BAA2B,CAACH,QAAQ,CAAC;IAC/D;IACA,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACI,MAAM,GAAGL,SAAS,CAACM,kBAAkB,CAACL,QAAQ,EAAEC,MAAM,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;EACIF,SAAS,CAACM,kBAAkB,GAAG,UAAUC,YAAY,EAAEL,MAAM,EAAE;IAC3D,IAAIM,YAAY,GAAGT,WAAW,CAACU,eAAe,CAACF,YAAY,CAAC;IAC5D;IACA,IAAI;MACA,IAAIG,kBAAkB,GAAGF,YAAY,CAACG,UAAU;MAChD;MACA,IAAIC,aAAa,GAAGV,MAAM,CAACW,YAAY,CAACH,kBAAkB,CAAC;MAC3D,OAAOI,IAAI,CAACC,KAAK,CAACH,aAAa,CAAC;IACpC,CAAC,CACD,OAAOI,GAAG,EAAE;MACR,MAAMlB,eAAe,CAACmB,uBAAuB,CAACD,GAAG,CAAC;IACtD;EACJ,CAAC;EACD;AACJ;AACA;EACIhB,SAAS,CAACkB,WAAW,GAAG,UAAUC,QAAQ,EAAEC,MAAM,EAAE;IAChD;AACR;AACA;AACA;AACA;IACQ,IAAIC,cAAc,GAAG,MAAM,CAAC,CAAC;IAC7B,IAAKD,MAAM,KAAK,CAAC,IAAOE,IAAI,CAACC,GAAG,EAAE,GAAGF,cAAc,GAAKF,QAAQ,GAAGC,MAAQ,EAAE;MACzE,MAAMtB,eAAe,CAAC0B,2BAA2B,EAAE;IACvD;EACJ,CAAC;EACD,OAAOxB,SAAS;AACpB,CAAC,EAAG;AAEJ,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}