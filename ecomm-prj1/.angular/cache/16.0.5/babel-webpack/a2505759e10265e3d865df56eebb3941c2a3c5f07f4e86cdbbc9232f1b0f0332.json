{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TYPE = exports.Packet = exports.OFFSET = exports.HEADER_LENGTH = void 0;\nexports.isPacketComplete = isPacketComplete;\nexports.packetLength = packetLength;\nvar _sprintfJs = require(\"sprintf-js\");\nconst HEADER_LENGTH = 8;\nexports.HEADER_LENGTH = HEADER_LENGTH;\nconst TYPE = {\n  SQL_BATCH: 0x01,\n  RPC_REQUEST: 0x03,\n  TABULAR_RESULT: 0x04,\n  ATTENTION: 0x06,\n  BULK_LOAD: 0x07,\n  TRANSACTION_MANAGER: 0x0E,\n  LOGIN7: 0x10,\n  NTLMAUTH_PKT: 0x11,\n  PRELOGIN: 0x12,\n  FEDAUTH_TOKEN: 0x08\n};\nexports.TYPE = TYPE;\nconst typeByValue = {};\nfor (const name in TYPE) {\n  typeByValue[TYPE[name]] = name;\n}\nconst STATUS = {\n  NORMAL: 0x00,\n  EOM: 0x01,\n  IGNORE: 0x02,\n  RESETCONNECTION: 0x08,\n  RESETCONNECTIONSKIPTRAN: 0x10\n};\nconst OFFSET = {\n  Type: 0,\n  Status: 1,\n  Length: 2,\n  SPID: 4,\n  PacketID: 6,\n  Window: 7\n};\nexports.OFFSET = OFFSET;\nconst DEFAULT_SPID = 0;\nconst DEFAULT_PACKETID = 1;\nconst DEFAULT_WINDOW = 0;\nconst NL = '\\n';\nclass Packet {\n  constructor(typeOrBuffer) {\n    this.buffer = void 0;\n    if (typeOrBuffer instanceof Buffer) {\n      this.buffer = typeOrBuffer;\n    } else {\n      const type = typeOrBuffer;\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\n      this.buffer.writeUInt8(type, OFFSET.Type);\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\n      this.setLength();\n    }\n  }\n  setLength() {\n    this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\n  }\n  length() {\n    return this.buffer.readUInt16BE(OFFSET.Length);\n  }\n  resetConnection(reset) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (reset) {\n      status |= STATUS.RESETCONNECTION;\n    } else {\n      status &= 0xFF - STATUS.RESETCONNECTION;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n  last(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (arguments.length > 0) {\n      if (last) {\n        status |= STATUS.EOM;\n      } else {\n        status &= 0xFF - STATUS.EOM;\n      }\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n    return this.isLast();\n  }\n  ignore(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (last) {\n      status |= STATUS.IGNORE;\n    } else {\n      status &= 0xFF - STATUS.IGNORE;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n  isLast() {\n    return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\n  }\n  packetId(packetId) {\n    if (packetId) {\n      this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);\n    }\n    return this.buffer.readUInt8(OFFSET.PacketID);\n  }\n  addData(data) {\n    this.buffer = Buffer.concat([this.buffer, data]);\n    this.setLength();\n    return this;\n  }\n  data() {\n    return this.buffer.slice(HEADER_LENGTH);\n  }\n  type() {\n    return this.buffer.readUInt8(OFFSET.Type);\n  }\n  statusAsString() {\n    const status = this.buffer.readUInt8(OFFSET.Status);\n    const statuses = [];\n    for (const name in STATUS) {\n      const value = STATUS[name];\n      if (status & value) {\n        statuses.push(name);\n      } else {\n        statuses.push(undefined);\n      }\n    }\n    return statuses.join(' ').trim();\n  }\n  headerToString(indent = '') {\n    const text = (0, _sprintfJs.sprintf)('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\n    return indent + text;\n  }\n  dataToString(indent = '') {\n    const BYTES_PER_GROUP = 0x04;\n    const CHARS_PER_GROUP = 0x08;\n    const BYTES_PER_LINE = 0x20;\n    const data = this.data();\n    let dataDump = '';\n    let chars = '';\n    for (let offset = 0; offset < data.length; offset++) {\n      if (offset % BYTES_PER_LINE === 0) {\n        dataDump += indent;\n        dataDump += (0, _sprintfJs.sprintf)('%04X  ', offset);\n      }\n      if (data[offset] < 0x20 || data[offset] > 0x7E) {\n        chars += '.';\n        if ((offset + 1) % CHARS_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n          chars += ' ';\n        }\n      } else {\n        chars += String.fromCharCode(data[offset]);\n      }\n      if (data[offset] != null) {\n        dataDump += (0, _sprintfJs.sprintf)('%02X', data[offset]);\n      }\n      if ((offset + 1) % BYTES_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n        dataDump += ' ';\n      }\n      if ((offset + 1) % BYTES_PER_LINE === 0) {\n        dataDump += '  ' + chars;\n        chars = '';\n        if (offset < data.length - 1) {\n          dataDump += NL;\n        }\n      }\n    }\n    if (chars.length) {\n      dataDump += '  ' + chars;\n    }\n    return dataDump;\n  }\n  toString(indent = '') {\n    return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\n  }\n  payloadString() {\n    return '';\n  }\n}\nexports.Packet = Packet;\nfunction isPacketComplete(potentialPacketBuffer) {\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\n    return false;\n  } else {\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n  }\n}\nfunction packetLength(potentialPacketBuffer) {\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","TYPE","Packet","OFFSET","HEADER_LENGTH","isPacketComplete","packetLength","_sprintfJs","require","SQL_BATCH","RPC_REQUEST","TABULAR_RESULT","ATTENTION","BULK_LOAD","TRANSACTION_MANAGER","LOGIN7","NTLMAUTH_PKT","PRELOGIN","FEDAUTH_TOKEN","typeByValue","name","STATUS","NORMAL","EOM","IGNORE","RESETCONNECTION","RESETCONNECTIONSKIPTRAN","Type","Status","Length","SPID","PacketID","Window","DEFAULT_SPID","DEFAULT_PACKETID","DEFAULT_WINDOW","NL","constructor","typeOrBuffer","buffer","Buffer","type","alloc","writeUInt8","writeUInt16BE","setLength","length","readUInt16BE","resetConnection","reset","status","readUInt8","last","arguments","isLast","ignore","packetId","addData","data","concat","slice","statusAsString","statuses","push","undefined","join","trim","headerToString","indent","text","sprintf","dataToString","BYTES_PER_GROUP","CHARS_PER_GROUP","BYTES_PER_LINE","dataDump","chars","offset","String","fromCharCode","toString","payloadString","potentialPacketBuffer"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/packet.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TYPE = exports.Packet = exports.OFFSET = exports.HEADER_LENGTH = void 0;\nexports.isPacketComplete = isPacketComplete;\nexports.packetLength = packetLength;\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nconst HEADER_LENGTH = 8;\nexports.HEADER_LENGTH = HEADER_LENGTH;\nconst TYPE = {\n  SQL_BATCH: 0x01,\n  RPC_REQUEST: 0x03,\n  TABULAR_RESULT: 0x04,\n  ATTENTION: 0x06,\n  BULK_LOAD: 0x07,\n  TRANSACTION_MANAGER: 0x0E,\n  LOGIN7: 0x10,\n  NTLMAUTH_PKT: 0x11,\n  PRELOGIN: 0x12,\n  FEDAUTH_TOKEN: 0x08\n};\nexports.TYPE = TYPE;\nconst typeByValue = {};\n\nfor (const name in TYPE) {\n  typeByValue[TYPE[name]] = name;\n}\n\nconst STATUS = {\n  NORMAL: 0x00,\n  EOM: 0x01,\n  IGNORE: 0x02,\n  RESETCONNECTION: 0x08,\n  RESETCONNECTIONSKIPTRAN: 0x10\n};\nconst OFFSET = {\n  Type: 0,\n  Status: 1,\n  Length: 2,\n  SPID: 4,\n  PacketID: 6,\n  Window: 7\n};\nexports.OFFSET = OFFSET;\nconst DEFAULT_SPID = 0;\nconst DEFAULT_PACKETID = 1;\nconst DEFAULT_WINDOW = 0;\nconst NL = '\\n';\n\nclass Packet {\n  constructor(typeOrBuffer) {\n    this.buffer = void 0;\n\n    if (typeOrBuffer instanceof Buffer) {\n      this.buffer = typeOrBuffer;\n    } else {\n      const type = typeOrBuffer;\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\n      this.buffer.writeUInt8(type, OFFSET.Type);\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\n      this.setLength();\n    }\n  }\n\n  setLength() {\n    this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\n  }\n\n  length() {\n    return this.buffer.readUInt16BE(OFFSET.Length);\n  }\n\n  resetConnection(reset) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n\n    if (reset) {\n      status |= STATUS.RESETCONNECTION;\n    } else {\n      status &= 0xFF - STATUS.RESETCONNECTION;\n    }\n\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  last(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n\n    if (arguments.length > 0) {\n      if (last) {\n        status |= STATUS.EOM;\n      } else {\n        status &= 0xFF - STATUS.EOM;\n      }\n\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n\n    return this.isLast();\n  }\n\n  ignore(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n\n    if (last) {\n      status |= STATUS.IGNORE;\n    } else {\n      status &= 0xFF - STATUS.IGNORE;\n    }\n\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  isLast() {\n    return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\n  }\n\n  packetId(packetId) {\n    if (packetId) {\n      this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);\n    }\n\n    return this.buffer.readUInt8(OFFSET.PacketID);\n  }\n\n  addData(data) {\n    this.buffer = Buffer.concat([this.buffer, data]);\n    this.setLength();\n    return this;\n  }\n\n  data() {\n    return this.buffer.slice(HEADER_LENGTH);\n  }\n\n  type() {\n    return this.buffer.readUInt8(OFFSET.Type);\n  }\n\n  statusAsString() {\n    const status = this.buffer.readUInt8(OFFSET.Status);\n    const statuses = [];\n\n    for (const name in STATUS) {\n      const value = STATUS[name];\n\n      if (status & value) {\n        statuses.push(name);\n      } else {\n        statuses.push(undefined);\n      }\n    }\n\n    return statuses.join(' ').trim();\n  }\n\n  headerToString(indent = '') {\n    const text = (0, _sprintfJs.sprintf)('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\n    return indent + text;\n  }\n\n  dataToString(indent = '') {\n    const BYTES_PER_GROUP = 0x04;\n    const CHARS_PER_GROUP = 0x08;\n    const BYTES_PER_LINE = 0x20;\n    const data = this.data();\n    let dataDump = '';\n    let chars = '';\n\n    for (let offset = 0; offset < data.length; offset++) {\n      if (offset % BYTES_PER_LINE === 0) {\n        dataDump += indent;\n        dataDump += (0, _sprintfJs.sprintf)('%04X  ', offset);\n      }\n\n      if (data[offset] < 0x20 || data[offset] > 0x7E) {\n        chars += '.';\n\n        if ((offset + 1) % CHARS_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n          chars += ' ';\n        }\n      } else {\n        chars += String.fromCharCode(data[offset]);\n      }\n\n      if (data[offset] != null) {\n        dataDump += (0, _sprintfJs.sprintf)('%02X', data[offset]);\n      }\n\n      if ((offset + 1) % BYTES_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n        dataDump += ' ';\n      }\n\n      if ((offset + 1) % BYTES_PER_LINE === 0) {\n        dataDump += '  ' + chars;\n        chars = '';\n\n        if (offset < data.length - 1) {\n          dataDump += NL;\n        }\n      }\n    }\n\n    if (chars.length) {\n      dataDump += '  ' + chars;\n    }\n\n    return dataDump;\n  }\n\n  toString(indent = '') {\n    return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\n  }\n\n  payloadString() {\n    return '';\n  }\n\n}\n\nexports.Packet = Packet;\n\nfunction isPacketComplete(potentialPacketBuffer) {\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\n    return false;\n  } else {\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n  }\n}\n\nfunction packetLength(potentialPacketBuffer) {\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}