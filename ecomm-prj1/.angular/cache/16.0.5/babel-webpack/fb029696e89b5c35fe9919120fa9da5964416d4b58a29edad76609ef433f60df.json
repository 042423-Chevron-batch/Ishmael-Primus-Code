{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType, AuthenticationScheme } from '../../utils/Constants.js';\nimport { TimeUtils } from '../../utils/TimeUtils.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { AuthToken } from '../../account/AuthToken.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\nvar AccessTokenEntity = /** @class */function (_super) {\n  __extends(AccessTokenEntity, _super);\n  function AccessTokenEntity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Create AccessTokenEntity\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param accessToken\r\n   * @param clientId\r\n   * @param tenantId\r\n   * @param scopes\r\n   * @param expiresOn\r\n   * @param extExpiresOn\r\n   */\n  AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n    var _a, _b;\n    var atEntity = new AccessTokenEntity();\n    atEntity.homeAccountId = homeAccountId;\n    atEntity.credentialType = CredentialType.ACCESS_TOKEN;\n    atEntity.secret = accessToken;\n    var currentTime = TimeUtils.nowSeconds();\n    atEntity.cachedAt = currentTime.toString();\n    /*\r\n     * Token expiry time.\r\n     * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n     */\n    atEntity.expiresOn = expiresOn.toString();\n    atEntity.extendedExpiresOn = extExpiresOn.toString();\n    if (refreshOn) {\n      atEntity.refreshOn = refreshOn.toString();\n    }\n    atEntity.environment = environment;\n    atEntity.clientId = clientId;\n    atEntity.realm = tenantId;\n    atEntity.target = scopes;\n    atEntity.userAssertionHash = userAssertionHash;\n    atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\n    if (requestedClaims) {\n      atEntity.requestedClaims = requestedClaims;\n      atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */\n    if (((_a = atEntity.tokenType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== AuthenticationScheme.BEARER.toLowerCase()) {\n      atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n      switch (atEntity.tokenType) {\n        case AuthenticationScheme.POP:\n          // Make sure keyId is present and add it to credential\n          var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\n          if (!((_b = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _b === void 0 ? void 0 : _b.kid)) {\n            throw ClientAuthError.createTokenClaimsRequiredError();\n          }\n          atEntity.keyId = tokenClaims.cnf.kid;\n          break;\n        case AuthenticationScheme.SSH:\n          atEntity.keyId = keyId;\n      }\n    }\n    return atEntity;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  AccessTokenEntity.isAccessTokenEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n  };\n  return AccessTokenEntity;\n}(CredentialEntity);\nexport { AccessTokenEntity };","map":{"version":3,"names":["__extends","CredentialEntity","CredentialType","AuthenticationScheme","TimeUtils","StringUtils","AuthToken","ClientAuthError","AccessTokenEntity","_super","apply","arguments","createAccessTokenEntity","homeAccountId","environment","accessToken","clientId","tenantId","scopes","expiresOn","extExpiresOn","cryptoUtils","refreshOn","tokenType","userAssertionHash","keyId","requestedClaims","requestedClaimsHash","_a","_b","atEntity","credentialType","ACCESS_TOKEN","secret","currentTime","nowSeconds","cachedAt","toString","extendedExpiresOn","realm","target","isEmpty","BEARER","toLowerCase","ACCESS_TOKEN_WITH_AUTH_SCHEME","POP","tokenClaims","extractTokenClaims","cnf","kid","createTokenClaimsRequiredError","SSH","isAccessTokenEntity","entity","hasOwnProperty"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/cache/entities/AccessTokenEntity.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType, AuthenticationScheme } from '../../utils/Constants.js';\nimport { TimeUtils } from '../../utils/TimeUtils.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { AuthToken } from '../../account/AuthToken.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ACCESS_TOKEN Credential Type\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      cachedAt: Absolute device time when entry was created in the cache.\r\n *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.\r\n *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.\r\n *      keyId: used for POP and SSH tokenTypes\r\n *      tokenType: Type of the token issued. Usually \"Bearer\"\r\n * }\r\n */\r\nvar AccessTokenEntity = /** @class */ (function (_super) {\r\n    __extends(AccessTokenEntity, _super);\r\n    function AccessTokenEntity() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Create AccessTokenEntity\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param accessToken\r\n     * @param clientId\r\n     * @param tenantId\r\n     * @param scopes\r\n     * @param expiresOn\r\n     * @param extExpiresOn\r\n     */\r\n    AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\r\n        var _a, _b;\r\n        var atEntity = new AccessTokenEntity();\r\n        atEntity.homeAccountId = homeAccountId;\r\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN;\r\n        atEntity.secret = accessToken;\r\n        var currentTime = TimeUtils.nowSeconds();\r\n        atEntity.cachedAt = currentTime.toString();\r\n        /*\r\n         * Token expiry time.\r\n         * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.\r\n         */\r\n        atEntity.expiresOn = expiresOn.toString();\r\n        atEntity.extendedExpiresOn = extExpiresOn.toString();\r\n        if (refreshOn) {\r\n            atEntity.refreshOn = refreshOn.toString();\r\n        }\r\n        atEntity.environment = environment;\r\n        atEntity.clientId = clientId;\r\n        atEntity.realm = tenantId;\r\n        atEntity.target = scopes;\r\n        atEntity.userAssertionHash = userAssertionHash;\r\n        atEntity.tokenType = StringUtils.isEmpty(tokenType) ? AuthenticationScheme.BEARER : tokenType;\r\n        if (requestedClaims) {\r\n            atEntity.requestedClaims = requestedClaims;\r\n            atEntity.requestedClaimsHash = requestedClaimsHash;\r\n        }\r\n        /*\r\n         * Create Access Token With Auth Scheme instead of regular access token\r\n         * Cast to lower to handle \"bearer\" from ADFS\r\n         */\r\n        if (((_a = atEntity.tokenType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== AuthenticationScheme.BEARER.toLowerCase()) {\r\n            atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            switch (atEntity.tokenType) {\r\n                case AuthenticationScheme.POP:\r\n                    // Make sure keyId is present and add it to credential\r\n                    var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);\r\n                    if (!((_b = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _b === void 0 ? void 0 : _b.kid)) {\r\n                        throw ClientAuthError.createTokenClaimsRequiredError();\r\n                    }\r\n                    atEntity.keyId = tokenClaims.cnf.kid;\r\n                    break;\r\n                case AuthenticationScheme.SSH:\r\n                    atEntity.keyId = keyId;\r\n            }\r\n        }\r\n        return atEntity;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccessTokenEntity.isAccessTokenEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity.hasOwnProperty(\"target\") &&\r\n            (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\r\n    };\r\n    return AccessTokenEntity;\r\n}(CredentialEntity));\n\nexport { AccessTokenEntity };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}