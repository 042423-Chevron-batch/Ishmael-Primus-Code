{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\nvar CredentialEntity = /** @class */function () {\n  function CredentialEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  CredentialEntity.prototype.generateAccountId = function () {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  };\n  /**\r\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n   */\n  CredentialEntity.prototype.generateCredentialId = function () {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.prototype.generateTarget = function () {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  };\n  /**\r\n   * generates credential key\r\n   */\n  CredentialEntity.prototype.generateCredentialKey = function () {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\n  };\n  /**\r\n   * returns the type of the cache (in this case credential)\r\n   */\n  CredentialEntity.prototype.generateType = function () {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        return CacheType.ACCESS_TOKEN;\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n      default:\n        {\n          throw ClientAuthError.createUnexpectedCredentialTypeError();\n        }\n    }\n  };\n  /**\r\n   * generates credential key\r\n   * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n   */\n  CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\n    var credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target), this.generateClaimsHashForCacheKey(requestedClaimsHash), this.generateSchemeForCacheKey(tokenType)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * generates Account Id for keys\r\n   * @param homeAccountId\r\n   * @param environment\r\n   */\n  CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\n    var accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generates Credential Id for keys\r\n   * @param credentialType\r\n   * @param realm\r\n   * @param clientId\r\n   * @param familyId\r\n   */\n  CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\n    var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    var credentialId = [credentialType, clientOrFamilyId, realm || Constants.EMPTY_STRING];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.generateTargetForCacheKey = function (scopes) {\n    return (scopes || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate requested claims key component as per schema: <requestedClaims>\r\n   */\n  CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {\n    return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\n  };\n  /**\r\n   * Generate scheme key componenet as per schema: <scheme>\r\n   */\n  CredentialEntity.generateSchemeForCacheKey = function (tokenType) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    return tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\n  };\n  return CredentialEntity;\n}();\nexport { CredentialEntity };","map":{"version":3,"names":["CredentialType","CacheType","Separators","Constants","AuthenticationScheme","ClientAuthError","CredentialEntity","prototype","generateAccountId","generateAccountIdForCacheKey","homeAccountId","environment","generateCredentialId","generateCredentialIdForCacheKey","credentialType","clientId","realm","familyId","generateTarget","generateTargetForCacheKey","target","generateCredentialKey","generateCredentialCacheKey","tokenType","requestedClaimsHash","generateType","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","createUnexpectedCredentialTypeError","credentialKey","generateClaimsHashForCacheKey","generateSchemeForCacheKey","join","CACHE_KEY_SEPARATOR","toLowerCase","accountId","clientOrFamilyId","credentialId","EMPTY_STRING","scopes","BEARER"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/cache/entities/CredentialEntity.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { CredentialType, CacheType, Separators, Constants, AuthenticationScheme } from '../../utils/Constants.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)\r\n *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request\r\n *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow\r\n * }\r\n */\r\nvar CredentialEntity = /** @class */ (function () {\r\n    function CredentialEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    CredentialEntity.prototype.generateAccountId = function () {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    };\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    CredentialEntity.prototype.generateCredentialId = function () {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.prototype.generateTarget = function () {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    };\r\n    /**\r\n     * generates credential key\r\n     */\r\n    CredentialEntity.prototype.generateCredentialKey = function () {\r\n        return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    CredentialEntity.prototype.generateType = function () {\r\n        switch (this.credentialType) {\r\n            case CredentialType.ID_TOKEN:\r\n                return CacheType.ID_TOKEN;\r\n            case CredentialType.ACCESS_TOKEN:\r\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                return CacheType.ACCESS_TOKEN;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                return CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * generates credential key\r\n     * <home_account_id*>-\\<environment>-<credential_type>-<client_id>-<realm\\*>-<target\\*>-<scheme\\*>\r\n     */\r\n    CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {\r\n        var credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n            this.generateClaimsHashForCacheKey(requestedClaimsHash),\r\n            this.generateSchemeForCacheKey(tokenType)\r\n        ];\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\r\n        var accountId = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\r\n        var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN\r\n            ? familyId || clientId\r\n            : clientId;\r\n        var credentialId = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || Constants.EMPTY_STRING,\r\n        ];\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    CredentialEntity.generateTargetForCacheKey = function (scopes) {\r\n        return (scopes || Constants.EMPTY_STRING).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate requested claims key component as per schema: <requestedClaims>\r\n     */\r\n    CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {\r\n        return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate scheme key componenet as per schema: <scheme>\r\n     */\r\n    CredentialEntity.generateSchemeForCacheKey = function (tokenType) {\r\n        /*\r\n         * PoP Tokens and SSH certs include scheme in cache key\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        return (tokenType && tokenType.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : Constants.EMPTY_STRING;\r\n    };\r\n    return CredentialEntity;\r\n}());\n\nexport { CredentialEntity };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,cAAc,EAAEC,SAAS,EAAEC,UAAU,EAAEC,SAAS,EAAEC,oBAAoB,QAAQ,0BAA0B;AACjH,SAASC,eAAe,QAAQ,gCAAgC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgBA,CAAA,EAAG,CAC5B;EACA;AACJ;AACA;EACIA,gBAAgB,CAACC,SAAS,CAACC,iBAAiB,GAAG,YAAY;IACvD,OAAOF,gBAAgB,CAACG,4BAA4B,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,WAAW,CAAC;EAC9F,CAAC;EACD;AACJ;AACA;EACIL,gBAAgB,CAACC,SAAS,CAACK,oBAAoB,GAAG,YAAY;IAC1D,OAAON,gBAAgB,CAACO,+BAA+B,CAAC,IAAI,CAACC,cAAc,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC;EAC1H,CAAC;EACD;AACJ;AACA;EACIX,gBAAgB,CAACC,SAAS,CAACW,cAAc,GAAG,YAAY;IACpD,OAAOZ,gBAAgB,CAACa,yBAAyB,CAAC,IAAI,CAACC,MAAM,CAAC;EAClE,CAAC;EACD;AACJ;AACA;EACId,gBAAgB,CAACC,SAAS,CAACc,qBAAqB,GAAG,YAAY;IAC3D,OAAOf,gBAAgB,CAACgB,0BAA0B,CAAC,IAAI,CAACZ,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,IAAI,CAACG,cAAc,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACI,MAAM,EAAE,IAAI,CAACH,QAAQ,EAAE,IAAI,CAACM,SAAS,EAAE,IAAI,CAACC,mBAAmB,CAAC;EAClN,CAAC;EACD;AACJ;AACA;EACIlB,gBAAgB,CAACC,SAAS,CAACkB,YAAY,GAAG,YAAY;IAClD,QAAQ,IAAI,CAACX,cAAc;MACvB,KAAKd,cAAc,CAAC0B,QAAQ;QACxB,OAAOzB,SAAS,CAACyB,QAAQ;MAC7B,KAAK1B,cAAc,CAAC2B,YAAY;MAChC,KAAK3B,cAAc,CAAC4B,6BAA6B;QAC7C,OAAO3B,SAAS,CAAC0B,YAAY;MACjC,KAAK3B,cAAc,CAAC6B,aAAa;QAC7B,OAAO5B,SAAS,CAAC4B,aAAa;MAClC;QAAS;UACL,MAAMxB,eAAe,CAACyB,mCAAmC,EAAE;QAC/D;IAAC;EAET,CAAC;EACD;AACJ;AACA;AACA;EACIxB,gBAAgB,CAACgB,0BAA0B,GAAG,UAAUZ,aAAa,EAAEC,WAAW,EAAEG,cAAc,EAAEC,QAAQ,EAAEC,KAAK,EAAEI,MAAM,EAAEH,QAAQ,EAAEM,SAAS,EAAEC,mBAAmB,EAAE;IACnK,IAAIO,aAAa,GAAG,CAChB,IAAI,CAACtB,4BAA4B,CAACC,aAAa,EAAEC,WAAW,CAAC,EAC7D,IAAI,CAACE,+BAA+B,CAACC,cAAc,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAAC,EAC/E,IAAI,CAACE,yBAAyB,CAACC,MAAM,CAAC,EACtC,IAAI,CAACY,6BAA6B,CAACR,mBAAmB,CAAC,EACvD,IAAI,CAACS,yBAAyB,CAACV,SAAS,CAAC,CAC5C;IACD,OAAOQ,aAAa,CAACG,IAAI,CAAChC,UAAU,CAACiC,mBAAmB,CAAC,CAACC,WAAW,EAAE;EAC3E,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI9B,gBAAgB,CAACG,4BAA4B,GAAG,UAAUC,aAAa,EAAEC,WAAW,EAAE;IAClF,IAAI0B,SAAS,GAAG,CAAC3B,aAAa,EAAEC,WAAW,CAAC;IAC5C,OAAO0B,SAAS,CAACH,IAAI,CAAChC,UAAU,CAACiC,mBAAmB,CAAC,CAACC,WAAW,EAAE;EACvE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI9B,gBAAgB,CAACO,+BAA+B,GAAG,UAAUC,cAAc,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IACpG,IAAIqB,gBAAgB,GAAGxB,cAAc,KAAKd,cAAc,CAAC6B,aAAa,GAChEZ,QAAQ,IAAIF,QAAQ,GACpBA,QAAQ;IACd,IAAIwB,YAAY,GAAG,CACfzB,cAAc,EACdwB,gBAAgB,EAChBtB,KAAK,IAAIb,SAAS,CAACqC,YAAY,CAClC;IACD,OAAOD,YAAY,CAACL,IAAI,CAAChC,UAAU,CAACiC,mBAAmB,CAAC,CAACC,WAAW,EAAE;EAC1E,CAAC;EACD;AACJ;AACA;EACI9B,gBAAgB,CAACa,yBAAyB,GAAG,UAAUsB,MAAM,EAAE;IAC3D,OAAO,CAACA,MAAM,IAAItC,SAAS,CAACqC,YAAY,EAAEJ,WAAW,EAAE;EAC3D,CAAC;EACD;AACJ;AACA;EACI9B,gBAAgB,CAAC0B,6BAA6B,GAAG,UAAUR,mBAAmB,EAAE;IAC5E,OAAO,CAACA,mBAAmB,IAAIrB,SAAS,CAACqC,YAAY,EAAEJ,WAAW,EAAE;EACxE,CAAC;EACD;AACJ;AACA;EACI9B,gBAAgB,CAAC2B,yBAAyB,GAAG,UAAUV,SAAS,EAAE;IAC9D;AACR;AACA;AACA;IACQ,OAAQA,SAAS,IAAIA,SAAS,CAACa,WAAW,EAAE,KAAKhC,oBAAoB,CAACsC,MAAM,CAACN,WAAW,EAAE,GAAIb,SAAS,CAACa,WAAW,EAAE,GAAGjC,SAAS,CAACqC,YAAY;EAClJ,CAAC;EACD,OAAOlC,gBAAgB;AAC3B,CAAC,EAAG;AAEJ,SAASA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}