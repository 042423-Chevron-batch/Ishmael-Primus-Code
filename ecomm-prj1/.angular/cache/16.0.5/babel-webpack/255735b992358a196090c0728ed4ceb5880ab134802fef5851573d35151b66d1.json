{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnexpectedTokenError = exports.TokenHandler = exports.RequestTokenHandler = exports.Login7TokenHandler = exports.InitialSqlTokenHandler = exports.AttentionTokenHandler = void 0;\nvar _request = _interopRequireDefault(require(\"../request\"));\nvar _errors = require(\"../errors\");\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass UnexpectedTokenError extends Error {\n  constructor(handler, token) {\n    super('Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n}\nexports.UnexpectedTokenError = UnexpectedTokenError;\nclass TokenHandler {\n  onInfoMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onErrorMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onSSPI(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDatabaseChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onLanguageChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onCharsetChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onSqlCollationChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRoutingChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onPacketSizeChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onResetConnection(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onBeginTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onCommitTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRollbackTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onFedAuthInfo(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onFeatureExtAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onLoginAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onColMetadata(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onOrder(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRow(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onReturnStatus(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onReturnValue(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDoneProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDoneInProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDone(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDatabaseMirroringPartner(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n}\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\n\nexports.TokenHandler = TokenHandler;\nclass InitialSqlTokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.connection = void 0;\n    this.connection = connection;\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n  onColMetadata(token) {\n    this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onOrder(token) {\n    this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onRow(token) {\n    this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onReturnStatus(token) {// Do nothing\n  }\n  onReturnValue(token) {// Do nothing\n  }\n  onDoneProc(token) {// Do nothing\n  }\n  onDoneInProc(token) {// Do nothing\n  }\n  onDone(token) {// Do nothing\n  }\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n}\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\n\nexports.InitialSqlTokenHandler = InitialSqlTokenHandler;\nclass Login7TokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.connection = void 0;\n    this.fedAuthInfoToken = void 0;\n    this.routingData = void 0;\n    this.loginAckReceived = false;\n    this.connection = connection;\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n    const error = new _errors.ConnectionError(token.message, 'ELOGIN');\n    const isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n    if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n      error.isTransient = true;\n    }\n    this.connection.loginError = error;\n  }\n  onSSPI(token) {\n    if (token.ntlmpacket) {\n      this.connection.ntlmpacket = token.ntlmpacket;\n      this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n    }\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onFedAuthInfo(token) {\n    this.fedAuthInfoToken = token;\n  }\n  onFeatureExtAck(token) {\n    const {\n      authentication\n    } = this.connection.config;\n    if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n      if (token.fedAuth === undefined) {\n        this.connection.loginError = new _errors.ConnectionError('Did not receive Active Directory authentication acknowledgement');\n      } else if (token.fedAuth.length !== 0) {\n        this.connection.loginError = new _errors.ConnectionError(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n      }\n    } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n      this.connection.loginError = new _errors.ConnectionError('Received acknowledgement for unknown feature');\n    } else if (token.fedAuth) {\n      this.connection.loginError = new _errors.ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n    }\n  }\n  onLoginAck(token) {\n    if (!token.tdsVersion) {\n      // unsupported TDS version\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n      return;\n    }\n    if (!token.interface) {\n      // unsupported interface\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n      return;\n    } // use negotiated version\n\n    this.connection.config.options.tdsVersion = token.tdsVersion;\n    this.loginAckReceived = true;\n  }\n  onRoutingChange(token) {\n    // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n    const [server] = token.newValue.server.split('\\\\');\n    this.routingData = {\n      server,\n      port: token.newValue.port\n    };\n  }\n  onDoneInProc(token) {// Do nothing\n  }\n  onDone(token) {// Do nothing\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onDatabaseMirroringPartner(token) {// Do nothing\n  }\n}\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\n\nexports.Login7TokenHandler = Login7TokenHandler;\nclass RequestTokenHandler extends TokenHandler {\n  constructor(connection, request) {\n    super();\n    this.connection = void 0;\n    this.request = void 0;\n    this.errors = void 0;\n    this.connection = connection;\n    this.request = request;\n    this.errors = [];\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n    if (!this.request.canceled) {\n      const error = new _errors.RequestError(token.message, 'EREQUEST');\n      error.number = token.number;\n      error.state = token.state;\n      error.class = token.class;\n      error.serverName = token.serverName;\n      error.procName = token.procName;\n      error.lineNumber = token.lineNumber;\n      this.errors.push(error);\n      this.request.error = error;\n      if (this.request instanceof _request.default && this.errors.length > 1) {\n        this.request.error = new _esAggregateError.default(this.errors);\n      }\n    }\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n  onColMetadata(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.useColumnNames) {\n        const columns = Object.create(null);\n        for (let j = 0, len = token.columns.length; j < len; j++) {\n          const col = token.columns[j];\n          if (columns[col.colName] == null) {\n            columns[col.colName] = col;\n          }\n        }\n        this.request.emit('columnMetadata', columns);\n      } else {\n        this.request.emit('columnMetadata', token.columns);\n      }\n    }\n  }\n  onOrder(token) {\n    if (!this.request.canceled) {\n      this.request.emit('order', token.orderColumns);\n    }\n  }\n  onRow(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n        this.request.rows.push(token.columns);\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst.push(token.columns);\n      }\n      this.request.emit('row', token.columns);\n    }\n  }\n  onReturnStatus(token) {\n    if (!this.request.canceled) {\n      // Keep value for passing in 'doneProc' event.\n      this.connection.procReturnStatusValue = token.value;\n    }\n  }\n  onReturnValue(token) {\n    if (!this.request.canceled) {\n      this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n    }\n  }\n  onDoneProc(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n      this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n      this.connection.procReturnStatusValue = undefined;\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onDoneInProc(token) {\n    if (!this.request.canceled) {\n      this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onDone(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n      this.request.emit('done', token.rowCount, token.more, this.request.rst);\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n}\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\n\nexports.RequestTokenHandler = RequestTokenHandler;\nclass AttentionTokenHandler extends TokenHandler {\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n  constructor(connection, request) {\n    super();\n    this.connection = void 0;\n    this.request = void 0;\n    this.attentionReceived = void 0;\n    this.connection = connection;\n    this.request = request;\n    this.attentionReceived = false;\n  }\n  onDone(token) {\n    if (token.attention) {\n      this.attentionReceived = true;\n    }\n  }\n}\nexports.AttentionTokenHandler = AttentionTokenHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","UnexpectedTokenError","TokenHandler","RequestTokenHandler","Login7TokenHandler","InitialSqlTokenHandler","AttentionTokenHandler","_request","_interopRequireDefault","require","_errors","_esAggregateError","obj","__esModule","default","Error","constructor","handler","token","name","onInfoMessage","onErrorMessage","onSSPI","onDatabaseChange","onLanguageChange","onCharsetChange","onSqlCollationChange","onRoutingChange","onPacketSizeChange","onResetConnection","onBeginTransaction","onCommitTransaction","onRollbackTransaction","onFedAuthInfo","onFeatureExtAck","onLoginAck","onColMetadata","onOrder","onRow","onReturnStatus","onReturnValue","onDoneProc","onDoneInProc","onDone","onDatabaseMirroringPartner","connection","emit","newValue","databaseCollation","messageIo","packetSize","transactionDescriptors","push","inTransaction","length","close","fedAuthInfoToken","routingData","loginAckReceived","error","ConnectionError","message","isLoginErrorTransient","transientErrorLookup","isTransientError","number","curTransientRetryCount","config","options","maxRetriesOnTransientErrors","isTransient","loginError","ntlmpacket","ntlmpacketBuffer","authentication","type","fedAuth","undefined","utf8Support","tdsVersion","interface","server","split","port","request","errors","canceled","RequestError","state","class","serverName","procName","lineNumber","useColumnNames","columns","create","j","len","col","colName","orderColumns","rowCollectionOnRequestCompletion","rows","rowCollectionOnDone","rst","procReturnStatusValue","paramName","metadata","sqlError","rowCount","more","attentionReceived","attention"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/token/handler.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnexpectedTokenError = exports.TokenHandler = exports.RequestTokenHandler = exports.Login7TokenHandler = exports.InitialSqlTokenHandler = exports.AttentionTokenHandler = void 0;\n\nvar _request = _interopRequireDefault(require(\"../request\"));\n\nvar _errors = require(\"../errors\");\n\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass UnexpectedTokenError extends Error {\n  constructor(handler, token) {\n    super('Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n\n}\n\nexports.UnexpectedTokenError = UnexpectedTokenError;\n\nclass TokenHandler {\n  onInfoMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onErrorMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSSPI(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLanguageChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCharsetChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSqlCollationChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRoutingChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onPacketSizeChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onResetConnection(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onBeginTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCommitTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRollbackTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFedAuthInfo(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFeatureExtAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLoginAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onColMetadata(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onOrder(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRow(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnStatus(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnValue(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneInProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDone(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseMirroringPartner(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n}\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\n\n\nexports.TokenHandler = TokenHandler;\n\nclass InitialSqlTokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.connection = void 0;\n    this.connection = connection;\n  }\n\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n  }\n\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token) {\n    this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onOrder(token) {\n    this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onRow(token) {\n    this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onReturnStatus(token) {// Do nothing\n  }\n\n  onReturnValue(token) {// Do nothing\n  }\n\n  onDoneProc(token) {// Do nothing\n  }\n\n  onDoneInProc(token) {// Do nothing\n  }\n\n  onDone(token) {// Do nothing\n  }\n\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n\n}\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\n\n\nexports.InitialSqlTokenHandler = InitialSqlTokenHandler;\n\nclass Login7TokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.connection = void 0;\n    this.fedAuthInfoToken = void 0;\n    this.routingData = void 0;\n    this.loginAckReceived = false;\n    this.connection = connection;\n  }\n\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n    const error = new _errors.ConnectionError(token.message, 'ELOGIN');\n    const isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n\n    if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n      error.isTransient = true;\n    }\n\n    this.connection.loginError = error;\n  }\n\n  onSSPI(token) {\n    if (token.ntlmpacket) {\n      this.connection.ntlmpacket = token.ntlmpacket;\n      this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n    }\n  }\n\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onFedAuthInfo(token) {\n    this.fedAuthInfoToken = token;\n  }\n\n  onFeatureExtAck(token) {\n    const {\n      authentication\n    } = this.connection.config;\n\n    if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n      if (token.fedAuth === undefined) {\n        this.connection.loginError = new _errors.ConnectionError('Did not receive Active Directory authentication acknowledgement');\n      } else if (token.fedAuth.length !== 0) {\n        this.connection.loginError = new _errors.ConnectionError(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n      }\n    } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n      this.connection.loginError = new _errors.ConnectionError('Received acknowledgement for unknown feature');\n    } else if (token.fedAuth) {\n      this.connection.loginError = new _errors.ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n    }\n  }\n\n  onLoginAck(token) {\n    if (!token.tdsVersion) {\n      // unsupported TDS version\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n      return;\n    }\n\n    if (!token.interface) {\n      // unsupported interface\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n      return;\n    } // use negotiated version\n\n\n    this.connection.config.options.tdsVersion = token.tdsVersion;\n    this.loginAckReceived = true;\n  }\n\n  onRoutingChange(token) {\n    // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n    const [server] = token.newValue.server.split('\\\\');\n    this.routingData = {\n      server,\n      port: token.newValue.port\n    };\n  }\n\n  onDoneInProc(token) {// Do nothing\n  }\n\n  onDone(token) {// Do nothing\n  }\n\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onDatabaseMirroringPartner(token) {// Do nothing\n  }\n\n}\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\n\n\nexports.Login7TokenHandler = Login7TokenHandler;\n\nclass RequestTokenHandler extends TokenHandler {\n  constructor(connection, request) {\n    super();\n    this.connection = void 0;\n    this.request = void 0;\n    this.errors = void 0;\n    this.connection = connection;\n    this.request = request;\n    this.errors = [];\n  }\n\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n\n    if (!this.request.canceled) {\n      const error = new _errors.RequestError(token.message, 'EREQUEST');\n      error.number = token.number;\n      error.state = token.state;\n      error.class = token.class;\n      error.serverName = token.serverName;\n      error.procName = token.procName;\n      error.lineNumber = token.lineNumber;\n      this.errors.push(error);\n      this.request.error = error;\n\n      if (this.request instanceof _request.default && this.errors.length > 1) {\n        this.request.error = new _esAggregateError.default(this.errors);\n      }\n    }\n  }\n\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.useColumnNames) {\n        const columns = Object.create(null);\n\n        for (let j = 0, len = token.columns.length; j < len; j++) {\n          const col = token.columns[j];\n\n          if (columns[col.colName] == null) {\n            columns[col.colName] = col;\n          }\n        }\n\n        this.request.emit('columnMetadata', columns);\n      } else {\n        this.request.emit('columnMetadata', token.columns);\n      }\n    }\n  }\n\n  onOrder(token) {\n    if (!this.request.canceled) {\n      this.request.emit('order', token.orderColumns);\n    }\n  }\n\n  onRow(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n        this.request.rows.push(token.columns);\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst.push(token.columns);\n      }\n\n      this.request.emit('row', token.columns);\n    }\n  }\n\n  onReturnStatus(token) {\n    if (!this.request.canceled) {\n      // Keep value for passing in 'doneProc' event.\n      this.connection.procReturnStatusValue = token.value;\n    }\n  }\n\n  onReturnValue(token) {\n    if (!this.request.canceled) {\n      this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n    }\n  }\n\n  onDoneProc(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n      this.connection.procReturnStatusValue = undefined;\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDoneInProc(token) {\n    if (!this.request.canceled) {\n      this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDone(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('done', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n\n}\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\n\n\nexports.RequestTokenHandler = RequestTokenHandler;\n\nclass AttentionTokenHandler extends TokenHandler {\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n  constructor(connection, request) {\n    super();\n    this.connection = void 0;\n    this.request = void 0;\n    this.attentionReceived = void 0;\n    this.connection = connection;\n    this.request = request;\n    this.attentionReceived = false;\n  }\n\n  onDone(token) {\n    if (token.attention) {\n      this.attentionReceived = true;\n    }\n  }\n\n}\n\nexports.AttentionTokenHandler = AttentionTokenHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}