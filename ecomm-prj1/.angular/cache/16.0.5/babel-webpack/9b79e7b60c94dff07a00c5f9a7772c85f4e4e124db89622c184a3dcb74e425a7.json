{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, HeaderNames, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 refresh token client\r\n */\nvar RefreshTokenClient = /** @class */function (_super) {\n  __extends(RefreshTokenClient, _super);\n  function RefreshTokenClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, requestId, responseHandler;\n      var _this = this;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n            reqTimestamp = TimeUtils.nowSeconds();\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            response = _h.sent();\n            httpVerToken = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              refreshTokenSize: ((_e = response.body.refresh_token) === null || _e === void 0 ? void 0 : _e.length) || 0\n            });\n            if (httpVerToken) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerToken: httpVerToken\n              });\n            }\n            requestId = (_f = response.headers) === null || _f === void 0 ? void 0 : _f[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            (_g = this.performanceClient) === null || _g === void 0 ? void 0 : _g.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_e) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n          try {\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n              return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n              // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        }\n        // fall back to application refresh token acquisition\n        (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, refreshToken, refreshTokenRequest;\n      return __generator(this, function (_d) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\n        if (!refreshToken) {\n          atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n        // attach cached RT size to the current measurement\n        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n          success: true\n        });\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, queryParametersString, endpoint, requestBody, headers, thumbprint;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _d.sent();\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(function (result) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n            correlationId = request.correlationId;\n            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _d.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                  success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _d.label = 3;\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n              success: true\n            });\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  return RefreshTokenClient;\n}(BaseClient);\nexport { RefreshTokenClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","BaseClient","RequestParameterBuilder","AuthenticationScheme","GrantType","HeaderNames","Errors","ResponseHandler","PopTokenGenerator","StringUtils","ClientConfigurationError","ClientAuthError","ServerError","TimeUtils","UrlString","CcsCredentialType","buildClientInfoFromHomeAccountId","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","PerformanceEvents","RefreshTokenClient","_super","configuration","performanceClient","call","prototype","acquireToken","request","_a","_b","_c","_d","_e","_f","_g","atsMeasurement","reqTimestamp","response","httpVerToken","requestId","responseHandler","_this","_h","label","addQueueMeasurement","RefreshTokenClientAcquireToken","correlationId","startMeasurement","logger","verbose","nowSeconds","setPreQueueTime","RefreshTokenClientExecuteTokenRequest","executeTokenRequest","authority","sent","headers","X_MS_HTTP_VERSION","addStaticFields","refreshTokenSize","body","refresh_token","length","X_MS_REQUEST_ID","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","HandleServerTokenResponse","handleServerTokenResponse","undefined","forceCache","then","result","endMeasurement","success","catch","error","errorCode","subErrorCode","subError","acquireTokenByRefreshToken","isFOCI","noFamilyRTInCache","clientMismatchErrorWithFamilyRT","createEmptyTokenRequestError","RefreshTokenClientAcquireTokenByRefreshToken","account","createNoAccountInSilentRequestError","isAppMetadataFOCI","environment","RefreshTokenClientAcquireTokenWithCachedRefreshToken","acquireTokenWithCachedRefreshToken","e","noTokensFoundError","code","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","foci","refreshToken","refreshTokenRequest","getRefreshToken","discardMeasurement","createNoTokensFoundError","secret","authenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","HOME_ACCOUNT_ID","acquireTokenMeasurement","queryParametersString","endpoint","requestBody","thumbprint","RefreshTokenClientCreateTokenRequestBody","createTokenQueryParameters","appendQueryString","tokenEndpoint","createTokenRequestBody","createTokenRequestHeaders","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","clientAssertion","popTokenGenerator","reqCnfData","clientInfo","BaseClientCreateTokenRequestHeaders","addClientId","addScopes","addGrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","PopTokenGenerateCnf","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","isEmptyObj","clientCapabilities","addClaims","systemOptions","preventCorsPreflight","addCcsOid","UPN","addCcsUpn","createQueryString"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/client/RefreshTokenClient.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, HeaderNames, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nvar RefreshTokenClient = /** @class */ (function (_super) {\r\n    __extends(RefreshTokenClient, _super);\r\n    function RefreshTokenClient(configuration, performanceClient) {\r\n        return _super.call(this, configuration, performanceClient) || this;\r\n    }\r\n    RefreshTokenClient.prototype.acquireToken = function (request) {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var atsMeasurement, reqTimestamp, response, httpVerToken, requestId, responseHandler;\r\n            var _this = this;\r\n            return __generator(this, function (_h) {\r\n                switch (_h.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n                        atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n                        this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1:\r\n                        response = _h.sent();\r\n                        httpVerToken = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_HTTP_VERSION];\r\n                        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\r\n                            refreshTokenSize: ((_e = response.body.refresh_token) === null || _e === void 0 ? void 0 : _e.length) || 0,\r\n                        });\r\n                        if (httpVerToken) {\r\n                            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\r\n                                httpVerToken: httpVerToken,\r\n                            });\r\n                        }\r\n                        requestId = (_f = response.headers) === null || _f === void 0 ? void 0 : _f[HeaderNames.X_MS_REQUEST_ID];\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        (_g = this.performanceClient) === null || _g === void 0 ? void 0 : _g.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\r\n                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {\r\n                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\r\n                                    success: true\r\n                                });\r\n                                return result;\r\n                            })\r\n                                .catch(function (error) {\r\n                                _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\r\n                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\r\n                                    errorCode: error.errorCode,\r\n                                    subErrorCode: error.subError,\r\n                                    success: false\r\n                                });\r\n                                throw error;\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\r\n            return __generator(this, function (_e) {\r\n                // Cannot renew token if no request object is given.\r\n                if (!request) {\r\n                    throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                }\r\n                (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n                // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                if (!request.account) {\r\n                    throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                }\r\n                isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\r\n                // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n                if (isFOCI) {\r\n                    try {\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n                        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\r\n                    }\r\n                    catch (e) {\r\n                        noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\r\n                        clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n                        // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                        if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n                            // throw in all other cases\r\n                        }\r\n                        else {\r\n                            throw e;\r\n                        }\r\n                    }\r\n                }\r\n                // fall back to application refresh token acquisition\r\n                (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var atsMeasurement, refreshToken, refreshTokenRequest;\r\n            return __generator(this, function (_d) {\r\n                (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n                atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n                this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\r\n                refreshToken = this.cacheManager.getRefreshToken(request.account, foci);\r\n                if (!refreshToken) {\r\n                    atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();\r\n                    throw InteractionRequiredAuthError.createNoTokensFoundError();\r\n                }\r\n                // attach cached RT size to the current measurement\r\n                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\r\n                    success: true\r\n                });\r\n                refreshTokenRequest = __assign(__assign({}, request), { refreshToken: refreshToken.secret, authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER, ccsCredential: {\r\n                        credential: request.account.homeAccountId,\r\n                        type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                    } });\r\n                (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n                return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var acquireTokenMeasurement, queryParametersString, endpoint, requestBody, headers, thumbprint;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n                        acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                        return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _d.sent();\r\n                        headers = this.createTokenRequestHeaders(request.ccsCredential);\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)\r\n                                .then(function (result) {\r\n                                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\r\n                                    success: true\r\n                                });\r\n                                return result;\r\n                            })\r\n                                .catch(function (error) {\r\n                                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\r\n                                    success: false\r\n                                });\r\n                                throw error;\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\r\n                        correlationId = request.correlationId;\r\n                        acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        parameterBuilder.addRefreshToken(request.refreshToken);\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        reqCnfData = _d.sent();\r\n                        // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n                        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n                            if (request.sshJwk) {\r\n                                parameterBuilder.addSshJwk(request.sshJwk);\r\n                            }\r\n                            else {\r\n                                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\r\n                                    success: false\r\n                                });\r\n                                throw ClientConfigurationError.createMissingSshJwkError();\r\n                            }\r\n                        }\r\n                        _d.label = 3;\r\n                    case 3:\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n                            switch (request.ccsCredential.type) {\r\n                                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\r\n                            success: true\r\n                        });\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return RefreshTokenClient;\r\n}(BaseClient));\n\nexport { RefreshTokenClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}