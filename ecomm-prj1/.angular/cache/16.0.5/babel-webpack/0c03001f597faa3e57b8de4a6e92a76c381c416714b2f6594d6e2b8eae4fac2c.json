{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass BuyerService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5202'; // Replaced with my backend API URL\n  }\n\n  userSignUp(data) {\n    const url = `${this.apiUrl}/Register`;\n    return this.http.post(url, data).toPromise();\n  }\n  executeQuery(query) {\n    const url = `${this.apiUrl}/query`;\n    const body = {\n      query: query\n    };\n    return this.http.post(url, body).toPromise();\n  }\n  getCustomers() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Customer';\n      return yield _this.executeQuery(query);\n    })();\n  }\n  getInventory() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Inventory';\n      return yield _this2.executeQuery(query);\n    })();\n  }\n  getOrders() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM [Order]';\n      return yield _this3.executeQuery(query);\n    })();\n  }\n  getProducts() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Products';\n      return yield _this4.executeQuery(query);\n    })();\n  }\n  getJunction() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM StoreProductJunction';\n      return yield _this5.executeQuery(query);\n    })();\n  }\n  getStores() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Stores';\n      return yield _this6.executeQuery(query);\n    })();\n  }\n}\nBuyerService.ɵfac = function BuyerService_Factory(t) {\n  return new (t || BuyerService)(i0.ɵɵinject(i1.HttpClient));\n};\nBuyerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BuyerService,\n  factory: BuyerService.ɵfac,\n  providedIn: 'root'\n});\nexport { BuyerService };","map":{"version":3,"names":["BuyerService","constructor","http","apiUrl","userSignUp","data","url","post","toPromise","executeQuery","query","body","getCustomers","_this","_asyncToGenerator","getInventory","_this2","getOrders","_this3","getProducts","_this4","getJunction","_this5","getStores","_this6","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ishma\\Revature\\Ishmael-Primus-Code-\\ecomm-prj1\\src\\app\\services\\buyer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BuyerService {\n  private apiUrl = 'http://localhost:5202'; // Replaced with my backend API URL\n  constructor(private http: HttpClient) { }\n  \n  userSignUp(data: object): Promise<any> {\n    const url = `${this.apiUrl}/Register`;\n    return this.http.post(url, data).toPromise();\n  }\n\n  executeQuery(query: string): Promise<any> {\n    const url = `${this.apiUrl}/query`;\n    const body = { query: query };\n    return this.http.post(url, body).toPromise();\n  }\n\n  async getCustomers(): Promise<any> {\n    const query = 'SELECT * FROM Customer';\n    return await this.executeQuery(query);\n  }\n\n  async getInventory(): Promise<any> {\n    const query = 'SELECT * FROM Inventory';\n    return await this.executeQuery(query);\n  }\n\n  async getOrders(): Promise<any> {\n    const query = 'SELECT * FROM [Order]';\n    return await this.executeQuery(query);\n  }\n\n  async getProducts(): Promise<any> {\n    const query = 'SELECT * FROM Products';\n    return await this.executeQuery(query);\n  }\n\n  async getJunction(): Promise<any> {\n    const query = 'SELECT * FROM StoreProductJunction';\n    return await this.executeQuery(query);\n  }\n\n  async getStores(): Promise<any> {\n    const query = 'SELECT * FROM Stores';\n    return await this.executeQuery(query);\n  }\n}\n"],"mappings":";;;AAGA,MAGaA,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EACF;;EAExCC,UAAUA,CAACC,IAAY;IACrB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,WAAW;IACrC,OAAO,IAAI,CAACD,IAAI,CAACK,IAAI,CAACD,GAAG,EAAED,IAAI,CAAC,CAACG,SAAS,EAAE;EAC9C;EAEAC,YAAYA,CAACC,KAAa;IACxB,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACH,MAAM,QAAQ;IAClC,MAAMQ,IAAI,GAAG;MAAED,KAAK,EAAEA;IAAK,CAAE;IAC7B,OAAO,IAAI,CAACR,IAAI,CAACK,IAAI,CAACD,GAAG,EAAEK,IAAI,CAAC,CAACH,SAAS,EAAE;EAC9C;EAEMI,YAAYA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAChB,MAAMJ,KAAK,GAAG,wBAAwB;MACtC,aAAaG,KAAI,CAACJ,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMK,YAAYA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAF,iBAAA;MAChB,MAAMJ,KAAK,GAAG,yBAAyB;MACvC,aAAaM,MAAI,CAACP,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMO,SAASA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAJ,iBAAA;MACb,MAAMJ,KAAK,GAAG,uBAAuB;MACrC,aAAaQ,MAAI,CAACT,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMS,WAAWA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAN,iBAAA;MACf,MAAMJ,KAAK,GAAG,wBAAwB;MACtC,aAAaU,MAAI,CAACX,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMW,WAAWA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAR,iBAAA;MACf,MAAMJ,KAAK,GAAG,oCAAoC;MAClD,aAAaY,MAAI,CAACb,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMa,SAASA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAV,iBAAA;MACb,MAAMJ,KAAK,GAAG,sBAAsB;MACpC,aAAac,MAAI,CAACf,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;;AA3CWV,YAAY,C;mBAAZA,YAAY,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZ5B,YAAY,C;SAAZA,YAAY;EAAA6B,OAAA,EAAZ7B,YAAY,CAAA8B,IAAA;EAAAC,UAAA,EAFX;AAAM;SAEP/B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}