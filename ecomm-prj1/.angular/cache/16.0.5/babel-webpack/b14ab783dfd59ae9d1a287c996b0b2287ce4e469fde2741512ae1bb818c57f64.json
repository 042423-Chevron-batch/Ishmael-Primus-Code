{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { DatabaseStorage } from './DatabaseStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\nvar AsyncMemoryStorage = /** @class */function () {\n  function AsyncMemoryStorage(logger, storeName) {\n    this.inMemoryCache = new MemoryStorage();\n    this.indexedDBCache = new DatabaseStorage();\n    this.logger = logger;\n    this.storeName = storeName;\n  }\n  AsyncMemoryStorage.prototype.handleDatabaseAccessError = function (error) {\n    if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\n      this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n    } else {\n      throw error;\n    }\n  };\n  /**\r\n   * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n   * storage object if item isn't found in-memory.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.getItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var item, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            item = this.inMemoryCache.getItem(key);\n            if (!!item) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.getItem(key)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_1 = _a.sent();\n            this.handleDatabaseAccessError(e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, item];\n        }\n      });\n    });\n  };\n  /**\r\n   * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n   * storage object with the given key.\r\n   * @param key\r\n   * @param value\r\n   */\n  AsyncMemoryStorage.prototype.setItem = function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.setItem(key, value);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.indexedDBCache.setItem(key, value)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_2 = _a.sent();\n            this.handleDatabaseAccessError(e_2);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.removeItem = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.inMemoryCache.removeItem(key);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.indexedDBCache.removeItem(key)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_3 = _a.sent();\n            this.handleDatabaseAccessError(e_3);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n   * asynchronous storage object.\r\n   */\n  AsyncMemoryStorage.prototype.getKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cacheKeys, e_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cacheKeys = this.inMemoryCache.getKeys();\n            if (!(cacheKeys.length === 0)) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.getKeys()];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_4 = _a.sent();\n            this.handleDatabaseAccessError(e_4);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, cacheKeys];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns true or false if the given key is present in the cache.\r\n   * @param key\r\n   */\n  AsyncMemoryStorage.prototype.containsKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var containsKey, e_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            containsKey = this.inMemoryCache.containsKey(key);\n            if (!!containsKey) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n            return [4 /*yield*/, this.indexedDBCache.containsKey(key)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            e_5 = _a.sent();\n            this.handleDatabaseAccessError(e_5);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/, containsKey];\n        }\n      });\n    });\n  };\n  /**\r\n   * Clears in-memory Map\r\n   */\n  AsyncMemoryStorage.prototype.clearInMemory = function () {\n    // InMemory cache is a Map instance, clear is straightforward\n    this.logger.verbose(\"Deleting in-memory keystore \" + this.storeName);\n    this.inMemoryCache.clear();\n    this.logger.verbose(\"In-memory keystore \" + this.storeName + \" deleted\");\n  };\n  /**\r\n   * Tries to delete the IndexedDB database\r\n   * @returns\r\n   */\n  AsyncMemoryStorage.prototype.clearPersistent = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dbDeleted, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            this.logger.verbose(\"Deleting persistent keystore\");\n            return [4 /*yield*/, this.indexedDBCache.deleteDatabase()];\n          case 1:\n            dbDeleted = _a.sent();\n            if (dbDeleted) {\n              this.logger.verbose(\"Persistent keystore deleted\");\n            }\n            return [2 /*return*/, dbDeleted];\n          case 2:\n            e_6 = _a.sent();\n            this.handleDatabaseAccessError(e_6);\n            return [2 /*return*/, false];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return AsyncMemoryStorage;\n}();\nexport { AsyncMemoryStorage };","map":{"version":3,"names":["__awaiter","__generator","BrowserAuthError","BrowserAuthErrorMessage","DatabaseStorage","MemoryStorage","AsyncMemoryStorage","logger","storeName","inMemoryCache","indexedDBCache","prototype","handleDatabaseAccessError","error","errorCode","databaseUnavailable","code","getItem","key","item","e_1","_a","label","trys","push","verbose","sent","setItem","value","e_2","removeItem","e_3","getKeys","cacheKeys","e_4","length","containsKey","e_5","clearInMemory","clear","clearPersistent","dbDeleted","e_6","deleteDatabase"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { DatabaseStorage } from './DatabaseStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */\r\nvar AsyncMemoryStorage = /** @class */ (function () {\r\n    function AsyncMemoryStorage(logger, storeName) {\r\n        this.inMemoryCache = new MemoryStorage();\r\n        this.indexedDBCache = new DatabaseStorage();\r\n        this.logger = logger;\r\n        this.storeName = storeName;\r\n    }\r\n    AsyncMemoryStorage.prototype.handleDatabaseAccessError = function (error) {\r\n        if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {\r\n            this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\r\n        }\r\n        else {\r\n            throw error;\r\n        }\r\n    };\r\n    /**\r\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n     * storage object if item isn't found in-memory.\r\n     * @param key\r\n     */\r\n    AsyncMemoryStorage.prototype.getItem = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var item, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        item = this.inMemoryCache.getItem(key);\r\n                        if (!!item) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\r\n                        return [4 /*yield*/, this.indexedDBCache.getItem(key)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                    case 3:\r\n                        e_1 = _a.sent();\r\n                        this.handleDatabaseAccessError(e_1);\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/, item];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n     * storage object with the given key.\r\n     * @param key\r\n     * @param value\r\n     */\r\n    AsyncMemoryStorage.prototype.setItem = function (key, value) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.inMemoryCache.setItem(key, value);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.indexedDBCache.setItem(key, value)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_2 = _a.sent();\r\n                        this.handleDatabaseAccessError(e_2);\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n     * @param key\r\n     */\r\n    AsyncMemoryStorage.prototype.removeItem = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_3;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.inMemoryCache.removeItem(key);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.indexedDBCache.removeItem(key)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_3 = _a.sent();\r\n                        this.handleDatabaseAccessError(e_3);\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n     * asynchronous storage object.\r\n     */\r\n    AsyncMemoryStorage.prototype.getKeys = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cacheKeys, e_4;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cacheKeys = this.inMemoryCache.getKeys();\r\n                        if (!(cacheKeys.length === 0)) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\r\n                        return [4 /*yield*/, this.indexedDBCache.getKeys()];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                    case 3:\r\n                        e_4 = _a.sent();\r\n                        this.handleDatabaseAccessError(e_4);\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/, cacheKeys];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns true or false if the given key is present in the cache.\r\n     * @param key\r\n     */\r\n    AsyncMemoryStorage.prototype.containsKey = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var containsKey, e_5;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        containsKey = this.inMemoryCache.containsKey(key);\r\n                        if (!!containsKey) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\r\n                        return [4 /*yield*/, this.indexedDBCache.containsKey(key)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                    case 3:\r\n                        e_5 = _a.sent();\r\n                        this.handleDatabaseAccessError(e_5);\r\n                        return [3 /*break*/, 4];\r\n                    case 4: return [2 /*return*/, containsKey];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Clears in-memory Map\r\n     */\r\n    AsyncMemoryStorage.prototype.clearInMemory = function () {\r\n        // InMemory cache is a Map instance, clear is straightforward\r\n        this.logger.verbose(\"Deleting in-memory keystore \" + this.storeName);\r\n        this.inMemoryCache.clear();\r\n        this.logger.verbose(\"In-memory keystore \" + this.storeName + \" deleted\");\r\n    };\r\n    /**\r\n     * Tries to delete the IndexedDB database\r\n     * @returns\r\n     */\r\n    AsyncMemoryStorage.prototype.clearPersistent = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var dbDeleted, e_6;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        this.logger.verbose(\"Deleting persistent keystore\");\r\n                        return [4 /*yield*/, this.indexedDBCache.deleteDatabase()];\r\n                    case 1:\r\n                        dbDeleted = _a.sent();\r\n                        if (dbDeleted) {\r\n                            this.logger.verbose(\"Persistent keystore deleted\");\r\n                        }\r\n                        return [2 /*return*/, dbDeleted];\r\n                    case 2:\r\n                        e_6 = _a.sent();\r\n                        this.handleDatabaseAccessError(e_6);\r\n                        return [2 /*return*/, false];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return AsyncMemoryStorage;\r\n}());\n\nexport { AsyncMemoryStorage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}