{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as sql from 'mssql';\nimport * as i0 from \"@angular/core\";\nclass DatabaseService {\n  constructor() {\n    this.config = {\n      server: '052123-batch-server.database.windows.net',\n      database: '052123-batch',\n      user: 'batch052123',\n      password: 'Nubian19',\n      options: {\n        encrypt: true // Enable encryption for secure connection\n      }\n    };\n  }\n}\n\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)();\n};\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});\nexport { DatabaseService };\nfunction executeQuery(_x) {\n  return _executeQuery.apply(this, arguments);\n}\nfunction _executeQuery() {\n  _executeQuery = _asyncToGenerator(function* (query) {\n    try {\n      const pool = yield sql.connect(this.config);\n      const result = yield pool.request().query(query);\n      return result.recordset;\n    } catch (error) {\n      console.log('Error:', error);\n      throw error;\n    } finally {\n      sql.close();\n    }\n  });\n  return _executeQuery.apply(this, arguments);\n}\nasync;\ngetCustomers();\nPromise < any > {\n  const: query = 'SELECT * FROM Customer',\n  return: await this.executeQuery(query)\n};\nasync;\ngetInventory();\nPromise < any > {\n  const: query = 'SELECT * FROM Inventory',\n  return: await this.executeQuery(query)\n};\nasync;\ngetOrders();\nPromise < any > {\n  const: query = 'SELECT * FROM [Order]',\n  return: await this.executeQuery(query)\n};\nasync;\ngetProducts();\nPromise < any > {\n  const: query = 'SELECT * FROM Products',\n  return: await this.executeQuery(query)\n};\nasync;\ngetJunction();\nPromise < any > {\n  const: query = 'SELECT * FROM StoreProductJunction',\n  return: await this.executeQuery(query)\n};\nasync;\ngetStores();\nPromise < any > {\n  const: query = 'SELECT * FROM Stores',\n  return: await this.executeQuery(query)\n};","map":{"version":3,"names":["sql","DatabaseService","constructor","config","server","database","user","password","options","encrypt","factory","ɵfac","providedIn","executeQuery","_x","_executeQuery","apply","arguments","_asyncToGenerator","query","pool","connect","result","request","recordset","error","console","log","close","async","getCustomers","Promise","any","const","return","getInventory","getOrders","getProducts","getJunction","getStores"],"sources":["C:\\Users\\ishma\\Revature\\Ishmael-Primus-Code-\\ecomm-prj1\\src\\app\\database.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as sql from 'mssql';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseService {\n  private config: sql.config = {\n    server: '052123-batch-server.database.windows.net',\n    database: '052123-batch',\n    user: 'batch052123',\n    password: 'Nubian19',\n    options: {\n      encrypt: true // Enable encryption for secure connection\n    }\n  };\n\n\nimport * as sql from 'mssql';\n\nasync function executeQuery(query: string): Promise<any> {\n  try {\n    const pool = await sql.connect(this.config);\n    const result = await pool.request().query(query);\n    return result.recordset;\n  } catch (error) {\n    console.log('Error:', error);\n    throw error;\n  } finally {\n    sql.close();\n  }\n}\n\n\n\n  async getCustomers(): Promise<any> {\n    const query = 'SELECT * FROM Customer';\n    return await this.executeQuery(query);\n  }\n\n  async getInventory(): Promise<any> {\n    const query = 'SELECT * FROM Inventory';\n    return await this.executeQuery(query);\n  }\n\n  async getOrders(): Promise<any> {\n    const query = 'SELECT * FROM [Order]';\n    return await this.executeQuery(query);\n  }\n\n  async getProducts(): Promise<any> {\n    const query = 'SELECT * FROM Products';\n    return await this.executeQuery(query);\n  }\n\n  async getJunction(): Promise<any> {\n    const query = 'SELECT * FROM StoreProductJunction';\n    return await this.executeQuery(query);\n  }\n\n  async getStores(): Promise<any> {\n    const query = 'SELECT * FROM Stores';\n    return await this.executeQuery(query);\n  }\n}\n"],"mappings":";AACA,OAAO,KAAKA,GAAG,MAAM,OAAO;;AAE5B,MAGaC,eAAe;EAH5BC,YAAA;IAIU,KAAAC,MAAM,GAAe;MAC3BC,MAAM,EAAE,0CAA0C;MAClDC,QAAQ,EAAE,cAAc;MACxBC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,UAAU;MACpBC,OAAO,EAAE;QACPC,OAAO,EAAE,IAAI,CAAC;;KAEjB;;;;AATUR,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAS,OAAA,EAAfT,eAAe,CAAAU,IAAA;EAAAC,UAAA,EAFd;AAAM;SAEPX,eAAe;AAAA,SAcbY,YAAYA,CAAAC,EAAA;EAAA,OAAAC,aAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,cAAA;EAAAA,aAAA,GAAAG,iBAAA,CAA3B,WAA4BC,KAAa;IACvC,IAAI;MACF,MAAMC,IAAI,SAASpB,GAAG,CAACqB,OAAO,CAAC,IAAI,CAAClB,MAAM,CAAC;MAC3C,MAAMmB,MAAM,SAASF,IAAI,CAACG,OAAO,EAAE,CAACJ,KAAK,CAACA,KAAK,CAAC;MAChD,OAAOG,MAAM,CAACE,SAAS;KACxB,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;MAC5B,MAAMA,KAAK;KACZ,SAAS;MACRzB,GAAG,CAAC4B,KAAK,EAAE;;EAEf,CAAC;EAAA,OAAAb,aAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAICY,KAAK;AAACC,YAAY,EAAE;AAAEC,OAAO,GAACC,GAAG,GAAE;EACjCC,KAAK,EAACd,KAAK,GAAG,wBAAwB;EACtCe,MAAM,EAAC,MAAM,IAAI,CAACrB,YAAY,CAACM,KAAK;CACrC;AAEDU,KAAK;AAACM,YAAY,EAAE;AAAEJ,OAAO,GAACC,GAAG,GAAE;EACjCC,KAAK,EAACd,KAAK,GAAG,yBAAyB;EACvCe,MAAM,EAAC,MAAM,IAAI,CAACrB,YAAY,CAACM,KAAK;CACrC;AAEDU,KAAK;AAACO,SAAS,EAAE;AAAEL,OAAO,GAACC,GAAG,GAAE;EAC9BC,KAAK,EAACd,KAAK,GAAG,uBAAuB;EACrCe,MAAM,EAAC,MAAM,IAAI,CAACrB,YAAY,CAACM,KAAK;CACrC;AAEDU,KAAK;AAACQ,WAAW,EAAE;AAAEN,OAAO,GAACC,GAAG,GAAE;EAChCC,KAAK,EAACd,KAAK,GAAG,wBAAwB;EACtCe,MAAM,EAAC,MAAM,IAAI,CAACrB,YAAY,CAACM,KAAK;CACrC;AAEDU,KAAK;AAACS,WAAW,EAAE;AAAEP,OAAO,GAACC,GAAG,GAAE;EAChCC,KAAK,EAACd,KAAK,GAAG,oCAAoC;EAClDe,MAAM,EAAC,MAAM,IAAI,CAACrB,YAAY,CAACM,KAAK;CACrC;AAEDU,KAAK;AAACU,SAAS,EAAE;AAAER,OAAO,GAACC,GAAG,GAAE;EAC9BC,KAAK,EAACd,KAAK,GAAG,sBAAsB;EACpCe,MAAM,EAAC,MAAM,IAAI,CAACrB,YAAY,CAACM,KAAK;CACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}