{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy\";\nimport { retryPolicy } from \"./retryPolicy\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nexport const systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nexport function systemErrorRetryPolicy(options = {}) {\n  var _a;\n  return {\n    name: systemErrorRetryPolicyName,\n    sendRequest: retryPolicy([exponentialRetryStrategy(Object.assign(Object.assign({}, options), {\n      ignoreHttpStatusCodes: true\n    }))], {\n      maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT\n    }).sendRequest\n  };\n}","map":{"version":3,"names":["exponentialRetryStrategy","retryPolicy","DEFAULT_RETRY_POLICY_COUNT","systemErrorRetryPolicyName","systemErrorRetryPolicy","options","_a","name","sendRequest","Object","assign","ignoreHttpStatusCodes","maxRetries"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/systemErrorRetryPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy\";\nimport { retryPolicy } from \"./retryPolicy\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants\";\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nexport const systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nexport function systemErrorRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: systemErrorRetryPolicyName,\n        sendRequest: retryPolicy([\n            exponentialRetryStrategy(Object.assign(Object.assign({}, options), { ignoreHttpStatusCodes: true })),\n        ], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,wBAAwB,QAAQ,6CAA6C;AACtF,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,0BAA0B,QAAQ,cAAc;AACzD;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,GAAG,wBAAwB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACjD,IAAIC,EAAE;EACN,OAAO;IACHC,IAAI,EAAEJ,0BAA0B;IAChCK,WAAW,EAAEP,WAAW,CAAC,CACrBD,wBAAwB,CAACS,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,OAAO,CAAC,EAAE;MAAEM,qBAAqB,EAAE;IAAK,CAAC,CAAC,CAAC,CACvG,EAAE;MACCC,UAAU,EAAE,CAACN,EAAE,GAAGD,OAAO,CAACO,UAAU,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGJ;IAC3E,CAAC,CAAC,CAACM;EACP,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}