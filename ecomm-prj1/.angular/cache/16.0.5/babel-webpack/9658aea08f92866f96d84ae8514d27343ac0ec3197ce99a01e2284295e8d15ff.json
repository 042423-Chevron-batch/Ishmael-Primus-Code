{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SQLServerStatementColumnEncryptionSetting = exports.SQLServerEncryptionType = exports.DescribeParameterEncryptionResultSet2 = exports.DescribeParameterEncryptionResultSet1 = void 0;\n// This code is based on the `mssql-jdbc` library published under the conditions of MIT license.\n// Copyright (c) 2019 Microsoft Corporation\nlet SQLServerEncryptionType;\nexports.SQLServerEncryptionType = SQLServerEncryptionType;\n(function (SQLServerEncryptionType) {\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Deterministic\"] = 1] = \"Deterministic\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Randomized\"] = 2] = \"Randomized\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"PlainText\"] = 0] = \"PlainText\";\n})(SQLServerEncryptionType || (exports.SQLServerEncryptionType = SQLServerEncryptionType = {}));\n\n// Fields in the first resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\nlet DescribeParameterEncryptionResultSet1; // Fields in the second resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\n\nexports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1;\n(function (DescribeParameterEncryptionResultSet1) {\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyOrdinal\"] = 0] = \"KeyOrdinal\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"DbId\"] = 1] = \"DbId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyId\"] = 2] = \"KeyId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyVersion\"] = 3] = \"KeyVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyMdVersion\"] = 4] = \"KeyMdVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"EncryptedKey\"] = 5] = \"EncryptedKey\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"ProviderName\"] = 6] = \"ProviderName\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyPath\"] = 7] = \"KeyPath\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyEncryptionAlgorithm\"] = 8] = \"KeyEncryptionAlgorithm\";\n})(DescribeParameterEncryptionResultSet1 || (exports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1 = {}));\nlet DescribeParameterEncryptionResultSet2;\nexports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2;\n(function (DescribeParameterEncryptionResultSet2) {\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterOrdinal\"] = 0] = \"ParameterOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterName\"] = 1] = \"ParameterName\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionAlgorithm\"] = 2] = \"ColumnEncryptionAlgorithm\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncrytionType\"] = 3] = \"ColumnEncrytionType\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionKeyOrdinal\"] = 4] = \"ColumnEncryptionKeyOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"NormalizationRuleVersion\"] = 5] = \"NormalizationRuleVersion\";\n})(DescribeParameterEncryptionResultSet2 || (exports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2 = {}));\nlet SQLServerStatementColumnEncryptionSetting;\nexports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting;\n(function (SQLServerStatementColumnEncryptionSetting) {\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"UseConnectionSetting\"] = 0] = \"UseConnectionSetting\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Enabled\"] = 1] = \"Enabled\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"ResultSetOnly\"] = 2] = \"ResultSetOnly\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Disabled\"] = 3] = \"Disabled\";\n})(SQLServerStatementColumnEncryptionSetting || (exports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","SQLServerStatementColumnEncryptionSetting","SQLServerEncryptionType","DescribeParameterEncryptionResultSet2","DescribeParameterEncryptionResultSet1"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/always-encrypted/types.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SQLServerStatementColumnEncryptionSetting = exports.SQLServerEncryptionType = exports.DescribeParameterEncryptionResultSet2 = exports.DescribeParameterEncryptionResultSet1 = void 0;\n// This code is based on the `mssql-jdbc` library published under the conditions of MIT license.\n// Copyright (c) 2019 Microsoft Corporation\nlet SQLServerEncryptionType;\nexports.SQLServerEncryptionType = SQLServerEncryptionType;\n\n(function (SQLServerEncryptionType) {\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Deterministic\"] = 1] = \"Deterministic\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"Randomized\"] = 2] = \"Randomized\";\n  SQLServerEncryptionType[SQLServerEncryptionType[\"PlainText\"] = 0] = \"PlainText\";\n})(SQLServerEncryptionType || (exports.SQLServerEncryptionType = SQLServerEncryptionType = {}));\n\n// Fields in the first resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\nlet DescribeParameterEncryptionResultSet1; // Fields in the second resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\n\nexports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1;\n\n(function (DescribeParameterEncryptionResultSet1) {\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyOrdinal\"] = 0] = \"KeyOrdinal\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"DbId\"] = 1] = \"DbId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyId\"] = 2] = \"KeyId\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyVersion\"] = 3] = \"KeyVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyMdVersion\"] = 4] = \"KeyMdVersion\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"EncryptedKey\"] = 5] = \"EncryptedKey\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"ProviderName\"] = 6] = \"ProviderName\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyPath\"] = 7] = \"KeyPath\";\n  DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1[\"KeyEncryptionAlgorithm\"] = 8] = \"KeyEncryptionAlgorithm\";\n})(DescribeParameterEncryptionResultSet1 || (exports.DescribeParameterEncryptionResultSet1 = DescribeParameterEncryptionResultSet1 = {}));\n\nlet DescribeParameterEncryptionResultSet2;\nexports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2;\n\n(function (DescribeParameterEncryptionResultSet2) {\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterOrdinal\"] = 0] = \"ParameterOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ParameterName\"] = 1] = \"ParameterName\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionAlgorithm\"] = 2] = \"ColumnEncryptionAlgorithm\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncrytionType\"] = 3] = \"ColumnEncrytionType\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"ColumnEncryptionKeyOrdinal\"] = 4] = \"ColumnEncryptionKeyOrdinal\";\n  DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2[\"NormalizationRuleVersion\"] = 5] = \"NormalizationRuleVersion\";\n})(DescribeParameterEncryptionResultSet2 || (exports.DescribeParameterEncryptionResultSet2 = DescribeParameterEncryptionResultSet2 = {}));\n\nlet SQLServerStatementColumnEncryptionSetting;\nexports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting;\n\n(function (SQLServerStatementColumnEncryptionSetting) {\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"UseConnectionSetting\"] = 0] = \"UseConnectionSetting\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Enabled\"] = 1] = \"Enabled\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"ResultSetOnly\"] = 2] = \"ResultSetOnly\";\n  SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting[\"Disabled\"] = 3] = \"Disabled\";\n})(SQLServerStatementColumnEncryptionSetting || (exports.SQLServerStatementColumnEncryptionSetting = SQLServerStatementColumnEncryptionSetting = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}