{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\nvar AuthenticationHeaderParser = /** @class */function () {\n  function AuthenticationHeaderParser(headers) {\n    this.headers = headers;\n  }\n  /**\r\n   * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.getShrNonce = function () {\n    // Attempt to parse nonce from Authentiacation-Info\n    var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\n    if (authenticationInfo) {\n      var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\n      if (authenticationInfoChallenges.nextnonce) {\n        return authenticationInfoChallenges.nextnonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\n    }\n    // Attempt to parse nonce from WWW-Authenticate\n    var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\n    if (wwwAuthenticate) {\n      var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\n      if (wwwAuthenticateChallenges.nonce) {\n        return wwwAuthenticateChallenges.nonce;\n      }\n      throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\n    }\n    // If neither header is present, throw missing headers error\n    throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\n  };\n  /**\r\n   * Parses an HTTP header's challenge set into a key/value map.\r\n   * @param header\r\n   * @returns\r\n   */\n  AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\n    var schemeSeparator = header.indexOf(\" \");\n    var challenges = header.substr(schemeSeparator + 1).split(\",\");\n    var challengeMap = {};\n    challenges.forEach(function (challenge) {\n      var _a = challenge.split(\"=\"),\n        key = _a[0],\n        value = _a[1];\n      // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\n      challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\n    });\n    return challengeMap;\n  };\n  return AuthenticationHeaderParser;\n}();\nexport { AuthenticationHeaderParser };","map":{"version":3,"names":["ClientConfigurationError","HeaderNames","Constants","AuthenticationHeaderParser","headers","prototype","getShrNonce","authenticationInfo","AuthenticationInfo","authenticationInfoChallenges","parseChallenges","nextnonce","createInvalidAuthenticationHeaderError","wwwAuthenticate","WWWAuthenticate","wwwAuthenticateChallenges","nonce","createMissingNonceAuthenticationHeadersError","header","schemeSeparator","indexOf","challenges","substr","split","challengeMap","forEach","challenge","_a","key","value","unescape","replace","EMPTY_STRING"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/request/AuthenticationHeaderParser.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This is a helper class that parses supported HTTP response authentication headers to extract and return\r\n * header challenge values that can be used outside the basic authorization flows.\r\n */\r\nvar AuthenticationHeaderParser = /** @class */ (function () {\r\n    function AuthenticationHeaderParser(headers) {\r\n        this.headers = headers;\r\n    }\r\n    /**\r\n     * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.\r\n     * @returns\r\n     */\r\n    AuthenticationHeaderParser.prototype.getShrNonce = function () {\r\n        // Attempt to parse nonce from Authentiacation-Info\r\n        var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];\r\n        if (authenticationInfo) {\r\n            var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);\r\n            if (authenticationInfoChallenges.nextnonce) {\r\n                return authenticationInfoChallenges.nextnonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, \"nextnonce challenge is missing.\");\r\n        }\r\n        // Attempt to parse nonce from WWW-Authenticate\r\n        var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];\r\n        if (wwwAuthenticate) {\r\n            var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);\r\n            if (wwwAuthenticateChallenges.nonce) {\r\n                return wwwAuthenticateChallenges.nonce;\r\n            }\r\n            throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, \"nonce challenge is missing.\");\r\n        }\r\n        // If neither header is present, throw missing headers error\r\n        throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();\r\n    };\r\n    /**\r\n     * Parses an HTTP header's challenge set into a key/value map.\r\n     * @param header\r\n     * @returns\r\n     */\r\n    AuthenticationHeaderParser.prototype.parseChallenges = function (header) {\r\n        var schemeSeparator = header.indexOf(\" \");\r\n        var challenges = header.substr(schemeSeparator + 1).split(\",\");\r\n        var challengeMap = {};\r\n        challenges.forEach(function (challenge) {\r\n            var _a = challenge.split(\"=\"), key = _a[0], value = _a[1];\r\n            // Remove escaped quotation marks (', \") from challenge string to keep only the challenge value\r\n            challengeMap[key] = unescape(value.replace(/['\"]+/g, Constants.EMPTY_STRING));\r\n        });\r\n        return challengeMap;\r\n    };\r\n    return AuthenticationHeaderParser;\r\n}());\n\nexport { AuthenticationHeaderParser };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,wBAAwB,QAAQ,sCAAsC;AAC/E,SAASC,WAAW,EAAEC,SAAS,QAAQ,uBAAuB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,0BAA0B,GAAG,aAAe,YAAY;EACxD,SAASA,0BAA0BA,CAACC,OAAO,EAAE;IACzC,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;EACID,0BAA0B,CAACE,SAAS,CAACC,WAAW,GAAG,YAAY;IAC3D;IACA,IAAIC,kBAAkB,GAAG,IAAI,CAACH,OAAO,CAACH,WAAW,CAACO,kBAAkB,CAAC;IACrE,IAAID,kBAAkB,EAAE;MACpB,IAAIE,4BAA4B,GAAG,IAAI,CAACC,eAAe,CAACH,kBAAkB,CAAC;MAC3E,IAAIE,4BAA4B,CAACE,SAAS,EAAE;QACxC,OAAOF,4BAA4B,CAACE,SAAS;MACjD;MACA,MAAMX,wBAAwB,CAACY,sCAAsC,CAACX,WAAW,CAACO,kBAAkB,EAAE,iCAAiC,CAAC;IAC5I;IACA;IACA,IAAIK,eAAe,GAAG,IAAI,CAACT,OAAO,CAACH,WAAW,CAACa,eAAe,CAAC;IAC/D,IAAID,eAAe,EAAE;MACjB,IAAIE,yBAAyB,GAAG,IAAI,CAACL,eAAe,CAACG,eAAe,CAAC;MACrE,IAAIE,yBAAyB,CAACC,KAAK,EAAE;QACjC,OAAOD,yBAAyB,CAACC,KAAK;MAC1C;MACA,MAAMhB,wBAAwB,CAACY,sCAAsC,CAACX,WAAW,CAACa,eAAe,EAAE,6BAA6B,CAAC;IACrI;IACA;IACA,MAAMd,wBAAwB,CAACiB,4CAA4C,EAAE;EACjF,CAAC;EACD;AACJ;AACA;AACA;AACA;EACId,0BAA0B,CAACE,SAAS,CAACK,eAAe,GAAG,UAAUQ,MAAM,EAAE;IACrE,IAAIC,eAAe,GAAGD,MAAM,CAACE,OAAO,CAAC,GAAG,CAAC;IACzC,IAAIC,UAAU,GAAGH,MAAM,CAACI,MAAM,CAACH,eAAe,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IAC9D,IAAIC,YAAY,GAAG,CAAC,CAAC;IACrBH,UAAU,CAACI,OAAO,CAAC,UAAUC,SAAS,EAAE;MACpC,IAAIC,EAAE,GAAGD,SAAS,CAACH,KAAK,CAAC,GAAG,CAAC;QAAEK,GAAG,GAAGD,EAAE,CAAC,CAAC,CAAC;QAAEE,KAAK,GAAGF,EAAE,CAAC,CAAC,CAAC;MACzD;MACAH,YAAY,CAACI,GAAG,CAAC,GAAGE,QAAQ,CAACD,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAE7B,SAAS,CAAC8B,YAAY,CAAC,CAAC;IACjF,CAAC,CAAC;IACF,OAAOR,YAAY;EACvB,CAAC;EACD,OAAOrB,0BAA0B;AACrC,CAAC,EAAG;AAEJ,SAASA,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}