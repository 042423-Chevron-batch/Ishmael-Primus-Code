{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _events = require(\"events\");\nvar _errors = require(\"./errors\");\nvar _types = require(\"./always-encrypted/types\");\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n\n  constructor(sqlTextOrProcedure, callback, options) {\n    super();\n    this.sqlTextOrProcedure = void 0;\n    this.parameters = void 0;\n    this.parametersByName = void 0;\n    this.preparing = void 0;\n    this.canceled = void 0;\n    this.paused = void 0;\n    this.userCallback = void 0;\n    this.handle = void 0;\n    this.error = void 0;\n    this.connection = void 0;\n    this.timeout = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.callback = void 0;\n    this.shouldHonorAE = void 0;\n    this.statementColumnEncryptionSetting = void 0;\n    this.cryptoMetadataLoaded = void 0;\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n\n  addParameter(name, type, value, options) {\n    const {\n      output = false,\n      length,\n      precision,\n      scale\n    } = options ?? {};\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n\n  addOutputParameter(name, type, value, options) {\n    this.addParameter(name, type, value, {\n      ...options,\n      output: true\n    });\n  }\n  /**\n   * @private\n   */\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n    return paramsParameter;\n  }\n  /**\n   * @private\n   */\n\n  validateParameters(collation) {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n      try {\n        parameter.value = parameter.type.validate(parameter.value, collation);\n      } catch (error) {\n        throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n    this.emit('pause');\n    this.paused = true;\n  }\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n    this.canceled = true;\n    this.emit('cancel');\n  }\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n}\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_events","require","_errors","_types","Request","EventEmitter","on","event","listener","emit","args","constructor","sqlTextOrProcedure","callback","options","parameters","parametersByName","preparing","canceled","paused","userCallback","handle","error","connection","timeout","rows","rst","rowCount","shouldHonorAE","statementColumnEncryptionSetting","cryptoMetadataLoaded","undefined","SQLServerStatementColumnEncryptionSetting","UseConnectionSetting","err","addParameter","name","type","output","length","precision","scale","parameter","push","addOutputParameter","makeParamsParameter","paramsParameter","i","len","declaration","validateParameters","collation","validate","RequestError","message","pause","resume","cancel","setTimeout","_default","module"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/request.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _errors = require(\"./errors\");\n\nvar _types = require(\"./always-encrypted/types\");\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n\n\n  constructor(sqlTextOrProcedure, callback, options) {\n    super();\n    this.sqlTextOrProcedure = void 0;\n    this.parameters = void 0;\n    this.parametersByName = void 0;\n    this.preparing = void 0;\n    this.canceled = void 0;\n    this.paused = void 0;\n    this.userCallback = void 0;\n    this.handle = void 0;\n    this.error = void 0;\n    this.connection = void 0;\n    this.timeout = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.callback = void 0;\n    this.shouldHonorAE = void 0;\n    this.statementColumnEncryptionSetting = void 0;\n    this.cryptoMetadataLoaded = void 0;\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n\n\n  addParameter(name, type, value, options) {\n    const {\n      output = false,\n      length,\n      precision,\n      scale\n    } = options ?? {};\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n\n\n  addOutputParameter(name, type, value, options) {\n    this.addParameter(name, type, value, { ...options,\n      output: true\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n\n    return paramsParameter;\n  }\n  /**\n   * @private\n   */\n\n\n  validateParameters(collation) {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n\n      try {\n        parameter.value = parameter.type.validate(parameter.value, collation);\n      } catch (error) {\n        throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    this.emit('pause');\n    this.paused = true;\n  }\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n\n}\n\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,OAAO,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE/B,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AAEjC,IAAIE,MAAM,GAAGF,OAAO,CAAC,0BAA0B,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,OAAO,SAASJ,OAAO,CAACK,YAAY,CAAC;EACzC;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE;AACF;AACA;EACEC,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAClB,OAAO,KAAK,CAACF,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;EAClC;EACA;AACF;AACA;;EAGEC,IAAIA,CAACF,KAAK,EAAE,GAAGG,IAAI,EAAE;IACnB,OAAO,KAAK,CAACD,IAAI,CAACF,KAAK,EAAE,GAAGG,IAAI,CAAC;EACnC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEC,WAAWA,CAACC,kBAAkB,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACjD,KAAK,EAAE;IACP,IAAI,CAACF,kBAAkB,GAAG,KAAK,CAAC;IAChC,IAAI,CAACG,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,gBAAgB,GAAG,KAAK,CAAC;IAC9B,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACC,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,IAAI,GAAG,KAAK,CAAC;IAClB,IAAI,CAACC,GAAG,GAAG,KAAK,CAAC;IACjB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAACd,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAACe,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAACC,gCAAgC,GAAG,KAAK,CAAC;IAC9C,IAAI,CAACC,oBAAoB,GAAG,KAAK,CAAC;IAClC,IAAI,CAAClB,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACG,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACI,MAAM,GAAGU,SAAS;IACvB,IAAI,CAACb,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACG,KAAK,GAAGS,SAAS;IACtB,IAAI,CAACR,UAAU,GAAGQ,SAAS;IAC3B,IAAI,CAACP,OAAO,GAAGO,SAAS;IACxB,IAAI,CAACX,YAAY,GAAGP,QAAQ;IAC5B,IAAI,CAACgB,gCAAgC,GAAGf,OAAO,IAAIA,OAAO,CAACe,gCAAgC,IAAI1B,MAAM,CAAC6B,yCAAyC,CAACC,oBAAoB;IACpK,IAAI,CAACH,oBAAoB,GAAG,KAAK;IAEjC,IAAI,CAACjB,QAAQ,GAAG,UAAUqB,GAAG,EAAEP,QAAQ,EAAEF,IAAI,EAAE;MAC7C,IAAI,IAAI,CAACR,SAAS,EAAE;QAClB,IAAI,CAACA,SAAS,GAAG,KAAK;QAEtB,IAAIiB,GAAG,EAAE;UACP,IAAI,CAACzB,IAAI,CAAC,OAAO,EAAEyB,GAAG,CAAC;QACzB,CAAC,MAAM;UACL,IAAI,CAACzB,IAAI,CAAC,UAAU,CAAC;QACvB;MACF,CAAC,MAAM;QACL,IAAI,CAACW,YAAY,CAACc,GAAG,EAAEP,QAAQ,EAAEF,IAAI,CAAC;QACtC,IAAI,CAAChB,IAAI,CAAC,kBAAkB,CAAC;MAC/B;IACF,CAAC;EACH;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;;EAGA0B,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAEvC,KAAK,EAAEgB,OAAO,EAAE;IACvC,MAAM;MACJwB,MAAM,GAAG,KAAK;MACdC,MAAM;MACNC,SAAS;MACTC;IACF,CAAC,GAAG3B,OAAO,IAAI,CAAC,CAAC;IACjB,MAAM4B,SAAS,GAAG;MAChBL,IAAI,EAAEA,IAAI;MACVD,IAAI,EAAEA,IAAI;MACVtC,KAAK,EAAEA,KAAK;MACZwC,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM;MACdC,SAAS,EAAEA,SAAS;MACpBC,KAAK,EAAEA;IACT,CAAC;IACD,IAAI,CAAC1B,UAAU,CAAC4B,IAAI,CAACD,SAAS,CAAC;IAC/B,IAAI,CAAC1B,gBAAgB,CAACoB,IAAI,CAAC,GAAGM,SAAS;EACzC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEE,kBAAkBA,CAACR,IAAI,EAAEC,IAAI,EAAEvC,KAAK,EAAEgB,OAAO,EAAE;IAC7C,IAAI,CAACqB,YAAY,CAACC,IAAI,EAAEC,IAAI,EAAEvC,KAAK,EAAE;MAAE,GAAGgB,OAAO;MAC/CwB,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAGEO,mBAAmBA,CAAC9B,UAAU,EAAE;IAC9B,IAAI+B,eAAe,GAAG,EAAE;IAExB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGjC,UAAU,CAACwB,MAAM,EAAEQ,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACrD,MAAML,SAAS,GAAG3B,UAAU,CAACgC,CAAC,CAAC;MAE/B,IAAID,eAAe,CAACP,MAAM,GAAG,CAAC,EAAE;QAC9BO,eAAe,IAAI,IAAI;MACzB;MAEAA,eAAe,IAAI,GAAG,GAAGJ,SAAS,CAACN,IAAI,GAAG,GAAG;MAC7CU,eAAe,IAAIJ,SAAS,CAACL,IAAI,CAACY,WAAW,CAACP,SAAS,CAAC;MAExD,IAAIA,SAAS,CAACJ,MAAM,EAAE;QACpBQ,eAAe,IAAI,SAAS;MAC9B;IACF;IAEA,OAAOA,eAAe;EACxB;EACA;AACF;AACA;;EAGEI,kBAAkBA,CAACC,SAAS,EAAE;IAC5B,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAG,IAAI,CAACjC,UAAU,CAACwB,MAAM,EAAEQ,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC1D,MAAML,SAAS,GAAG,IAAI,CAAC3B,UAAU,CAACgC,CAAC,CAAC;MAEpC,IAAI;QACFL,SAAS,CAAC5C,KAAK,GAAG4C,SAAS,CAACL,IAAI,CAACe,QAAQ,CAACV,SAAS,CAAC5C,KAAK,EAAEqD,SAAS,CAAC;MACvE,CAAC,CAAC,OAAO7B,KAAK,EAAE;QACd,MAAM,IAAIpB,OAAO,CAACmD,YAAY,CAAC,oCAAoC,GAAGX,SAAS,CAACN,IAAI,GAAG,MAAM,GAAGd,KAAK,CAACgC,OAAO,EAAE,QAAQ,CAAC;MAC1H;IACF;EACF;EACA;AACF;AACA;AACA;;EAGEC,KAAKA,CAAA,EAAG;IACN,IAAI,IAAI,CAACpC,MAAM,EAAE;MACf;IACF;IAEA,IAAI,CAACV,IAAI,CAAC,OAAO,CAAC;IAClB,IAAI,CAACU,MAAM,GAAG,IAAI;EACpB;EACA;AACF;AACA;AACA;;EAGEqC,MAAMA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAACrC,MAAM,EAAE;MAChB;IACF;IAEA,IAAI,CAACA,MAAM,GAAG,KAAK;IACnB,IAAI,CAACV,IAAI,CAAC,QAAQ,CAAC;EACrB;EACA;AACF;AACA;;EAGEgD,MAAMA,CAAA,EAAG;IACP,IAAI,IAAI,CAACvC,QAAQ,EAAE;MACjB;IACF;IAEA,IAAI,CAACA,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACT,IAAI,CAAC,QAAQ,CAAC;EACrB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEiD,UAAUA,CAAClC,OAAO,EAAE;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;AAEF;AAEA,IAAImC,QAAQ,GAAGvD,OAAO;AACtBP,OAAO,CAACE,OAAO,GAAG4D,QAAQ;AAC1BC,MAAM,CAAC/D,OAAO,GAAGO,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}