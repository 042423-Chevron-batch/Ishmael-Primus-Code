{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\nvar CryptoOps = /** @class */function () {\n  function CryptoOps(logger, performanceClient, cryptoConfig) {\n    this.logger = logger;\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n          case 1:\n            keyPair = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n            return [4 /*yield*/, this.hashString(publicJwkString)];\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n          case 5:\n            unextractablePrivateKey = _b.sent();\n            // Store Keypair data in keystore\n            return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];\n          case 2:\n            keyFound = _a.sent();\n            return [2 /*return*/, !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.clear()];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];\n          case 1:\n            cachedKeyPair = _b.sent();\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n            return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n            // Generate payload\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n            return [2 /*return*/, signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\nexport { CryptoOps };","map":{"version":3,"names":["__awaiter","__generator","PerformanceEvents","JoseHeader","GuidGenerator","Base64Encode","Base64Decode","PkceGenerator","BrowserCrypto","BrowserStringUtils","BrowserAuthError","CryptoKeyStore","CryptoOps","logger","performanceClient","cryptoConfig","browserCrypto","b64Encode","b64Decode","guidGenerator","pkceGenerator","cache","prototype","createNewGuid","generateGuid","base64Encode","input","encode","base64Decode","decode","generatePkceCodes","_a","generateCodes","getPublicKeyThumbprint","request","publicKeyThumbMeasurement","keyPair","publicKeyJwk","pubKeyThumprintObj","publicJwkString","publicJwkHash","privateKeyJwk","unextractablePrivateKey","_b","label","startMeasurement","CryptoOptsGetPublicKeyThumbprint","correlationId","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","sent","exportJwk","publicKey","e","kty","n","getSortedObjectString","hashString","privateKey","importJwk","asymmetricKeys","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","endMeasurement","success","removeTokenBindingKey","kid","keyFound","removeItem","containsKey","clearKeystore","clear","signJwt","payload","signJwtMeasurement","cachedKeyPair","publicKeyJwkString","encodedKeyIdThumbprint","shrHeader","encodedShrHeader","encodedPayload","tokenString","tokenBuffer","signatureBuffer","encodedSignature","signedJwt","CryptoOptsSignJwt","getItem","createSigningKeyNotFoundInStorageError","urlEncode","JSON","stringify","getShrHeaderString","alg","cnf","jwk","parse","stringToArrayBuffer","sign","urlEncodeArr","Uint8Array","plainText","hashBuffer","hashBytes","sha256Digest"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/crypto/CryptoOps.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nvar CryptoOps = /** @class */ (function () {\r\n    function CryptoOps(logger, performanceClient, cryptoConfig) {\r\n        this.logger = logger;\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n        this.cache = new CryptoKeyStore(this.logger);\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    CryptoOps.prototype.createNewGuid = function () {\r\n        return this.guidGenerator.generateGuid();\r\n    };\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input\r\n     */\r\n    CryptoOps.prototype.base64Encode = function (input) {\r\n        return this.b64Encode.encode(input);\r\n    };\r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input\r\n     */\r\n    CryptoOps.prototype.base64Decode = function (input) {\r\n        return this.b64Decode.decode(input);\r\n    };\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    CryptoOps.prototype.generatePkceCodes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.pkceGenerator.generateCodes()];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */\r\n    CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\r\n                        return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\r\n                    case 1:\r\n                        keyPair = _b.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\r\n                    case 2:\r\n                        publicKeyJwk = _b.sent();\r\n                        pubKeyThumprintObj = {\r\n                            e: publicKeyJwk.e,\r\n                            kty: publicKeyJwk.kty,\r\n                            n: publicKeyJwk.n\r\n                        };\r\n                        publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\r\n                        return [4 /*yield*/, this.hashString(publicJwkString)];\r\n                    case 3:\r\n                        publicJwkHash = _b.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\r\n                    case 4:\r\n                        privateKeyJwk = _b.sent();\r\n                        return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\r\n                    case 5:\r\n                        unextractablePrivateKey = _b.sent();\r\n                        // Store Keypair data in keystore\r\n                        return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {\r\n                                privateKey: unextractablePrivateKey,\r\n                                publicKey: keyPair.publicKey,\r\n                                requestMethod: request.resourceRequestMethod,\r\n                                requestUri: request.resourceRequestUri\r\n                            })];\r\n                    case 6:\r\n                        // Store Keypair data in keystore\r\n                        _b.sent();\r\n                        if (publicKeyThumbMeasurement) {\r\n                            publicKeyThumbMeasurement.endMeasurement({\r\n                                success: true\r\n                            });\r\n                        }\r\n                        return [2 /*return*/, publicJwkHash];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid\r\n     */\r\n    CryptoOps.prototype.removeTokenBindingKey = function (kid) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var keyFound;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];\r\n                    case 2:\r\n                        keyFound = _a.sent();\r\n                        return [2 /*return*/, !keyFound];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes all cryptographic keys from IndexedDB storage\r\n     */\r\n    CryptoOps.prototype.clearKeystore = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.cache.clear()];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload\r\n     * @param kid\r\n     */\r\n    CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\r\n                        return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];\r\n                    case 1:\r\n                        cachedKeyPair = _b.sent();\r\n                        if (!cachedKeyPair) {\r\n                            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\r\n                        }\r\n                        return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\r\n                    case 2:\r\n                        publicKeyJwk = _b.sent();\r\n                        publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\r\n                        encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));\r\n                        shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });\r\n                        encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\r\n                        // Generate payload\r\n                        payload.cnf = {\r\n                            jwk: JSON.parse(publicKeyJwkString)\r\n                        };\r\n                        encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\r\n                        tokenString = encodedShrHeader + \".\" + encodedPayload;\r\n                        tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\r\n                        return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\r\n                    case 3:\r\n                        signatureBuffer = _b.sent();\r\n                        encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\r\n                        signedJwt = tokenString + \".\" + encodedSignature;\r\n                        if (signJwtMeasurement) {\r\n                            signJwtMeasurement.endMeasurement({\r\n                                success: true\r\n                            });\r\n                        }\r\n                        return [2 /*return*/, signedJwt];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     * @param plainText\r\n     */\r\n    CryptoOps.prototype.hashString = function (plainText) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var hashBuffer, hashBytes;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];\r\n                    case 1:\r\n                        hashBuffer = _a.sent();\r\n                        hashBytes = new Uint8Array(hashBuffer);\r\n                        return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\r\n    CryptoOps.EXTRACTABLE = true;\r\n    return CryptoOps;\r\n}());\n\nexport { CryptoOps };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}