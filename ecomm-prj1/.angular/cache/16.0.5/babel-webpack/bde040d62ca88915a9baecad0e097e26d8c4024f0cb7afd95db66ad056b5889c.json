{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n */\nvar AccountEntity = /** @class */function () {\n  function AccountEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  AccountEntity.prototype.generateAccountId = function () {\n    var accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n  AccountEntity.prototype.generateAccountKey = function () {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  };\n  /**\r\n   * returns the type of the cache (in this case account)\r\n   */\n  AccountEntity.prototype.generateType = function () {\n    switch (this.authorityType) {\n      case CacheAccountType.ADFS_ACCOUNT_TYPE:\n        return CacheType.ADFS;\n      case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n        return CacheType.MSA;\n      case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n        return CacheType.MSSTS;\n      case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n        return CacheType.GENERIC;\n      default:\n        {\n          throw ClientAuthError.createUnexpectedAccountTypeError();\n        }\n    }\n  };\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n  AccountEntity.prototype.getAccountInfo = function () {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims,\n      nativeAccountId: this.nativeAccountId\n    };\n  };\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n  AccountEntity.generateAccountCacheKey = function (accountInterface) {\n    var accountKey = [accountInterface.homeAccountId, accountInterface.environment || Constants.EMPTY_STRING, accountInterface.tenantId || Constants.EMPTY_STRING];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param clientInfo\r\n   * @param authority\r\n   * @param idToken\r\n   * @param policy\r\n   */\n  AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment, nativeAccountId) {\n    var _a, _b, _c, _d, _e, _f;\n    var account = new AccountEntity();\n    account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    account.clientInfo = clientInfo;\n    account.homeAccountId = homeAccountId;\n    account.nativeAccountId = nativeAccountId;\n    var env = environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    account.environment = env;\n    // non AAD scenarios can have empty realm\n    account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || Constants.EMPTY_STRING;\n    if (idToken) {\n      account.idTokenClaims = idToken.claims;\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || Constants.EMPTY_STRING;\n      /*\r\n       * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n       * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n       * policy is configured to return more than 1 email.\r\n       */\n      var preferredUsername = (_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username;\n      var email = ((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : null;\n      account.username = preferredUsername || email || Constants.EMPTY_STRING;\n      account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\n    }\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  };\n  /**\r\n   * Builds non-AAD/ADFS account.\r\n   * @param authority\r\n   * @param idToken\r\n   */\n  AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment) {\n    var _a, _b, _c, _d;\n    var account = new AccountEntity();\n    account.authorityType = authority && authority.authorityType === AuthorityType.Adfs ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = homeAccountId;\n    // non AAD scenarios can have empty realm\n    account.realm = Constants.EMPTY_STRING;\n    var env = environment || authority && authority.getPreferredCache();\n    if (!env) {\n      throw ClientAuthError.createInvalidCacheEnvironmentError();\n    }\n    if (idToken) {\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || Constants.EMPTY_STRING;\n      // upn claim for most ADFS scenarios\n      account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || Constants.EMPTY_STRING;\n      account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || Constants.EMPTY_STRING;\n      account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\n    }\n    account.environment = env;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    /*\r\n     * add uniqueName to claims\r\n     * account.name = idToken.claims.uniqueName;\r\n     */\n    return account;\n  };\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n  AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\n    var _a;\n    var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;\n    // since ADFS does not have tid and does not set client_info\n    if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\n      return accountId;\n    }\n    // for cases where there is clientInfo\n    if (serverClientInfo) {\n      try {\n        var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n        if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\n          return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\n        }\n      } catch (e) {}\n    }\n    // default to \"sub\" claim\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  AccountEntity.isAccountEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  };\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n  AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n    var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n    if (compareClaims) {\n      var accountAClaims = accountA.idTokenClaims || {};\n      var accountBClaims = accountB.idTokenClaims || {};\n      // issued at timestamp and nonce are expected to change each time a new id token is acquired\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n  };\n  return AccountEntity;\n}();\nexport { AccountEntity };","map":{"version":3,"names":["Separators","CacheAccountType","CacheType","Constants","buildClientInfo","StringUtils","ClientAuthError","AuthorityType","AccountEntity","prototype","generateAccountId","accountId","homeAccountId","environment","join","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountKey","generateAccountCacheKey","tenantId","realm","username","localAccountId","generateType","authorityType","ADFS_ACCOUNT_TYPE","ADFS","MSAV1_ACCOUNT_TYPE","MSA","MSSTS_ACCOUNT_TYPE","MSSTS","GENERIC_ACCOUNT_TYPE","GENERIC","createUnexpectedAccountTypeError","getAccountInfo","name","idTokenClaims","nativeAccountId","accountInterface","accountKey","EMPTY_STRING","createAccount","clientInfo","idToken","authority","cloudGraphHostName","msGraphHost","_a","_b","_c","_d","_e","_f","account","env","getPreferredCache","createInvalidCacheEnvironmentError","claims","tid","oid","sub","preferredUsername","preferred_username","email","emails","createGenericAccount","Adfs","upn","generateHomeAccountId","serverClientInfo","authType","logger","cryptoObj","Dsts","isEmpty","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","isAccountEntity","entity","hasOwnProperty","accountInfoIsEqual","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { Separators, CacheAccountType, CacheType, Constants } from '../../utils/Constants.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\nimport { ClientAuthError } from '../../error/ClientAuthError.js';\nimport { AuthorityType } from '../../authority/AuthorityType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n *      nativeAccountId: Account identifier on the native device\r\n * }\r\n */\r\nvar AccountEntity = /** @class */ (function () {\r\n    function AccountEntity() {\r\n    }\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    AccountEntity.prototype.generateAccountId = function () {\r\n        var accountId = [this.homeAccountId, this.environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */\r\n    AccountEntity.prototype.generateAccountKey = function () {\r\n        return AccountEntity.generateAccountCacheKey({\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId\r\n        });\r\n    };\r\n    /**\r\n     * returns the type of the cache (in this case account)\r\n     */\r\n    AccountEntity.prototype.generateType = function () {\r\n        switch (this.authorityType) {\r\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\r\n                return CacheType.ADFS;\r\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\r\n                return CacheType.MSA;\r\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\r\n                return CacheType.MSSTS;\r\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\r\n                return CacheType.GENERIC;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedAccountTypeError();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    AccountEntity.prototype.getAccountInfo = function () {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            name: this.name,\r\n            idTokenClaims: this.idTokenClaims,\r\n            nativeAccountId: this.nativeAccountId\r\n        };\r\n    };\r\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */\r\n    AccountEntity.generateAccountCacheKey = function (accountInterface) {\r\n        var accountKey = [\r\n            accountInterface.homeAccountId,\r\n            accountInterface.environment || Constants.EMPTY_STRING,\r\n            accountInterface.tenantId || Constants.EMPTY_STRING,\r\n        ];\r\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    };\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param clientInfo\r\n     * @param authority\r\n     * @param idToken\r\n     * @param policy\r\n     */\r\n    AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment, nativeAccountId) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var account = new AccountEntity();\r\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        account.clientInfo = clientInfo;\r\n        account.homeAccountId = homeAccountId;\r\n        account.nativeAccountId = nativeAccountId;\r\n        var env = environment || (authority && authority.getPreferredCache());\r\n        if (!env) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || Constants.EMPTY_STRING;\r\n        if (idToken) {\r\n            account.idTokenClaims = idToken.claims;\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || Constants.EMPTY_STRING;\r\n            /*\r\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n             * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n             * policy is configured to return more than 1 email.\r\n             */\r\n            var preferredUsername = (_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username;\r\n            var email = ((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : null;\r\n            account.username = preferredUsername || email || Constants.EMPTY_STRING;\r\n            account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\r\n        }\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        return account;\r\n    };\r\n    /**\r\n     * Builds non-AAD/ADFS account.\r\n     * @param authority\r\n     * @param idToken\r\n     */\r\n    AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment) {\r\n        var _a, _b, _c, _d;\r\n        var account = new AccountEntity();\r\n        account.authorityType = (authority &&\r\n            authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = homeAccountId;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = Constants.EMPTY_STRING;\r\n        var env = environment || authority && authority.getPreferredCache();\r\n        if (!env) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n        if (idToken) {\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || Constants.EMPTY_STRING;\r\n            // upn claim for most ADFS scenarios\r\n            account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || Constants.EMPTY_STRING;\r\n            account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || Constants.EMPTY_STRING;\r\n            account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\r\n        }\r\n        account.environment = env;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        /*\r\n         * add uniqueName to claims\r\n         * account.name = idToken.claims.uniqueName;\r\n         */\r\n        return account;\r\n    };\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\r\n        var _a;\r\n        var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;\r\n        // since ADFS does not have tid and does not set client_info\r\n        if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {\r\n            return accountId;\r\n        }\r\n        // for cases where there is clientInfo\r\n        if (serverClientInfo) {\r\n            try {\r\n                var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\r\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\r\n                    return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\r\n                }\r\n            }\r\n            catch (e) { }\r\n        }\r\n        // default to \"sub\" claim\r\n        logger.verbose(\"No client info in response\");\r\n        return accountId;\r\n    };\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    AccountEntity.isAccountEntity = function (entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    };\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            var accountAClaims = (accountA.idTokenClaims || {});\r\n            var accountBClaims = (accountB.idTokenClaims || {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\r\n                (accountAClaims.nonce === accountBClaims.nonce);\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId) &&\r\n            (accountA.localAccountId === accountB.localAccountId) &&\r\n            (accountA.username === accountB.username) &&\r\n            (accountA.tenantId === accountB.tenantId) &&\r\n            (accountA.environment === accountB.environment) &&\r\n            (accountA.nativeAccountId === accountB.nativeAccountId) &&\r\n            claimsMatch;\r\n    };\r\n    return AccountEntity;\r\n}());\n\nexport { AccountEntity };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,UAAU,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,SAAS,QAAQ,0BAA0B;AAC7F,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,QAAQ,kCAAkC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAe,YAAY;EAC3C,SAASA,aAAaA,CAAA,EAAG,CACzB;EACA;AACJ;AACA;EACIA,aAAa,CAACC,SAAS,CAACC,iBAAiB,GAAG,YAAY;IACpD,IAAIC,SAAS,GAAG,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,WAAW,CAAC;IACtD,OAAOF,SAAS,CAACG,IAAI,CAACd,UAAU,CAACe,mBAAmB,CAAC,CAACC,WAAW,EAAE;EACvE,CAAC;EACD;AACJ;AACA;EACIR,aAAa,CAACC,SAAS,CAACQ,kBAAkB,GAAG,YAAY;IACrD,OAAOT,aAAa,CAACU,uBAAuB,CAAC;MACzCN,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BM,QAAQ,EAAE,IAAI,CAACC,KAAK;MACpBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,cAAc,EAAE,IAAI,CAACA;IACzB,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;EACId,aAAa,CAACC,SAAS,CAACc,YAAY,GAAG,YAAY;IAC/C,QAAQ,IAAI,CAACC,aAAa;MACtB,KAAKvB,gBAAgB,CAACwB,iBAAiB;QACnC,OAAOvB,SAAS,CAACwB,IAAI;MACzB,KAAKzB,gBAAgB,CAAC0B,kBAAkB;QACpC,OAAOzB,SAAS,CAAC0B,GAAG;MACxB,KAAK3B,gBAAgB,CAAC4B,kBAAkB;QACpC,OAAO3B,SAAS,CAAC4B,KAAK;MAC1B,KAAK7B,gBAAgB,CAAC8B,oBAAoB;QACtC,OAAO7B,SAAS,CAAC8B,OAAO;MAC5B;QAAS;UACL,MAAM1B,eAAe,CAAC2B,gCAAgC,EAAE;QAC5D;IAAC;EAET,CAAC;EACD;AACJ;AACA;EACIzB,aAAa,CAACC,SAAS,CAACyB,cAAc,GAAG,YAAY;IACjD,OAAO;MACHtB,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,WAAW,EAAE,IAAI,CAACA,WAAW;MAC7BM,QAAQ,EAAE,IAAI,CAACC,KAAK;MACpBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCa,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,eAAe,EAAE,IAAI,CAACA;IAC1B,CAAC;EACL,CAAC;EACD;AACJ;AACA;AACA;EACI7B,aAAa,CAACU,uBAAuB,GAAG,UAAUoB,gBAAgB,EAAE;IAChE,IAAIC,UAAU,GAAG,CACbD,gBAAgB,CAAC1B,aAAa,EAC9B0B,gBAAgB,CAACzB,WAAW,IAAIV,SAAS,CAACqC,YAAY,EACtDF,gBAAgB,CAACnB,QAAQ,IAAIhB,SAAS,CAACqC,YAAY,CACtD;IACD,OAAOD,UAAU,CAACzB,IAAI,CAACd,UAAU,CAACe,mBAAmB,CAAC,CAACC,WAAW,EAAE;EACxE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIR,aAAa,CAACiC,aAAa,GAAG,UAAUC,UAAU,EAAE9B,aAAa,EAAE+B,OAAO,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,WAAW,EAAEjC,WAAW,EAAEwB,eAAe,EAAE;IAClJ,IAAIU,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAC1B,IAAIC,OAAO,GAAG,IAAI7C,aAAa,EAAE;IACjC6C,OAAO,CAAC7B,aAAa,GAAGvB,gBAAgB,CAAC4B,kBAAkB;IAC3DwB,OAAO,CAACX,UAAU,GAAGA,UAAU;IAC/BW,OAAO,CAACzC,aAAa,GAAGA,aAAa;IACrCyC,OAAO,CAAChB,eAAe,GAAGA,eAAe;IACzC,IAAIiB,GAAG,GAAGzC,WAAW,IAAK+B,SAAS,IAAIA,SAAS,CAACW,iBAAiB,EAAG;IACrE,IAAI,CAACD,GAAG,EAAE;MACN,MAAMhD,eAAe,CAACkD,kCAAkC,EAAE;IAC9D;IACAH,OAAO,CAACxC,WAAW,GAAGyC,GAAG;IACzB;IACAD,OAAO,CAACjC,KAAK,GAAG,CAAC,CAAC2B,EAAE,GAAGJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,GAAG,KAAKvD,SAAS,CAACqC,YAAY;IAC/J,IAAIG,OAAO,EAAE;MACTU,OAAO,CAACjB,aAAa,GAAGO,OAAO,CAACc,MAAM;MACtC;MACAJ,OAAO,CAAC/B,cAAc,GAAG,CAAC,CAAC0B,EAAE,GAAGL,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIT,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,GAAG,MAAM,CAACV,EAAE,GAAGN,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,GAAG,CAAC,IAAIzD,SAAS,CAACqC,YAAY;MACjS;AACZ;AACA;AACA;AACA;MACY,IAAIqB,iBAAiB,GAAG,CAACX,EAAE,GAAGP,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACY,kBAAkB;MAC1J,IAAIC,KAAK,GAAG,CAAC,CAACZ,EAAE,GAAGR,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACa,MAAM,IAAIrB,OAAO,CAACc,MAAM,CAACO,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;MACtKX,OAAO,CAAChC,QAAQ,GAAGwC,iBAAiB,IAAIE,KAAK,IAAI5D,SAAS,CAACqC,YAAY;MACvEa,OAAO,CAAClB,IAAI,GAAG,CAACiB,EAAE,GAAGT,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACjB,IAAI;IACvI;IACAkB,OAAO,CAACR,kBAAkB,GAAGA,kBAAkB;IAC/CQ,OAAO,CAACP,WAAW,GAAGA,WAAW;IACjC,OAAOO,OAAO;EAClB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI7C,aAAa,CAACyD,oBAAoB,GAAG,UAAUrD,aAAa,EAAE+B,OAAO,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,WAAW,EAAEjC,WAAW,EAAE;IAC5H,IAAIkC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAClB,IAAIG,OAAO,GAAG,IAAI7C,aAAa,EAAE;IACjC6C,OAAO,CAAC7B,aAAa,GAAIoB,SAAS,IAC9BA,SAAS,CAACpB,aAAa,KAAKjB,aAAa,CAAC2D,IAAI,GAAIjE,gBAAgB,CAACwB,iBAAiB,GAAGxB,gBAAgB,CAAC8B,oBAAoB;IAChIsB,OAAO,CAACzC,aAAa,GAAGA,aAAa;IACrC;IACAyC,OAAO,CAACjC,KAAK,GAAGjB,SAAS,CAACqC,YAAY;IACtC,IAAIc,GAAG,GAAGzC,WAAW,IAAI+B,SAAS,IAAIA,SAAS,CAACW,iBAAiB,EAAE;IACnE,IAAI,CAACD,GAAG,EAAE;MACN,MAAMhD,eAAe,CAACkD,kCAAkC,EAAE;IAC9D;IACA,IAAIb,OAAO,EAAE;MACT;MACAU,OAAO,CAAC/B,cAAc,GAAG,CAAC,CAACyB,EAAE,GAAGJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACY,GAAG,MAAM,CAACX,EAAE,GAAGL,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIT,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACY,GAAG,CAAC,IAAIzD,SAAS,CAACqC,YAAY;MACjS;MACAa,OAAO,CAAChC,QAAQ,GAAG,CAAC,CAAC4B,EAAE,GAAGN,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACkB,GAAG,KAAKhE,SAAS,CAACqC,YAAY;MAClKa,OAAO,CAAClB,IAAI,GAAG,CAAC,CAACe,EAAE,GAAGP,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACf,IAAI,KAAKhC,SAAS,CAACqC,YAAY;MAC/Ja,OAAO,CAACjB,aAAa,GAAGO,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM;IAC5F;IACAJ,OAAO,CAACxC,WAAW,GAAGyC,GAAG;IACzBD,OAAO,CAACR,kBAAkB,GAAGA,kBAAkB;IAC/CQ,OAAO,CAACP,WAAW,GAAGA,WAAW;IACjC;AACR;AACA;AACA;IACQ,OAAOO,OAAO;EAClB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI7C,aAAa,CAAC4D,qBAAqB,GAAG,UAAUC,gBAAgB,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAE7B,OAAO,EAAE;IACpG,IAAII,EAAE;IACN,IAAIpC,SAAS,GAAG,CAAC,CAACoC,EAAE,GAAGJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACa,GAAG,IAAIjB,OAAO,CAACc,MAAM,CAACG,GAAG,GAAGzD,SAAS,CAACqC,YAAY;IACnL;IACA,IAAI8B,QAAQ,KAAK/D,aAAa,CAAC2D,IAAI,IAAII,QAAQ,KAAK/D,aAAa,CAACkE,IAAI,EAAE;MACpE,OAAO9D,SAAS;IACpB;IACA;IACA,IAAI0D,gBAAgB,EAAE;MAClB,IAAI;QACA,IAAI3B,UAAU,GAAGtC,eAAe,CAACiE,gBAAgB,EAAEG,SAAS,CAAC;QAC7D,IAAI,CAACnE,WAAW,CAACqE,OAAO,CAAChC,UAAU,CAACiC,GAAG,CAAC,IAAI,CAACtE,WAAW,CAACqE,OAAO,CAAChC,UAAU,CAACkC,IAAI,CAAC,EAAE;UAC/E,OAAO,EAAE,GAAGlC,UAAU,CAACiC,GAAG,GAAG3E,UAAU,CAAC6E,qBAAqB,GAAGnC,UAAU,CAACkC,IAAI;QACnF;MACJ,CAAC,CACD,OAAOE,CAAC,EAAE,CAAE;IAChB;IACA;IACAP,MAAM,CAACQ,OAAO,CAAC,4BAA4B,CAAC;IAC5C,OAAOpE,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;EACIH,aAAa,CAACwE,eAAe,GAAG,UAAUC,MAAM,EAAE;IAC9C,IAAI,CAACA,MAAM,EAAE;MACT,OAAO,KAAK;IAChB;IACA,OAAQA,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC,IAC1CD,MAAM,CAACC,cAAc,CAAC,aAAa,CAAC,IACpCD,MAAM,CAACC,cAAc,CAAC,OAAO,CAAC,IAC9BD,MAAM,CAACC,cAAc,CAAC,gBAAgB,CAAC,IACvCD,MAAM,CAACC,cAAc,CAAC,UAAU,CAAC,IACjCD,MAAM,CAACC,cAAc,CAAC,eAAe,CAAC;EAC9C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI1E,aAAa,CAAC2E,kBAAkB,GAAG,UAAUC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa,EAAE;IAC5E,IAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,EAAE;MACxB,OAAO,KAAK;IAChB;IACA,IAAIE,WAAW,GAAG,IAAI,CAAC,CAAC;IACxB,IAAID,aAAa,EAAE;MACf,IAAIE,cAAc,GAAIJ,QAAQ,CAAChD,aAAa,IAAI,CAAC,CAAE;MACnD,IAAIqD,cAAc,GAAIJ,QAAQ,CAACjD,aAAa,IAAI,CAAC,CAAE;MACnD;MACAmD,WAAW,GAAIC,cAAc,CAACE,GAAG,KAAKD,cAAc,CAACC,GAAG,IACnDF,cAAc,CAACG,KAAK,KAAKF,cAAc,CAACE,KAAM;IACvD;IACA,OAAQP,QAAQ,CAACxE,aAAa,KAAKyE,QAAQ,CAACzE,aAAa,IACpDwE,QAAQ,CAAC9D,cAAc,KAAK+D,QAAQ,CAAC/D,cAAe,IACpD8D,QAAQ,CAAC/D,QAAQ,KAAKgE,QAAQ,CAAChE,QAAS,IACxC+D,QAAQ,CAACjE,QAAQ,KAAKkE,QAAQ,CAAClE,QAAS,IACxCiE,QAAQ,CAACvE,WAAW,KAAKwE,QAAQ,CAACxE,WAAY,IAC9CuE,QAAQ,CAAC/C,eAAe,KAAKgD,QAAQ,CAAChD,eAAgB,IACvDkD,WAAW;EACnB,CAAC;EACD,OAAO/E,aAAa;AACxB,CAAC,EAAG;AAEJ,SAASA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}