{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\nvar InteractionHandler = /** @class */function () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.logger = logger;\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\n        this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\n        // Check that location hash isn't empty.\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n        this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n        return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\n            this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            // Acquire token with retrieved code.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n    return null;\n  };\n  return InteractionHandler;\n}();\nexport { InteractionHandler };","map":{"version":3,"names":["__awaiter","__generator","PerformanceEvents","StringUtils","ClientAuthError","ServerError","AuthorityFactory","BrowserAuthError","BrowserAuthErrorMessage","TemporaryCacheKeys","InteractionHandler","authCodeModule","storageImpl","authCodeRequest","logger","performanceClient","authModule","browserStorage","prototype","handleCodeResponseFromHash","locationHash","state","authority","networkModule","stateKey","requestState","authCodeResponse","_a","addQueueMeasurement","HandleCodeResponseFromHash","correlationId","verbose","isEmpty","createEmptyHashError","generateStateKey","getTemporaryCache","createStateNotFoundError","handleFragmentResponse","e","subError","userCancelledError","code","createUserCancelledError","setPreQueueTime","HandleCodeResponseFromServer","handleCodeResponseFromServer","validateNonce","nonceKey","cachedNonce","cachedCcsCred","tokenResponse","label","trace","generateNonceKey","cloud_instance_host_name","UpdateTokenEndpointAuthority","updateTokenEndpointAuthority","sent","nonce","undefined","client_info","clientInfo","checkCcsCredentials","ccsCredential","AuthClientAcquireToken","acquireToken","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","cloudInstanceAuthority","tenant","createDiscoveredInstance","options","updateAuthority","CCS_CREDENTIAL","JSON","parse","error","errorPii"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nvar InteractionHandler = /** @class */ (function () {\r\n    function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var stateKey, requestState, authCodeResponse;\r\n            return __generator(this, function (_a) {\r\n                this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);\r\n                this.logger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n                // Check that location hash isn't empty.\r\n                if (StringUtils.isEmpty(locationHash)) {\r\n                    throw BrowserAuthError.createEmptyHashError(locationHash);\r\n                }\r\n                stateKey = this.browserStorage.generateStateKey(state);\r\n                requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n                if (!requestState) {\r\n                    throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n                }\r\n                try {\r\n                    authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n                }\r\n                catch (e) {\r\n                    if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\r\n                        // Translate server error caused by user closing native prompt to corresponding first class MSAL error\r\n                        throw BrowserAuthError.createUserCancelledError();\r\n                    }\r\n                    else {\r\n                        throw e;\r\n                    }\r\n                }\r\n                this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n                return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Process auth code response from AAD\r\n     * @param authCodeResponse\r\n     * @param state\r\n     * @param authority\r\n     * @param networkModule\r\n     * @returns\r\n     */\r\n    InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\r\n        if (validateNonce === void 0) { validateNonce = true; }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);\r\n                        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\r\n                        stateKey = this.browserStorage.generateStateKey(state);\r\n                        requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n                        if (!requestState) {\r\n                            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n                        }\r\n                        nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n                        cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n                        // Assign code to request\r\n                        this.authCodeRequest.code = authCodeResponse.code;\r\n                        if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n                        return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\r\n                        if (validateNonce) {\r\n                            authCodeResponse.nonce = cachedNonce || undefined;\r\n                        }\r\n                        authCodeResponse.state = requestState;\r\n                        // Add CCS parameters if available\r\n                        if (authCodeResponse.client_info) {\r\n                            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n                        }\r\n                        else {\r\n                            cachedCcsCred = this.checkCcsCredentials();\r\n                            if (cachedCcsCred) {\r\n                                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n                            }\r\n                        }\r\n                        // Acquire token with retrieved code.\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);\r\n                        return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\r\n                    case 3:\r\n                        tokenResponse = _a.sent();\r\n                        this.browserStorage.cleanRequestByState(state);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname\r\n     * @param authority\r\n     * @param networkModule\r\n     */\r\n    InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cloudInstanceAuthorityUri, cloudInstanceAuthority;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);\r\n                        cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\r\n                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];\r\n                    case 1:\r\n                        cloudInstanceAuthority = _a.sent();\r\n                        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    InteractionHandler.prototype.checkCcsCredentials = function () {\r\n        // Look up ccs credential in temp cache\r\n        var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred);\r\n            }\r\n            catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return InteractionHandler;\r\n}());\n\nexport { InteractionHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}