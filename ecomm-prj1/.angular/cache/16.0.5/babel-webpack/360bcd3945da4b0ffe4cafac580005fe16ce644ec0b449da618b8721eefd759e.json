{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _asyncIterator = require(\"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _dns = _interopRequireDefault(require(\"dns\"));\nvar _constants = _interopRequireDefault(require(\"constants\"));\nvar _stream = require(\"stream\");\nvar _identity = require(\"@azure/identity\");\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\nvar _debug = _interopRequireDefault(require(\"./debug\"));\nvar _events = require(\"events\");\nvar _instanceLookup = require(\"./instance-lookup\");\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\nvar _packet = require(\"./packet\");\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\nvar _request = _interopRequireDefault(require(\"./request\"));\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\nvar _transaction = require(\"./transaction\");\nvar _errors = require(\"./errors\");\nvar _connector = require(\"./connector\");\nvar _library = require(\"./library\");\nvar _tdsVersions = require(\"./tds-versions\");\nvar _message = _interopRequireDefault(require(\"./message\"));\nvar _ntlm = require(\"./ntlm\");\nvar _nodeAbortController = require(\"node-abort-controller\");\nvar _dataType = require(\"./data-type\");\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\nvar _package = require(\"../package.json\");\nvar _url = require(\"url\");\nvar _handler = require(\"./token/handler\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\n\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\n\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\n\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\n\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\n\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\n\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\n\nconst DEFAULT_DATEFORMAT = 'mdy';\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nclass Connection extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config) {\n    super();\n    this.fedAuthRequired = void 0;\n    this.config = void 0;\n    this.secureContextOptions = void 0;\n    this.inTransaction = void 0;\n    this.transactionDescriptors = void 0;\n    this.transactionDepth = void 0;\n    this.isSqlBatch = void 0;\n    this.curTransientRetryCount = void 0;\n    this.transientErrorLookup = void 0;\n    this.closed = void 0;\n    this.loginError = void 0;\n    this.debug = void 0;\n    this.ntlmpacket = void 0;\n    this.ntlmpacketBuffer = void 0;\n    this.routingData = void 0;\n    this.messageIo = void 0;\n    this.state = void 0;\n    this.resetConnectionOnNextRequest = void 0;\n    this.request = void 0;\n    this.procReturnStatusValue = void 0;\n    this.socket = void 0;\n    this.messageBuffer = void 0;\n    this.connectTimer = void 0;\n    this.cancelTimer = void 0;\n    this.requestTimer = void 0;\n    this.retryTimer = void 0;\n    this._cancelAfterRequestSent = void 0;\n    this.databaseCollation = void 0;\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n    this.fedAuthRequired = false;\n    let authentication;\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\n        // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n        this.config.options.appName = config.options.appName;\n      }\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n        this.config.options.database = config.options.database;\n      }\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n        this.config.options.datefirst = config.options.datefirst;\n      }\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n          this.config.options.debug.data = config.options.debug.data;\n        }\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n        this.config.options.encrypt = config.options.encrypt;\n      }\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n        this.config.options.language = config.options.language;\n      }\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n        this.config.options.localAddress = config.options.localAddress;\n      }\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n        this.config.options.packetSize = config.options.packetSize;\n      }\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n        this.config.options.useUTC = config.options.useUTC;\n      }\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n        this.config.options.workstationId = config.options.workstationId;\n      }\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n    this.secureContextOptions = this.config.options.cryptoCredentialsDetails;\n    if (this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      this.secureContextOptions = Object.create(this.secureContextOptions, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.messageBuffer = Buffer.alloc(0);\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    this.state = this.STATE.INITIALIZED;\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n  connect(connectListener) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n    if (connectListener) {\n      const onConnect = err => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n      const onError = err => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * The server has reported that the charset has changed.\n   */\n\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n  /**\n   * @private\n   */\n\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n    } else {\n      return (0, _instanceLookup.instanceLookup)({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }).then(port => {\n        process.nextTick(() => {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\n        });\n      }, err => {\n        this.clearConnectTimer();\n        if (err.name === 'AbortError') {\n          // Ignore the AbortError for now, this is still handled by the connectTimer firing\n          return;\n        }\n        process.nextTick(() => {\n          this.emit('connect', new _errors.ConnectionError(err.message, 'EINSTLOOKUP'));\n        });\n      });\n    }\n  }\n  /**\n   * @private\n   */\n\n  cleanupConnection(cleanupType) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n      const request = this.request;\n      if (request) {\n        const err = new _errors.RequestError('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n      this.closed = true;\n      this.loginError = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  createDebug() {\n    const debug = new _debug.default(this.config.options.debug);\n    debug.on('debug', message => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n  /**\n   * @private\n   */\n\n  createTokenStreamParser(message, handler) {\n    return new _tokenStreamParser.Parser(message, this.debug, handler, this.config.options);\n  }\n  connectOnPort(port, multiSubnetFailover, signal) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n    const connect = multiSubnetFailover ? _connector.connectInParallel : _connector.connectInSequence;\n    connect(connectOpts, _dns.default.lookup, signal).then(socket => {\n      process.nextTick(() => {\n        socket.on('error', error => {\n          this.socketError(error);\n        });\n        socket.on('close', () => {\n          this.socketClose();\n        });\n        socket.on('end', () => {\n          this.socketEnd();\n        });\n        socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n        this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\n        this.messageIo.on('secure', cleartext => {\n          this.emit('secure', cleartext);\n        });\n        this.socket = socket;\n        this.closed = false;\n        this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      });\n    }, err => {\n      this.clearConnectTimer();\n      if (err.name === 'AbortError') {\n        return;\n      }\n      process.nextTick(() => {\n        this.socketError(err);\n      });\n    });\n  }\n  /**\n   * @private\n   */\n\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n  /**\n   * @private\n   */\n\n  createConnectTimer() {\n    const controller = new _nodeAbortController.AbortController();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n  /**\n   * @private\n   */\n\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n\n    const request = this.request;\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n  /**\n   * @private\n   */\n\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', new _errors.ConnectionError(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n  /**\n   * @private\n   */\n\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', new _errors.ConnectionError(message, 'ETIMEOUT'));\n  }\n  /**\n   * @private\n   */\n\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request;\n    request.cancel();\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = new _errors.RequestError(message, 'ETIMEOUT');\n  }\n  /**\n   * @private\n   */\n\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * @private\n   */\n\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n      this.connectTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n      this.cancelTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n  transitionTo(newState) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n  /**\n   * @private\n   */\n\n  getEventHandler(eventName) {\n    const handler = this.state.events[eventName];\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n    return handler;\n  }\n  /**\n   * @private\n   */\n\n  dispatchEvent(eventName, ...args) {\n    const handler = this.state.events[eventName];\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n  /**\n   * @private\n   */\n\n  socketError(error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', new _errors.ConnectionError(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', new _errors.ConnectionError(message, 'ESOCKET'));\n    }\n    this.dispatchEvent('socketError', error);\n  }\n  /**\n   * @private\n   */\n\n  socketEnd() {\n    this.debug.log('socket ended');\n    if (this.state !== this.STATE.FINAL) {\n      const error = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n  /**\n   * @private\n   */\n\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n  /**\n   * @private\n   */\n\n  sendPreLogin() {\n    const [, major, minor, build] = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version) ?? ['0.0.0', '0', '0', '0'];\n    const payload = new _preloginPayload.default({\n      encrypt: this.config.options.encrypt,\n      version: {\n        major: Number(major),\n        minor: Number(minor),\n        build: Number(build),\n        subbuild: 0\n      }\n    });\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n  sendLogin7Packet() {\n    const payload = new _login7Payload.default({\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n    const {\n      authentication\n    } = this.config;\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-default':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n      case 'ntlm':\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\n          domain: authentication.options.domain\n        });\n        break;\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n    payload.hostname = this.config.options.workstationId || _os.default.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = _library.name;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n    this.routingData = undefined;\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n  sendFedAuthTokenMessage(token) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n  /**\n   * @private\n   */\n\n  sendInitialSql() {\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n    const message = new _message.default({\n      type: _packet.TYPE.SQL_BATCH\n    });\n    this.messageIo.outgoingMessageStream.write(message);\n    _stream.Readable.from(payload).pipe(message);\n  }\n  /**\n   * @private\n   */\n\n  getInitialSql() {\n    const options = [];\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n    return options.join('\\n');\n  }\n  /**\n   * @private\n   */\n\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n  execSqlBatch(request) {\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n  execSql(request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    if (request.parameters.length) {\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push(...request.parameters);\n    }\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n\n  newBulkLoad(table, callbackOrOptions, callback) {\n    let options;\n    if (callback === undefined) {\n      callback = callbackOrOptions;\n      options = {};\n    } else {\n      options = callbackOrOptions;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n    return new _bulkLoad.default(table, this.databaseCollation, this.config.options, options, callback);\n  }\n  /**\n   * Execute a [[BulkLoad]].\n   *\n   * ```js\n   * // We want to perform a bulk load into a table with the following format:\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n   *\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n   *   // ...\n   * });\n   *\n   * // First, we need to specify the columns that we want to write to,\n   * // and their definitions. These definitions must match the actual table,\n   * // otherwise the bulk load will fail.\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n   *\n   * // Execute a bulk load with a predefined list of rows.\n   * //\n   * // Note that these rows are held in memory until the\n   * // bulk load was performed, so if you need to write a large\n   * // number of rows (e.g. by reading from a CSV file),\n   * // passing an `AsyncIterable` is advisable to keep memory usage low.\n   * connection.execBulkLoad(bulkLoad, [\n   *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n   *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n   * ]);\n   * ```\n   *\n   * @param bulkLoad A previously created [[BulkLoad]].\n   * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n   */\n\n  execBulkLoad(bulkLoad, rows) {\n    bulkLoad.executionStarted = true;\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n      const rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n\n      rowStream.on('error', err => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      }); // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n\n      bulkLoad.rowToPacketTransform.on('error', err => {\n        rowStream.destroy(err);\n      });\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n    const onCancel = () => {\n      request.cancel();\n    };\n    const payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\n      bulkLoad.removeListener('cancel', onCancel);\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\n    });\n    bulkLoad.once('cancel', onCancel);\n    this.execSqlBatch(request);\n  }\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n\n  prepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\n\n    request.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = new _errors.RequestError(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n\n  unprepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n\n  execute(request, parameters) {\n    const executeParameters = [];\n    executeParameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n        executeParameters.push({\n          ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n        });\n      }\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n  callProcedure(request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n    const transaction = new _transaction.Transaction(name, isolationLevel);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, err => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n\n  commitTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n  rollbackTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n  saveTransaction(callback, name) {\n    const transaction = new _transaction.Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n  transaction(cb, isolationLevel) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n    const useSavepoint = this.inTransaction;\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n    const txDone = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction(txErr => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n        done(null, ...args);\n      } else {\n        this.commitTransaction(txErr => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n    if (useSavepoint) {\n      return this.saveTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n        if (isolationLevel) {\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n  /**\n   * @private\n   */\n\n  makeRequest(request, packetType, payload) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback(new _errors.RequestError(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === _packet.TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n      this.request = request;\n      request.connection = this;\n      request.rowCount = 0;\n      request.rows = [];\n      request.rst = [];\n      const onCancel = () => {\n        payloadStream.unpipe(message);\n        payloadStream.destroy(new _errors.RequestError('Canceled.', 'ECANCEL')); // set the ignore bit and end the message.\n\n        message.ignore = true;\n        message.end();\n        if (request instanceof _request.default && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n      request.once('cancel', onCancel);\n      this.createRequestTimer();\n      const message = new _message.default({\n        type: packetType,\n        resetConnection: this.resetConnectionOnNextRequest\n      });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function () {\n          return payload.toString('  ');\n        });\n      });\n      const payloadStream = _stream.Readable.from(payload);\n      payloadStream.once('error', error => {\n        payloadStream.unpipe(message); // Only set a request error if no error was set yet.\n\n        request.error ?? (request.error = error);\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n  /**\n   * Cancel currently executed request.\n   */\n\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n    if (this.request.canceled) {\n      return false;\n    }\n    this.request.cancel();\n    return true;\n  }\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n\n  reset(callback) {\n    const request = new _request.default(this.getInitialSql(), err => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n  /**\n   * @private\n   */\n\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n  /**\n   * @private\n   */\n\n  getIsolationLevelText(isolationLevel) {\n    switch (isolationLevel) {\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n      default:\n        return 'read committed';\n    }\n  }\n}\nfunction isTransientError(error) {\n  if (error instanceof _esAggregateError.default) {\n    error = error.errors[0];\n  }\n  return error instanceof _errors.ConnectionError && !!error.isTransient;\n}\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function () {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function () {\n      var _this = this;\n      _asyncToGenerator(function* () {\n        let messageBuffer = Buffer.alloc(0);\n        let message;\n        try {\n          message = yield _this.messageIo.readMessage();\n        } catch (err) {\n          return _this.socketError(err);\n        }\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(message), _step; _iteratorAbruptCompletion = !(_step = yield _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const data = _step.value;\n            {\n              messageBuffer = Buffer.concat([messageBuffer, data]);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              yield _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        const preloginPayload = new _preloginPayload.default(messageBuffer);\n        _this.debug.payload(function () {\n          return preloginPayload.toString('  ');\n        });\n        if (preloginPayload.fedAuthRequired === 1) {\n          _this.fedAuthRequired = true;\n        }\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          if (!_this.config.options.encrypt) {\n            _this.emit('connect', new _errors.ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return _this.close();\n          }\n          try {\n            var _this$routingData;\n            _this.transitionTo(_this.STATE.SENT_TLSSSLNEGOTIATION);\n            yield _this.messageIo.startTls(_this.secureContextOptions, ((_this$routingData = _this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) ?? _this.config.server, _this.config.options.trustServerCertificate);\n          } catch (err) {\n            return _this.socketError(err);\n          }\n        }\n        _this.sendLogin7Packet();\n        const {\n          authentication\n        } = _this.config;\n        switch (authentication.type) {\n          case 'azure-active-directory-password':\n          case 'azure-active-directory-msi-vm':\n          case 'azure-active-directory-msi-app-service':\n          case 'azure-active-directory-service-principal-secret':\n          case 'azure-active-directory-default':\n            _this.transitionTo(_this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            break;\n          case 'ntlm':\n            _this.transitionTo(_this.STATE.SENT_LOGIN7_WITH_NTLM);\n            break;\n          default:\n            _this.transitionTo(_this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            break;\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function () {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function () {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function () {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function () {\n      var _this2 = this;\n      _asyncToGenerator(function* () {\n        let message;\n        try {\n          message = yield _this2.messageIo.readMessage();\n        } catch (err) {\n          return _this2.socketError(err);\n        }\n        const handler = new _handler.Login7TokenHandler(_this2);\n        const tokenStreamParser = _this2.createTokenStreamParser(message, handler);\n        yield (0, _events.once)(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            _this2.routingData = handler.routingData;\n            _this2.transitionTo(_this2.STATE.REROUTING);\n          } else {\n            _this2.transitionTo(_this2.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n        } else if (_this2.loginError) {\n          if (isTransientError(_this2.loginError)) {\n            _this2.debug.log('Initiating retry on transient error');\n            _this2.transitionTo(_this2.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            _this2.emit('connect', _this2.loginError);\n            _this2.transitionTo(_this2.STATE.FINAL);\n          }\n        } else {\n          _this2.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n          _this2.transitionTo(_this2.STATE.FINAL);\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function () {\n      var _this3 = this;\n      _asyncToGenerator(function* () {\n        while (true) {\n          let message;\n          try {\n            message = yield _this3.messageIo.readMessage();\n          } catch (err) {\n            return _this3.socketError(err);\n          }\n          const handler = new _handler.Login7TokenHandler(_this3);\n          const tokenStreamParser = _this3.createTokenStreamParser(message, handler);\n          yield (0, _events.once)(tokenStreamParser, 'end');\n          if (handler.loginAckReceived) {\n            if (handler.routingData) {\n              _this3.routingData = handler.routingData;\n              return _this3.transitionTo(_this3.STATE.REROUTING);\n            } else {\n              return _this3.transitionTo(_this3.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (_this3.ntlmpacket) {\n            const authentication = _this3.config.authentication;\n            const payload = new _ntlmPayload.default({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: _this3.ntlmpacket\n            });\n            _this3.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n            _this3.debug.payload(function () {\n              return payload.toString('  ');\n            });\n            _this3.ntlmpacket = undefined;\n          } else if (_this3.loginError) {\n            if (isTransientError(_this3.loginError)) {\n              _this3.debug.log('Initiating retry on transient error');\n              return _this3.transitionTo(_this3.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              _this3.emit('connect', _this3.loginError);\n              return _this3.transitionTo(_this3.STATE.FINAL);\n            }\n          } else {\n            _this3.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n            return _this3.transitionTo(_this3.STATE.FINAL);\n          }\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function () {\n      var _this4 = this;\n      _asyncToGenerator(function* () {\n        let message;\n        try {\n          message = yield _this4.messageIo.readMessage();\n        } catch (err) {\n          return _this4.socketError(err);\n        }\n        const handler = new _handler.Login7TokenHandler(_this4);\n        const tokenStreamParser = _this4.createTokenStreamParser(message, handler);\n        yield (0, _events.once)(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            _this4.routingData = handler.routingData;\n            _this4.transitionTo(_this4.STATE.REROUTING);\n          } else {\n            _this4.transitionTo(_this4.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n          return;\n        }\n        const fedAuthInfoToken = handler.fedAuthInfoToken;\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = _this4.config.authentication;\n          const tokenScope = new _url.URL('/.default', fedAuthInfoToken.spn).toString();\n          let credentials;\n          switch (authentication.type) {\n            case 'azure-active-directory-password':\n              credentials = new _identity.UsernamePasswordCredential(authentication.options.tenantId ?? 'common', authentication.options.clientId, authentication.options.userName, authentication.options.password);\n              break;\n            case 'azure-active-directory-msi-vm':\n            case 'azure-active-directory-msi-app-service':\n              const msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = new _identity.ManagedIdentityCredential(...msiArgs);\n              break;\n            case 'azure-active-directory-default':\n              const args = authentication.options.clientId ? {\n                managedIdentityClientId: authentication.options.clientId\n              } : {};\n              credentials = new _identity.DefaultAzureCredential(args);\n              break;\n            case 'azure-active-directory-service-principal-secret':\n              credentials = new _identity.ClientSecretCredential(authentication.options.tenantId, authentication.options.clientId, authentication.options.clientSecret);\n              break;\n          }\n          let tokenResponse;\n          try {\n            tokenResponse = yield credentials.getToken(tokenScope);\n          } catch (err) {\n            _this4.loginError = new _esAggregateError.default([new _errors.ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), err]);\n            _this4.emit('connect', _this4.loginError);\n            _this4.transitionTo(_this4.STATE.FINAL);\n            return;\n          }\n          const token = tokenResponse.token;\n          _this4.sendFedAuthTokenMessage(token);\n        } else if (_this4.loginError) {\n          if (isTransientError(_this4.loginError)) {\n            _this4.debug.log('Initiating retry on transient error');\n            _this4.transitionTo(_this4.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            _this4.emit('connect', _this4.loginError);\n            _this4.transitionTo(_this4.STATE.FINAL);\n          }\n        } else {\n          _this4.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n          _this4.transitionTo(_this4.STATE.FINAL);\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function () {\n      var _this5 = this;\n      _asyncToGenerator(function* () {\n        _this5.sendInitialSql();\n        let message;\n        try {\n          message = yield _this5.messageIo.readMessage();\n        } catch (err) {\n          return _this5.socketError(err);\n        }\n        const tokenStreamParser = _this5.createTokenStreamParser(message, new _handler.InitialSqlTokenHandler(_this5));\n        yield (0, _events.once)(tokenStreamParser, 'end');\n        _this5.transitionTo(_this5.STATE.LOGGED_IN);\n        _this5.processedInitialSql();\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function () {\n      var _this6 = this;\n      _asyncToGenerator(function* () {\n        var _this$request, _this$request3, _this$request10;\n        let message;\n        try {\n          message = yield _this6.messageIo.readMessage();\n        } catch (err) {\n          return _this6.socketError(err);\n        } // request timer is stopped on first data package\n\n        _this6.clearRequestTimer();\n        const tokenStreamParser = _this6.createTokenStreamParser(message, new _handler.RequestTokenHandler(_this6, _this6.request)); // If the request was canceled and we have a `cancelTimer`\n        // defined, we send a attention message after the\n        // request message was fully sent off.\n        //\n        // We already started consuming the current message\n        // (but all the token handlers should be no-ops), and\n        // need to ensure the next message is handled by the\n        // `SENT_ATTENTION` state.\n\n        if ((_this$request = _this6.request) !== null && _this$request !== void 0 && _this$request.canceled && _this6.cancelTimer) {\n          return _this6.transitionTo(_this6.STATE.SENT_ATTENTION);\n        }\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n        const onPause = () => {\n          var _this$request2;\n          tokenStreamParser.pause();\n          (_this$request2 = _this6.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.once('resume', onResume);\n        };\n        (_this$request3 = _this6.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.on('pause', onPause);\n        if (_this6.request instanceof _request.default && _this6.request.paused) {\n          onPause();\n        }\n        const onCancel = () => {\n          var _this$request4, _this$request5;\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n          if (_this6.request instanceof _request.default && _this6.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            _this6.request.resume();\n          }\n          (_this$request4 = _this6.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('pause', onPause);\n          (_this$request5 = _this6.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('resume', onResume); // The `_cancelAfterRequestSent` callback will have sent a\n          // attention message, so now we need to also switch to\n          // the `SENT_ATTENTION` state to make sure the attention ack\n          // message is processed correctly.\n\n          _this6.transitionTo(_this6.STATE.SENT_ATTENTION);\n        };\n        const onEndOfMessage = () => {\n          var _this$request6, _this$request7, _this$request8, _this$request9;\n          (_this$request6 = _this6.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', _this6._cancelAfterRequestSent);\n          (_this$request7 = _this6.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('cancel', onCancel);\n          (_this$request8 = _this6.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('pause', onPause);\n          (_this$request9 = _this6.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.removeListener('resume', onResume);\n          _this6.transitionTo(_this6.STATE.LOGGED_IN);\n          const sqlRequest = _this6.request;\n          _this6.request = undefined;\n          if (_this6.config.options.tdsVersion < '7_2' && sqlRequest.error && _this6.isSqlBatch) {\n            _this6.inTransaction = false;\n          }\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n        tokenStreamParser.once('end', onEndOfMessage);\n        (_this$request10 = _this6.request) === null || _this$request10 === void 0 ? void 0 : _this$request10.once('cancel', onCancel);\n      })();\n    },\n    exit: function (nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function () {\n      var _this7 = this;\n      _asyncToGenerator(function* () {\n        let message;\n        try {\n          message = yield _this7.messageIo.readMessage();\n        } catch (err) {\n          return _this7.socketError(err);\n        }\n        const handler = new _handler.AttentionTokenHandler(_this7, _this7.request);\n        const tokenStreamParser = _this7.createTokenStreamParser(message, handler);\n        yield (0, _events.once)(tokenStreamParser, 'end'); // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n\n        if (handler.attentionReceived) {\n          _this7.clearCancelTimer();\n          const sqlRequest = _this7.request;\n          _this7.request = undefined;\n          _this7.transitionTo(_this7.STATE.LOGGED_IN);\n          if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n          }\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function () {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function () {// Do nothing\n      },\n      socketError: function () {// Do nothing\n      }\n    }\n  }\n};","map":{"version":3,"names":["_asyncToGenerator","require","default","_asyncIterator","Object","defineProperty","exports","value","_crypto","_interopRequireDefault","_os","_dns","_constants","_stream","_identity","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_message","_ntlm","_nodeAbortController","_dataType","_bulkLoadPayload","_esAggregateError","_package","_url","_handler","obj","__esModule","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","EventEmitter","constructor","config","fedAuthRequired","secureContextOptions","inTransaction","transactionDescriptors","transactionDepth","isSqlBatch","curTransientRetryCount","transientErrorLookup","closed","loginError","debug","ntlmpacket","ntlmpacketBuffer","routingData","messageIo","state","resetConnectionOnNextRequest","request","procReturnStatusValue","socket","messageBuffer","connectTimer","cancelTimer","requestTimer","retryTimer","_cancelAfterRequestSent","databaseCollation","TypeError","server","authentication","undefined","type","options","domain","userName","password","toUpperCase","clientId","tenantId","token","clientSecret","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnEncryptionKeyCacheTTL","columnEncryptionSetting","columnNameReplacer","connectionRetryInterval","connectTimeout","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","encryptionKeyStoreProviders","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","serverName","serverSupportsColumnEncryption","tdsVersion","textsize","trustedServerNameAE","trustServerCertificate","useColumnNames","useUTC","workstationId","lowerCaseGuids","Error","assertValidIsolationLevel","RangeError","secureOptions","create","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","createDebug","Buffer","from","alloc","TransientErrorLookup","STATE","INITIALIZED","sendMessage","TYPE","ATTENTION","createCancelTimer","connect","connectListener","ConnectionError","name","onConnect","err","removeListener","onError","once","transitionTo","CONNECTING","on","event","listener","emit","args","close","FINAL","initialiseConnection","signal","createConnectTimer","connectOnPort","instanceLookup","timeout","then","process","nextTick","clearConnectTimer","message","cleanupConnection","cleanupType","clearRequestTimer","clearRetryTimer","closeConnection","RequestError","callback","createTokenStreamParser","handler","Parser","connectOpts","host","connectInParallel","connectInSequence","lookup","error","socketError","socketClose","socketEnd","setKeepAlive","cleartext","log","sendPreLogin","SENT_PRELOGIN","destroy","controller","AbortController","setTimeout","abort","clearCancelTimer","createRequestTimer","createRetryTimer","retryTimeout","dispatchEvent","cancel","clearTimeout","newState","exit","call","enter","apply","getEventHandler","eventName","events","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","major","minor","build","exec","version","Number","subbuild","PRELOGIN","toString","sendLogin7Packet","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","libraryName","initDbFatal","LOGIN7","toBuffer","sendFedAuthTokenMessage","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","sendInitialSql","getInitialSql","currentTransactionDescriptor","SQL_BATCH","outgoingMessageStream","Readable","pipe","push","getIsolationLevelText","join","processedInitialSql","execSqlBatch","makeRequest","sqlTextOrProcedure","execSql","validateParameters","parameters","TYPES","NVarChar","output","length","precision","scale","makeParamsParameter","RPC_REQUEST","newBulkLoad","table","callbackOrOptions","execBulkLoad","bulkLoad","rows","executionStarted","streamingMode","firstRowWritten","rowStream","rowToPacketTransform","end","onCancel","BulkLoadPayload","getBulkInsertSql","BULK_LOAD","prepare","Int","preparing","handle","unprepare","execute","executeParameters","i","len","parameter","validate","callProcedure","beginTransaction","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitTransaction","commitPayload","rollbackTransaction","rollbackPayload","saveTransaction","savePayload","cb","useSavepoint","randomBytes","txDone","done","LOGGED_IN","txErr","packetType","canceled","connection","rowCount","rst","payloadStream","unpipe","ignore","paused","resume","resetConnection","SENT_CLIENT_REQUEST","reset","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","isTransientError","errors","isTransient","_default","module","prototype","_this","readMessage","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","concat","return","preloginPayload","encryptionString","_this$routingData","startTls","SENT_LOGIN7_WITH_FEDAUTH","SENT_LOGIN7_WITH_NTLM","catch","reconnect","retry","_this2","Login7TokenHandler","tokenStreamParser","loginAckReceived","LOGGED_IN_SENDING_INITIAL_SQL","_this3","NTLMAUTH_PKT","_this4","fedAuthInfoToken","stsurl","spn","tokenScope","URL","credentials","UsernamePasswordCredential","msiArgs","ManagedIdentityCredential","managedIdentityClientId","DefaultAzureCredential","ClientSecretCredential","tokenResponse","getToken","_this5","InitialSqlTokenHandler","_this6","_this$request","_this$request3","_this$request10","RequestTokenHandler","SENT_ATTENTION","onResume","onPause","_this$request2","pause","_this$request4","_this$request5","onEndOfMessage","_this$request6","_this$request7","_this$request8","_this$request9","sqlRequest","nextState","_this7","AttentionTokenHandler","attentionReceived"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/connection.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _dns = _interopRequireDefault(require(\"dns\"));\n\nvar _constants = _interopRequireDefault(require(\"constants\"));\n\nvar _stream = require(\"stream\");\n\nvar _identity = require(\"@azure/identity\");\n\nvar _bulkLoad = _interopRequireDefault(require(\"./bulk-load\"));\n\nvar _debug = _interopRequireDefault(require(\"./debug\"));\n\nvar _events = require(\"events\");\n\nvar _instanceLookup = require(\"./instance-lookup\");\n\nvar _transientErrorLookup = require(\"./transient-error-lookup\");\n\nvar _packet = require(\"./packet\");\n\nvar _preloginPayload = _interopRequireDefault(require(\"./prelogin-payload\"));\n\nvar _login7Payload = _interopRequireDefault(require(\"./login7-payload\"));\n\nvar _ntlmPayload = _interopRequireDefault(require(\"./ntlm-payload\"));\n\nvar _request = _interopRequireDefault(require(\"./request\"));\n\nvar _rpcrequestPayload = _interopRequireDefault(require(\"./rpcrequest-payload\"));\n\nvar _sqlbatchPayload = _interopRequireDefault(require(\"./sqlbatch-payload\"));\n\nvar _messageIo = _interopRequireDefault(require(\"./message-io\"));\n\nvar _tokenStreamParser = require(\"./token/token-stream-parser\");\n\nvar _transaction = require(\"./transaction\");\n\nvar _errors = require(\"./errors\");\n\nvar _connector = require(\"./connector\");\n\nvar _library = require(\"./library\");\n\nvar _tdsVersions = require(\"./tds-versions\");\n\nvar _message = _interopRequireDefault(require(\"./message\"));\n\nvar _ntlm = require(\"./ntlm\");\n\nvar _nodeAbortController = require(\"node-abort-controller\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _bulkLoadPayload = require(\"./bulk-load-payload\");\n\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\n\nvar _package = require(\"../package.json\");\n\nvar _url = require(\"url\");\n\nvar _handler = require(\"./token/handler\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\n\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\n\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\n\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\n\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\n\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\n\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\n\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\n\nconst DEFAULT_DATEFORMAT = 'mdy';\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nclass Connection extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config) {\n    super();\n    this.fedAuthRequired = void 0;\n    this.config = void 0;\n    this.secureContextOptions = void 0;\n    this.inTransaction = void 0;\n    this.transactionDescriptors = void 0;\n    this.transactionDepth = void 0;\n    this.isSqlBatch = void 0;\n    this.curTransientRetryCount = void 0;\n    this.transientErrorLookup = void 0;\n    this.closed = void 0;\n    this.loginError = void 0;\n    this.debug = void 0;\n    this.ntlmpacket = void 0;\n    this.ntlmpacketBuffer = void 0;\n    this.routingData = void 0;\n    this.messageIo = void 0;\n    this.state = void 0;\n    this.resetConnectionOnNextRequest = void 0;\n    this.request = void 0;\n    this.procReturnStatusValue = void 0;\n    this.socket = void 0;\n    this.messageBuffer = void 0;\n    this.connectTimer = void 0;\n    this.cancelTimer = void 0;\n    this.requestTimer = void 0;\n    this.retryTimer = void 0;\n    this._cancelAfterRequestSent = void 0;\n    this.databaseCollation = void 0;\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n    let authentication;\n\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,\n        // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connectionIsolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: _transaction.ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          throw new TypeError('The \"config.options.encrypt\" property must be of type boolean.');\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        (0, _transaction.assertValidIsolationLevel)(config.options.isolationLevel, 'config.options.isolationLevel');\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    this.secureContextOptions = this.config.options.cryptoCredentialsDetails;\n\n    if (this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      this.secureContextOptions = Object.create(this.secureContextOptions, {\n        secureOptions: {\n          value: _constants.default.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])]; // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.messageBuffer = Buffer.alloc(0);\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new _transientErrorLookup.TransientErrorLookup();\n    this.state = this.STATE.INITIALIZED;\n\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(_packet.TYPE.ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n\n  connect(connectListener) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new _errors.ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n\n    if (connectListener) {\n      const onConnect = err => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n\n      const onError = err => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * The server has reported that the charset has changed.\n   */\n\n\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n\n  emit(event, ...args) {\n    return super.emit(event, ...args);\n  }\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n\n\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n  /**\n   * @private\n   */\n\n\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal);\n    } else {\n      return (0, _instanceLookup.instanceLookup)({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }).then(port => {\n        process.nextTick(() => {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal);\n        });\n      }, err => {\n        this.clearConnectTimer();\n\n        if (err.name === 'AbortError') {\n          // Ignore the AbortError for now, this is still handled by the connectTimer firing\n          return;\n        }\n\n        process.nextTick(() => {\n          this.emit('connect', new _errors.ConnectionError(err.message, 'EINSTLOOKUP'));\n        });\n      });\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  cleanupConnection(cleanupType) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n\n      if (request) {\n        const err = new _errors.RequestError('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loginError = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createDebug() {\n    const debug = new _debug.default(this.config.options.debug);\n    debug.on('debug', message => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n  /**\n   * @private\n   */\n\n\n  createTokenStreamParser(message, handler) {\n    return new _tokenStreamParser.Parser(message, this.debug, handler, this.config.options);\n  }\n\n  connectOnPort(port, multiSubnetFailover, signal) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n    const connect = multiSubnetFailover ? _connector.connectInParallel : _connector.connectInSequence;\n    connect(connectOpts, _dns.default.lookup, signal).then(socket => {\n      process.nextTick(() => {\n        socket.on('error', error => {\n          this.socketError(error);\n        });\n        socket.on('close', () => {\n          this.socketClose();\n        });\n        socket.on('end', () => {\n          this.socketEnd();\n        });\n        socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n        this.messageIo = new _messageIo.default(socket, this.config.options.packetSize, this.debug);\n        this.messageIo.on('secure', cleartext => {\n          this.emit('secure', cleartext);\n        });\n        this.socket = socket;\n        this.closed = false;\n        this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n        this.sendPreLogin();\n        this.transitionTo(this.STATE.SENT_PRELOGIN);\n      });\n    }, err => {\n      this.clearConnectTimer();\n\n      if (err.name === 'AbortError') {\n        return;\n      }\n\n      process.nextTick(() => {\n        this.socketError(err);\n      });\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createConnectTimer() {\n    const controller = new _nodeAbortController.AbortController();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n  /**\n   * @private\n   */\n\n\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n\n    const request = this.request;\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n  /**\n   * @private\n   */\n\n\n  connectTimeout() {\n    const message = `Failed to connect to ${this.config.server}${this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', new _errors.ConnectionError(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n  /**\n   * @private\n   */\n\n\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', new _errors.ConnectionError(message, 'ETIMEOUT'));\n  }\n  /**\n   * @private\n   */\n\n\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request;\n    request.cancel();\n    const timeout = request.timeout !== undefined ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = new _errors.RequestError(message, 'ETIMEOUT');\n  }\n  /**\n   * @private\n   */\n\n\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n  /**\n   * @private\n   */\n\n\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n      this.connectTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n      this.cancelTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  transitionTo(newState) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getEventHandler(eventName) {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler;\n  }\n  /**\n   * @private\n   */\n\n\n  dispatchEvent(eventName, ...args) {\n    const handler = this.state.events[eventName];\n\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  socketError(error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const message = `Failed to connect to ${this.config.server}:${this.config.options.port} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', new _errors.ConnectionError(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', new _errors.ConnectionError(message, 'ESOCKET'));\n    }\n\n    this.dispatchEvent('socketError', error);\n  }\n  /**\n   * @private\n   */\n\n\n  socketEnd() {\n    this.debug.log('socket ended');\n\n    if (this.state !== this.STATE.FINAL) {\n      const error = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData.server + ':' + this.routingData.port);\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  sendPreLogin() {\n    const [, major, minor, build] = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(_package.version) ?? ['0.0.0', '0', '0', '0'];\n    const payload = new _preloginPayload.default({\n      encrypt: this.config.options.encrypt,\n      version: {\n        major: Number(major),\n        minor: Number(minor),\n        build: Number(build),\n        subbuild: 0\n      }\n    });\n    this.messageIo.sendMessage(_packet.TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  sendLogin7Packet() {\n    const payload = new _login7Payload.default({\n      tdsVersion: _tdsVersions.versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n    const {\n      authentication\n    } = this.config;\n\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-default':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = (0, _ntlm.createNTLMRequest)({\n          domain: authentication.options.domain\n        });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = this.config.options.workstationId || _os.default.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = _library.name;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n    this.routingData = undefined;\n    this.messageIo.sendMessage(_packet.TYPE.LOGIN7, payload.toBuffer());\n    this.debug.payload(function () {\n      return payload.toString('  ');\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  sendFedAuthTokenMessage(token) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(_packet.TYPE.FEDAUTH_TOKEN, data); // sent the fedAuth token message, the rest is similar to standard login 7\n\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n  /**\n   * @private\n   */\n\n\n  sendInitialSql() {\n    const payload = new _sqlbatchPayload.default(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n    const message = new _message.default({\n      type: _packet.TYPE.SQL_BATCH\n    });\n    this.messageIo.outgoingMessageStream.write(message);\n\n    _stream.Readable.from(payload).pipe(message);\n  }\n  /**\n   * @private\n   */\n\n\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n\n  execSqlBatch(request) {\n    this.makeRequest(request, _packet.TYPE.SQL_BATCH, new _sqlbatchPayload.default(request.sqlTextOrProcedure, this.currentTransactionDescriptor(), this.config.options));\n  }\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n\n  execSql(request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    if (request.parameters.length) {\n      parameters.push({\n        type: _dataType.TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n      parameters.push(...request.parameters);\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_executesql', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n\n\n  newBulkLoad(table, callbackOrOptions, callback) {\n    let options;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions;\n      options = {};\n    } else {\n      options = callbackOrOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n\n    return new _bulkLoad.default(table, this.databaseCollation, this.config.options, options, callback);\n  }\n  /**\n   * Execute a [[BulkLoad]].\n   *\n   * ```js\n   * // We want to perform a bulk load into a table with the following format:\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n   *\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n   *   // ...\n   * });\n   *\n   * // First, we need to specify the columns that we want to write to,\n   * // and their definitions. These definitions must match the actual table,\n   * // otherwise the bulk load will fail.\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n   *\n   * // Execute a bulk load with a predefined list of rows.\n   * //\n   * // Note that these rows are held in memory until the\n   * // bulk load was performed, so if you need to write a large\n   * // number of rows (e.g. by reading from a CSV file),\n   * // passing an `AsyncIterable` is advisable to keep memory usage low.\n   * connection.execBulkLoad(bulkLoad, [\n   *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n   *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n   * ]);\n   * ```\n   *\n   * @param bulkLoad A previously created [[BulkLoad]].\n   * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n   */\n\n\n  execBulkLoad(bulkLoad, rows) {\n    bulkLoad.executionStarted = true;\n\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n\n      const rowStream = _stream.Readable.from(rows); // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n\n\n      rowStream.on('error', err => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      }); // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n\n      bulkLoad.rowToPacketTransform.on('error', err => {\n        rowStream.destroy(err);\n      });\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n\n    const onCancel = () => {\n      request.cancel();\n    };\n\n    const payload = new _bulkLoadPayload.BulkLoadPayload(bulkLoad);\n    const request = new _request.default(bulkLoad.getBulkInsertSql(), error => {\n      bulkLoad.removeListener('cancel', onCancel);\n\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, _packet.TYPE.BULK_LOAD, payload);\n    });\n    bulkLoad.once('cancel', onCancel);\n    this.execSqlBatch(request);\n  }\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n\n\n  prepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    parameters.push({\n      type: _dataType.TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    request.preparing = true; // TODO: We need to clean up this event handler, otherwise this leaks memory\n\n    request.on('returnValue', (name, value) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = new _errors.RequestError(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_prepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n\n\n  unprepare(request) {\n    const parameters = [];\n    parameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_unprepare', parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n\n\n  execute(request, parameters) {\n    const executeParameters = [];\n    executeParameters.push({\n      type: _dataType.TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n        executeParameters.push({ ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n        });\n      }\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default('sp_execute', executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n\n\n  callProcedure(request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error) {\n      request.error = error;\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n      return;\n    }\n\n    this.makeRequest(request, _packet.TYPE.RPC_REQUEST, new _rpcrequestPayload.default(request.sqlTextOrProcedure, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n\n  beginTransaction(callback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    (0, _transaction.assertValidIsolationLevel)(isolationLevel, 'isolationLevel');\n    const transaction = new _transaction.Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SET TRANSACTION ISOLATION LEVEL ' + transaction.isolationLevelToTSQL() + ';BEGIN TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, err => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n\n\n  commitTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('COMMIT TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n\n  rollbackTransaction(callback, name = '') {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('ROLLBACK TRAN ' + transaction.name, err => {\n        this.transactionDepth--;\n\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n\n\n  saveTransaction(callback, name) {\n    const transaction = new _transaction.Transaction(name);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new _request.default('SAVE TRAN ' + transaction.name, err => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n\n    const request = new _request.default(undefined, callback);\n    return this.makeRequest(request, _packet.TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n\n\n  transaction(cb, isolationLevel) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n\n    const name = '_tedious_' + _crypto.default.randomBytes(10).toString('hex');\n\n    const txDone = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction(txErr => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n\n        done(null, ...args);\n      } else {\n        this.commitTransaction(txErr => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new _request.default('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), err => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction(err => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  makeRequest(request, packetType, payload) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback(new _errors.RequestError(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === _packet.TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection = this;\n      request.rowCount = 0;\n      request.rows = [];\n      request.rst = [];\n\n      const onCancel = () => {\n        payloadStream.unpipe(message);\n        payloadStream.destroy(new _errors.RequestError('Canceled.', 'ECANCEL')); // set the ignore bit and end the message.\n\n        message.ignore = true;\n        message.end();\n\n        if (request instanceof _request.default && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n\n      request.once('cancel', onCancel);\n      this.createRequestTimer();\n      const message = new _message.default({\n        type: packetType,\n        resetConnection: this.resetConnectionOnNextRequest\n      });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function () {\n          return payload.toString('  ');\n        });\n      });\n\n      const payloadStream = _stream.Readable.from(payload);\n\n      payloadStream.once('error', error => {\n        payloadStream.unpipe(message); // Only set a request error if no error was set yet.\n\n        request.error ?? (request.error = error);\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n  /**\n   * Cancel currently executed request.\n   */\n\n\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n\n\n  reset(callback) {\n    const request = new _request.default(this.getInitialSql(), err => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n  /**\n   * @private\n   */\n\n\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n  /**\n   * @private\n   */\n\n\n  getIsolationLevelText(isolationLevel) {\n    switch (isolationLevel) {\n      case _transaction.ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n\n      case _transaction.ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n\n      case _transaction.ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n\n      case _transaction.ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n\n      default:\n        return 'read committed';\n    }\n  }\n\n}\n\nfunction isTransientError(error) {\n  if (error instanceof _esAggregateError.default) {\n    error = error.errors[0];\n  }\n\n  return error instanceof _errors.ConnectionError && !!error.isTransient;\n}\n\nvar _default = Connection;\nexports.default = _default;\nmodule.exports = Connection;\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function () {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function () {\n      (async () => {\n        let messageBuffer = Buffer.alloc(0);\n        let message;\n\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n\n        for await (const data of message) {\n          messageBuffer = Buffer.concat([messageBuffer, data]);\n        }\n\n        const preloginPayload = new _preloginPayload.default(messageBuffer);\n        this.debug.payload(function () {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n\n        if (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ') {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', new _errors.ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          try {\n            var _this$routingData;\n\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n            await this.messageIo.startTls(this.secureContextOptions, ((_this$routingData = this.routingData) === null || _this$routingData === void 0 ? void 0 : _this$routingData.server) ?? this.config.server, this.config.options.trustServerCertificate);\n          } catch (err) {\n            return this.socketError(err);\n          }\n        }\n\n        this.sendLogin7Packet();\n        const {\n          authentication\n        } = this.config;\n\n        switch (authentication.type) {\n          case 'azure-active-directory-password':\n          case 'azure-active-directory-msi-vm':\n          case 'azure-active-directory-msi-app-service':\n          case 'azure-active-directory-service-principal-secret':\n          case 'azure-active-directory-default':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            break;\n\n          case 'ntlm':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            break;\n\n          default:\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            break;\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function () {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function () {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function () {},\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function () {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function () {\n      (async () => {\n        let message;\n\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n\n        const handler = new _handler.Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await (0, _events.once)(tokenStreamParser, 'end');\n\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function () {\n      (async () => {\n        while (true) {\n          let message;\n\n          try {\n            message = await this.messageIo.readMessage();\n          } catch (err) {\n            return this.socketError(err);\n          }\n\n          const handler = new _handler.Login7TokenHandler(this);\n          const tokenStreamParser = this.createTokenStreamParser(message, handler);\n          await (0, _events.once)(tokenStreamParser, 'end');\n\n          if (handler.loginAckReceived) {\n            if (handler.routingData) {\n              this.routingData = handler.routingData;\n              return this.transitionTo(this.STATE.REROUTING);\n            } else {\n              return this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.ntlmpacket) {\n            const authentication = this.config.authentication;\n            const payload = new _ntlmPayload.default({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: this.ntlmpacket\n            });\n            this.messageIo.sendMessage(_packet.TYPE.NTLMAUTH_PKT, payload.data);\n            this.debug.payload(function () {\n              return payload.toString('  ');\n            });\n            this.ntlmpacket = undefined;\n          } else if (this.loginError) {\n            if (isTransientError(this.loginError)) {\n              this.debug.log('Initiating retry on transient error');\n              return this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              return this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n            return this.transitionTo(this.STATE.FINAL);\n          }\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function () {\n      (async () => {\n        let message;\n\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n\n        const handler = new _handler.Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await (0, _events.once)(tokenStreamParser, 'end');\n\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n\n          return;\n        }\n\n        const fedAuthInfoToken = handler.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication;\n          const tokenScope = new _url.URL('/.default', fedAuthInfoToken.spn).toString();\n          let credentials;\n\n          switch (authentication.type) {\n            case 'azure-active-directory-password':\n              credentials = new _identity.UsernamePasswordCredential(authentication.options.tenantId ?? 'common', authentication.options.clientId, authentication.options.userName, authentication.options.password);\n              break;\n\n            case 'azure-active-directory-msi-vm':\n            case 'azure-active-directory-msi-app-service':\n              const msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = new _identity.ManagedIdentityCredential(...msiArgs);\n              break;\n\n            case 'azure-active-directory-default':\n              const args = authentication.options.clientId ? {\n                managedIdentityClientId: authentication.options.clientId\n              } : {};\n              credentials = new _identity.DefaultAzureCredential(args);\n              break;\n\n            case 'azure-active-directory-service-principal-secret':\n              credentials = new _identity.ClientSecretCredential(authentication.options.tenantId, authentication.options.clientId, authentication.options.clientSecret);\n              break;\n          }\n\n          let tokenResponse;\n\n          try {\n            tokenResponse = await credentials.getToken(tokenScope);\n          } catch (err) {\n            this.loginError = new _esAggregateError.default([new _errors.ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), err]);\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n            return;\n          }\n\n          const token = tokenResponse.token;\n          this.sendFedAuthTokenMessage(token);\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new _errors.ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function () {\n      (async () => {\n        this.sendInitialSql();\n        let message;\n\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n\n        const tokenStreamParser = this.createTokenStreamParser(message, new _handler.InitialSqlTokenHandler(this));\n        await (0, _events.once)(tokenStreamParser, 'end');\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function () {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function () {\n      (async () => {\n        var _this$request, _this$request3, _this$request10;\n\n        let message;\n\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        } // request timer is stopped on first data package\n\n\n        this.clearRequestTimer();\n        const tokenStreamParser = this.createTokenStreamParser(message, new _handler.RequestTokenHandler(this, this.request)); // If the request was canceled and we have a `cancelTimer`\n        // defined, we send a attention message after the\n        // request message was fully sent off.\n        //\n        // We already started consuming the current message\n        // (but all the token handlers should be no-ops), and\n        // need to ensure the next message is handled by the\n        // `SENT_ATTENTION` state.\n\n        if ((_this$request = this.request) !== null && _this$request !== void 0 && _this$request.canceled && this.cancelTimer) {\n          return this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n\n        const onPause = () => {\n          var _this$request2;\n\n          tokenStreamParser.pause();\n          (_this$request2 = this.request) === null || _this$request2 === void 0 ? void 0 : _this$request2.once('resume', onResume);\n        };\n\n        (_this$request3 = this.request) === null || _this$request3 === void 0 ? void 0 : _this$request3.on('pause', onPause);\n\n        if (this.request instanceof _request.default && this.request.paused) {\n          onPause();\n        }\n\n        const onCancel = () => {\n          var _this$request4, _this$request5;\n\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n\n          if (this.request instanceof _request.default && this.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            this.request.resume();\n          }\n\n          (_this$request4 = this.request) === null || _this$request4 === void 0 ? void 0 : _this$request4.removeListener('pause', onPause);\n          (_this$request5 = this.request) === null || _this$request5 === void 0 ? void 0 : _this$request5.removeListener('resume', onResume); // The `_cancelAfterRequestSent` callback will have sent a\n          // attention message, so now we need to also switch to\n          // the `SENT_ATTENTION` state to make sure the attention ack\n          // message is processed correctly.\n\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        };\n\n        const onEndOfMessage = () => {\n          var _this$request6, _this$request7, _this$request8, _this$request9;\n\n          (_this$request6 = this.request) === null || _this$request6 === void 0 ? void 0 : _this$request6.removeListener('cancel', this._cancelAfterRequestSent);\n          (_this$request7 = this.request) === null || _this$request7 === void 0 ? void 0 : _this$request7.removeListener('cancel', onCancel);\n          (_this$request8 = this.request) === null || _this$request8 === void 0 ? void 0 : _this$request8.removeListener('pause', onPause);\n          (_this$request9 = this.request) === null || _this$request9 === void 0 ? void 0 : _this$request9.removeListener('resume', onResume);\n          this.transitionTo(this.STATE.LOGGED_IN);\n          const sqlRequest = this.request;\n          this.request = undefined;\n\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n            this.inTransaction = false;\n          }\n\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n\n        tokenStreamParser.once('end', onEndOfMessage);\n        (_this$request10 = this.request) === null || _this$request10 === void 0 ? void 0 : _this$request10.once('cancel', onCancel);\n      })();\n    },\n    exit: function (nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function () {\n      (async () => {\n        let message;\n\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err) {\n          return this.socketError(err);\n        }\n\n        const handler = new _handler.AttentionTokenHandler(this, this.request);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await (0, _events.once)(tokenStreamParser, 'end'); // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n\n        if (handler.attentionReceived) {\n          this.clearCancelTimer();\n          const sqlRequest = this.request;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof _errors.RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback(new _errors.RequestError('Canceled.', 'ECANCEL'));\n          }\n        }\n      })().catch(err => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function (err) {\n        const sqlRequest = this.request;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function () {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function () {// Do nothing, as the timer should be cleaned up.\n      },\n      message: function () {// Do nothing\n      },\n      socketError: function () {// Do nothing\n      }\n    }\n  }\n};\n"],"mappings":"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MAAMC,8BAA8B,GAAG,GAAG;AAC1C;AACA;AACA;;AAEA,MAAMC,mBAAmB,GAAG,CAAC,GAAG,IAAI;AACpC;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,UAAU;AACnC;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAC3B;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,IAAI;AACzB;AACA;AACA;;AAEA,MAAMC,mBAAmB,GAAG,KAAK;AACjC;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,YAAY;AACrC;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAG,KAAK;;AAEhC;AACA;AACA;AACA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,CAAC;EACTC,QAAQ,EAAE,CAAC;EACXC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAAS5C,OAAO,CAAC6C,YAAY,CAAC;EAC5C;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,MAAM,EAAE;IAClB,KAAK,EAAE;IACP,IAAI,CAACC,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAACD,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACE,oBAAoB,GAAG,KAAK,CAAC;IAClC,IAAI,CAACC,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAACC,sBAAsB,GAAG,KAAK,CAAC;IACpC,IAAI,CAACC,gBAAgB,GAAG,KAAK,CAAC;IAC9B,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,sBAAsB,GAAG,KAAK,CAAC;IACpC,IAAI,CAACC,oBAAoB,GAAG,KAAK,CAAC;IAClC,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,gBAAgB,GAAG,KAAK,CAAC;IAC9B,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC;IACvB,IAAI,CAACC,KAAK,GAAG,KAAK,CAAC;IACnB,IAAI,CAACC,4BAA4B,GAAG,KAAK,CAAC;IAC1C,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAACC,qBAAqB,GAAG,KAAK,CAAC;IACnC,IAAI,CAACC,MAAM,GAAG,KAAK,CAAC;IACpB,IAAI,CAACC,aAAa,GAAG,KAAK,CAAC;IAC3B,IAAI,CAACC,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAACC,YAAY,GAAG,KAAK,CAAC;IAC1B,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC;IACxB,IAAI,CAACC,uBAAuB,GAAG,KAAK,CAAC;IACrC,IAAI,CAACC,iBAAiB,GAAG,KAAK,CAAC;IAE/B,IAAI,OAAO3B,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,IAAI,EAAE;MACjD,MAAM,IAAI4B,SAAS,CAAC,+DAA+D,CAAC;IACtF;IAEA,IAAI,OAAO5B,MAAM,CAAC6B,MAAM,KAAK,QAAQ,EAAE;MACrC,MAAM,IAAID,SAAS,CAAC,sEAAsE,CAAC;IAC7F;IAEA,IAAI,CAAC3B,eAAe,GAAG,KAAK;IAC5B,IAAI6B,cAAc;IAElB,IAAI9B,MAAM,CAAC8B,cAAc,KAAKC,SAAS,EAAE;MACvC,IAAI,OAAO/B,MAAM,CAAC8B,cAAc,KAAK,QAAQ,IAAI9B,MAAM,CAAC8B,cAAc,KAAK,IAAI,EAAE;QAC/E,MAAM,IAAIF,SAAS,CAAC,8DAA8D,CAAC;MACrF;MAEA,MAAMI,IAAI,GAAGhC,MAAM,CAAC8B,cAAc,CAACE,IAAI;MACvC,MAAMC,OAAO,GAAGjC,MAAM,CAAC8B,cAAc,CAACG,OAAO,KAAKF,SAAS,GAAG,CAAC,CAAC,GAAG/B,MAAM,CAAC8B,cAAc,CAACG,OAAO;MAEhG,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;QAC5B,MAAM,IAAIJ,SAAS,CAAC,mEAAmE,CAAC;MAC1F;MAEA,IAAII,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,iCAAiC,IAAIA,IAAI,KAAK,qCAAqC,IAAIA,IAAI,KAAK,+BAA+B,IAAIA,IAAI,KAAK,wCAAwC,IAAIA,IAAI,KAAK,iDAAiD,IAAIA,IAAI,KAAK,gCAAgC,EAAE;QACrV,MAAM,IAAIJ,SAAS,CAAC,kSAAkS,CAAC;MACzT;MAEA,IAAI,OAAOK,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;QACnD,MAAM,IAAIL,SAAS,CAAC,sEAAsE,CAAC;MAC7F;MAEA,IAAII,IAAI,KAAK,MAAM,EAAE;QACnB,IAAI,OAAOC,OAAO,CAACC,MAAM,KAAK,QAAQ,EAAE;UACtC,MAAM,IAAIN,SAAS,CAAC,6EAA6E,CAAC;QACpG;QAEA,IAAIK,OAAO,CAACE,QAAQ,KAAKJ,SAAS,IAAI,OAAOE,OAAO,CAACE,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIP,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAIK,OAAO,CAACG,QAAQ,KAAKL,SAAS,IAAI,OAAOE,OAAO,CAACG,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIR,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,MAAM;UACZC,OAAO,EAAE;YACPE,QAAQ,EAAEF,OAAO,CAACE,QAAQ;YAC1BC,QAAQ,EAAEH,OAAO,CAACG,QAAQ;YAC1BF,MAAM,EAAED,OAAO,CAACC,MAAM,IAAID,OAAO,CAACC,MAAM,CAACG,WAAW;UACtD;QACF,CAAC;MACH,CAAC,MAAM,IAAIL,IAAI,KAAK,iCAAiC,EAAE;QACrD,IAAI,OAAOC,OAAO,CAACK,QAAQ,KAAK,QAAQ,EAAE;UACxC,MAAM,IAAIV,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAIK,OAAO,CAACE,QAAQ,KAAKJ,SAAS,IAAI,OAAOE,OAAO,CAACE,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIP,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAIK,OAAO,CAACG,QAAQ,KAAKL,SAAS,IAAI,OAAOE,OAAO,CAACG,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIR,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAIK,OAAO,CAACM,QAAQ,KAAKR,SAAS,IAAI,OAAOE,OAAO,CAACM,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIX,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,iCAAiC;UACvCC,OAAO,EAAE;YACPE,QAAQ,EAAEF,OAAO,CAACE,QAAQ;YAC1BC,QAAQ,EAAEH,OAAO,CAACG,QAAQ;YAC1BG,QAAQ,EAAEN,OAAO,CAACM,QAAQ;YAC1BD,QAAQ,EAAEL,OAAO,CAACK;UACpB;QACF,CAAC;MACH,CAAC,MAAM,IAAIN,IAAI,KAAK,qCAAqC,EAAE;QACzD,IAAI,OAAOC,OAAO,CAACO,KAAK,KAAK,QAAQ,EAAE;UACrC,MAAM,IAAIZ,SAAS,CAAC,4EAA4E,CAAC;QACnG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,qCAAqC;UAC3CC,OAAO,EAAE;YACPO,KAAK,EAAEP,OAAO,CAACO;UACjB;QACF,CAAC;MACH,CAAC,MAAM,IAAIR,IAAI,KAAK,+BAA+B,EAAE;QACnD,IAAIC,OAAO,CAACK,QAAQ,KAAKP,SAAS,IAAI,OAAOE,OAAO,CAACK,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIV,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,+BAA+B;UACrCC,OAAO,EAAE;YACPK,QAAQ,EAAEL,OAAO,CAACK;UACpB;QACF,CAAC;MACH,CAAC,MAAM,IAAIN,IAAI,KAAK,gCAAgC,EAAE;QACpD,IAAIC,OAAO,CAACK,QAAQ,KAAKP,SAAS,IAAI,OAAOE,OAAO,CAACK,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIV,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,gCAAgC;UACtCC,OAAO,EAAE;YACPK,QAAQ,EAAEL,OAAO,CAACK;UACpB;QACF,CAAC;MACH,CAAC,MAAM,IAAIN,IAAI,KAAK,wCAAwC,EAAE;QAC5D,IAAIC,OAAO,CAACK,QAAQ,KAAKP,SAAS,IAAI,OAAOE,OAAO,CAACK,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIV,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,wCAAwC;UAC9CC,OAAO,EAAE;YACPK,QAAQ,EAAEL,OAAO,CAACK;UACpB;QACF,CAAC;MACH,CAAC,MAAM,IAAIN,IAAI,KAAK,iDAAiD,EAAE;QACrE,IAAI,OAAOC,OAAO,CAACK,QAAQ,KAAK,QAAQ,EAAE;UACxC,MAAM,IAAIV,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAI,OAAOK,OAAO,CAACQ,YAAY,KAAK,QAAQ,EAAE;UAC5C,MAAM,IAAIb,SAAS,CAAC,mFAAmF,CAAC;QAC1G;QAEA,IAAI,OAAOK,OAAO,CAACM,QAAQ,KAAK,QAAQ,EAAE;UACxC,MAAM,IAAIX,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,iDAAiD;UACvDC,OAAO,EAAE;YACPK,QAAQ,EAAEL,OAAO,CAACK,QAAQ;YAC1BG,YAAY,EAAER,OAAO,CAACQ,YAAY;YAClCF,QAAQ,EAAEN,OAAO,CAACM;UACpB;QACF,CAAC;MACH,CAAC,MAAM;QACL,IAAIN,OAAO,CAACE,QAAQ,KAAKJ,SAAS,IAAI,OAAOE,OAAO,CAACE,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIP,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAIK,OAAO,CAACG,QAAQ,KAAKL,SAAS,IAAI,OAAOE,OAAO,CAACG,QAAQ,KAAK,QAAQ,EAAE;UAC1E,MAAM,IAAIR,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEAE,cAAc,GAAG;UACfE,IAAI,EAAE,SAAS;UACfC,OAAO,EAAE;YACPE,QAAQ,EAAEF,OAAO,CAACE,QAAQ;YAC1BC,QAAQ,EAAEH,OAAO,CAACG;UACpB;QACF,CAAC;MACH;IACF,CAAC,MAAM;MACLN,cAAc,GAAG;QACfE,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE;UACPE,QAAQ,EAAEJ,SAAS;UACnBK,QAAQ,EAAEL;QACZ;MACF,CAAC;IACH;IAEA,IAAI,CAAC/B,MAAM,GAAG;MACZ6B,MAAM,EAAE7B,MAAM,CAAC6B,MAAM;MACrBC,cAAc,EAAEA,cAAc;MAC9BG,OAAO,EAAE;QACPS,uBAAuB,EAAE,KAAK;QAC9BC,OAAO,EAAEZ,SAAS;QAClBa,gBAAgB,EAAE,KAAK;QACvBC,aAAa,EAAE7D,sBAAsB;QACrC8D,2BAA2B,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;QAC/C;QACAC,uBAAuB,EAAE,KAAK;QAC9BC,kBAAkB,EAAEjB,SAAS;QAC7BkB,uBAAuB,EAAEhE,8BAA8B;QACvDiE,cAAc,EAAEpE,uBAAuB;QACvCqE,wBAAwB,EAAEtF,YAAY,CAACuF,eAAe,CAACC,cAAc;QACrEC,wBAAwB,EAAE,CAAC,CAAC;QAC5BC,QAAQ,EAAExB,SAAS;QACnByB,SAAS,EAAEpE,iBAAiB;QAC5BqE,UAAU,EAAEjE,kBAAkB;QAC9BmB,KAAK,EAAE;UACL+C,IAAI,EAAE,KAAK;UACXC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE,KAAK;UACdpB,KAAK,EAAE;QACT,CAAC;QACDqB,cAAc,EAAE,IAAI;QACpBC,qBAAqB,EAAE,IAAI;QAC3BC,iBAAiB,EAAE,IAAI;QACvBC,kBAAkB,EAAE,IAAI;QACxBC,gBAAgB,EAAE,IAAI;QACtBC,0BAA0B,EAAE,IAAI;QAChCC,yBAAyB,EAAE,IAAI;QAC/BC,0BAA0B,EAAE,KAAK;QACjCC,uBAAuB,EAAE,KAAK;QAC9BC,sBAAsB,EAAE,IAAI;QAC5BC,OAAO,EAAE,IAAI;QACbC,mBAAmB,EAAE,KAAK;QAC1BC,2BAA2B,EAAE1C,SAAS;QACtC2C,YAAY,EAAE3C,SAAS;QACvB4C,cAAc,EAAE9G,YAAY,CAACuF,eAAe,CAACC,cAAc;QAC3DuB,QAAQ,EAAErF,gBAAgB;QAC1BsF,YAAY,EAAE9C,SAAS;QACvB+C,2BAA2B,EAAE,CAAC;QAC9BC,mBAAmB,EAAE,KAAK;QAC1BC,UAAU,EAAE9F,mBAAmB;QAC/B+F,IAAI,EAAE5F,YAAY;QAClB6F,cAAc,EAAE,KAAK;QACrBC,cAAc,EAAEpG,8BAA8B;QAC9CqG,mBAAmB,EAAE,KAAK;QAC1BC,gCAAgC,EAAE,KAAK;QACvCC,UAAU,EAAEvD,SAAS;QACrBwD,8BAA8B,EAAE,KAAK;QACrCC,UAAU,EAAElG,mBAAmB;QAC/BmG,QAAQ,EAAEtG,gBAAgB;QAC1BuG,mBAAmB,EAAE3D,SAAS;QAC9B4D,sBAAsB,EAAE,KAAK;QAC7BC,cAAc,EAAE,KAAK;QACrBC,MAAM,EAAE,IAAI;QACZC,aAAa,EAAE/D,SAAS;QACxBgE,cAAc,EAAE;MAClB;IACF,CAAC;IAED,IAAI/F,MAAM,CAACiC,OAAO,EAAE;MAClB,IAAIjC,MAAM,CAACiC,OAAO,CAACgD,IAAI,IAAIjF,MAAM,CAACiC,OAAO,CAACyC,YAAY,EAAE;QACtD,MAAM,IAAIsB,KAAK,CAAC,oDAAoD,GAAGhG,MAAM,CAACiC,OAAO,CAACgD,IAAI,GAAG,OAAO,GAAGjF,MAAM,CAACiC,OAAO,CAACyC,YAAY,GAAG,WAAW,CAAC;MACnJ;MAEA,IAAI1E,MAAM,CAACiC,OAAO,CAACS,uBAAuB,KAAKX,SAAS,EAAE;QACxD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACS,uBAAuB,KAAK,SAAS,IAAI1C,MAAM,CAACiC,OAAO,CAACS,uBAAuB,KAAK,IAAI,EAAE;UAClH,MAAM,IAAId,SAAS,CAAC,uFAAuF,CAAC;QAC9G;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACS,uBAAuB,GAAG1C,MAAM,CAACiC,OAAO,CAACS,uBAAuB;MACtF;MAEA,IAAI1C,MAAM,CAACiC,OAAO,CAACU,OAAO,KAAKZ,SAAS,EAAE;QACxC,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACU,OAAO,KAAK,QAAQ,EAAE;UAC9C,MAAM,IAAIf,SAAS,CAAC,+DAA+D,CAAC;QACtF;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACU,OAAO,GAAG3C,MAAM,CAACiC,OAAO,CAACU,OAAO;MACtD;MAEA,IAAI3C,MAAM,CAACiC,OAAO,CAACW,gBAAgB,KAAKb,SAAS,EAAE;QACjD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACW,gBAAgB,KAAK,SAAS,EAAE;UACxD,MAAM,IAAIhB,SAAS,CAAC,yEAAyE,CAAC;QAChG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACW,gBAAgB,GAAG5C,MAAM,CAACiC,OAAO,CAACW,gBAAgB;MACxE;MAEA,IAAI5C,MAAM,CAACiC,OAAO,CAACY,aAAa,KAAKd,SAAS,EAAE;QAC9C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACY,aAAa,KAAK,QAAQ,EAAE;UACpD,MAAM,IAAIjB,SAAS,CAAC,qEAAqE,CAAC;QAC5F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACY,aAAa,GAAG7C,MAAM,CAACiC,OAAO,CAACY,aAAa;MAClE;MAEA,IAAI7C,MAAM,CAACiC,OAAO,CAACe,kBAAkB,EAAE;QACrC,IAAI,OAAOhD,MAAM,CAACiC,OAAO,CAACe,kBAAkB,KAAK,UAAU,EAAE;UAC3D,MAAM,IAAIpB,SAAS,CAAC,uEAAuE,CAAC;QAC9F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACe,kBAAkB,GAAGhD,MAAM,CAACiC,OAAO,CAACe,kBAAkB;MAC5E;MAEA,IAAIhD,MAAM,CAACiC,OAAO,CAACkB,wBAAwB,KAAKpB,SAAS,EAAE;QACzD,CAAC,CAAC,EAAElE,YAAY,CAACoI,yBAAyB,EAAEjG,MAAM,CAACiC,OAAO,CAACkB,wBAAwB,EAAE,yCAAyC,CAAC;QAC/H,IAAI,CAACnD,MAAM,CAACiC,OAAO,CAACkB,wBAAwB,GAAGnD,MAAM,CAACiC,OAAO,CAACkB,wBAAwB;MACxF;MAEA,IAAInD,MAAM,CAACiC,OAAO,CAACiB,cAAc,KAAKnB,SAAS,EAAE;QAC/C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACiB,cAAc,KAAK,QAAQ,EAAE;UACrD,MAAM,IAAItB,SAAS,CAAC,sEAAsE,CAAC;QAC7F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACiB,cAAc,GAAGlD,MAAM,CAACiC,OAAO,CAACiB,cAAc;MACpE;MAEA,IAAIlD,MAAM,CAACiC,OAAO,CAACqB,wBAAwB,KAAKvB,SAAS,EAAE;QACzD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACqB,wBAAwB,KAAK,QAAQ,IAAItD,MAAM,CAACiC,OAAO,CAACqB,wBAAwB,KAAK,IAAI,EAAE;UACnH,MAAM,IAAI1B,SAAS,CAAC,gFAAgF,CAAC;QACvG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACqB,wBAAwB,GAAGtD,MAAM,CAACiC,OAAO,CAACqB,wBAAwB;MACxF;MAEA,IAAItD,MAAM,CAACiC,OAAO,CAACsB,QAAQ,KAAKxB,SAAS,EAAE;QACzC,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACsB,QAAQ,KAAK,QAAQ,EAAE;UAC/C,MAAM,IAAI3B,SAAS,CAAC,gEAAgE,CAAC;QACvF;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACsB,QAAQ,GAAGvD,MAAM,CAACiC,OAAO,CAACsB,QAAQ;MACxD;MAEA,IAAIvD,MAAM,CAACiC,OAAO,CAACuB,SAAS,KAAKzB,SAAS,EAAE;QAC1C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACuB,SAAS,KAAK,QAAQ,IAAIxD,MAAM,CAACiC,OAAO,CAACuB,SAAS,KAAK,IAAI,EAAE;UACrF,MAAM,IAAI5B,SAAS,CAAC,iEAAiE,CAAC;QACxF;QAEA,IAAI5B,MAAM,CAACiC,OAAO,CAACuB,SAAS,KAAK,IAAI,KAAKxD,MAAM,CAACiC,OAAO,CAACuB,SAAS,GAAG,CAAC,IAAIxD,MAAM,CAACiC,OAAO,CAACuB,SAAS,GAAG,CAAC,CAAC,EAAE;UACvG,MAAM,IAAI0C,UAAU,CAAC,+DAA+D,CAAC;QACvF;QAEA,IAAI,CAAClG,MAAM,CAACiC,OAAO,CAACuB,SAAS,GAAGxD,MAAM,CAACiC,OAAO,CAACuB,SAAS;MAC1D;MAEA,IAAIxD,MAAM,CAACiC,OAAO,CAACwB,UAAU,KAAK1B,SAAS,EAAE;QAC3C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACwB,UAAU,KAAK,QAAQ,IAAIzD,MAAM,CAACiC,OAAO,CAACwB,UAAU,KAAK,IAAI,EAAE;UACvF,MAAM,IAAI7B,SAAS,CAAC,0EAA0E,CAAC;QACjG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACwB,UAAU,GAAGzD,MAAM,CAACiC,OAAO,CAACwB,UAAU;MAC5D;MAEA,IAAIzD,MAAM,CAACiC,OAAO,CAACtB,KAAK,EAAE;QACxB,IAAIX,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC+C,IAAI,KAAK3B,SAAS,EAAE;UAC3C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC+C,IAAI,KAAK,SAAS,EAAE;YAClD,MAAM,IAAI9B,SAAS,CAAC,mEAAmE,CAAC;UAC1F;UAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC+C,IAAI,GAAG1D,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC+C,IAAI;QAC5D;QAEA,IAAI1D,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACgD,MAAM,KAAK5B,SAAS,EAAE;UAC7C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACgD,MAAM,KAAK,SAAS,EAAE;YACpD,MAAM,IAAI/B,SAAS,CAAC,qEAAqE,CAAC;UAC5F;UAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACgD,MAAM,GAAG3D,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACgD,MAAM;QAChE;QAEA,IAAI3D,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACiD,OAAO,KAAK7B,SAAS,EAAE;UAC9C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACiD,OAAO,KAAK,SAAS,EAAE;YACrD,MAAM,IAAIhC,SAAS,CAAC,sEAAsE,CAAC;UAC7F;UAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACiD,OAAO,GAAG5D,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAACiD,OAAO;QAClE;QAEA,IAAI5D,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC6B,KAAK,KAAKT,SAAS,EAAE;UAC5C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC6B,KAAK,KAAK,SAAS,EAAE;YACnD,MAAM,IAAIZ,SAAS,CAAC,oEAAoE,CAAC;UAC3F;UAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC6B,KAAK,GAAGxC,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC6B,KAAK;QAC9D;MACF;MAEA,IAAIxC,MAAM,CAACiC,OAAO,CAAC4B,cAAc,KAAK9B,SAAS,EAAE;QAC/C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC4B,cAAc,KAAK,SAAS,IAAI7D,MAAM,CAACiC,OAAO,CAAC4B,cAAc,KAAK,IAAI,EAAE;UAChG,MAAM,IAAIjC,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC4B,cAAc,GAAG7D,MAAM,CAACiC,OAAO,CAAC4B,cAAc;MACpE;MAEA,IAAI7D,MAAM,CAACiC,OAAO,CAAC6B,qBAAqB,KAAK/B,SAAS,EAAE;QACtD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC6B,qBAAqB,KAAK,SAAS,IAAI9D,MAAM,CAACiC,OAAO,CAAC6B,qBAAqB,KAAK,IAAI,EAAE;UAC9G,MAAM,IAAIlC,SAAS,CAAC,sFAAsF,CAAC;QAC7G;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC6B,qBAAqB,GAAG9D,MAAM,CAACiC,OAAO,CAAC6B,qBAAqB;MAClF;MAEA,IAAI9D,MAAM,CAACiC,OAAO,CAAC8B,iBAAiB,KAAKhC,SAAS,EAAE;QAClD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC8B,iBAAiB,KAAK,SAAS,IAAI/D,MAAM,CAACiC,OAAO,CAAC8B,iBAAiB,KAAK,IAAI,EAAE;UACtG,MAAM,IAAInC,SAAS,CAAC,kFAAkF,CAAC;QACzG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC8B,iBAAiB,GAAG/D,MAAM,CAACiC,OAAO,CAAC8B,iBAAiB;MAC1E;MAEA,IAAI/D,MAAM,CAACiC,OAAO,CAAC+B,kBAAkB,KAAKjC,SAAS,EAAE;QACnD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC+B,kBAAkB,KAAK,SAAS,IAAIhE,MAAM,CAACiC,OAAO,CAAC+B,kBAAkB,KAAK,IAAI,EAAE;UACxG,MAAM,IAAIpC,SAAS,CAAC,mFAAmF,CAAC;QAC1G;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC+B,kBAAkB,GAAGhE,MAAM,CAACiC,OAAO,CAAC+B,kBAAkB;MAC5E;MAEA,IAAIhE,MAAM,CAACiC,OAAO,CAACgC,gBAAgB,KAAKlC,SAAS,EAAE;QACjD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACgC,gBAAgB,KAAK,SAAS,IAAIjE,MAAM,CAACiC,OAAO,CAACgC,gBAAgB,KAAK,IAAI,EAAE;UACpG,MAAM,IAAIrC,SAAS,CAAC,iFAAiF,CAAC;QACxG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACgC,gBAAgB,GAAGjE,MAAM,CAACiC,OAAO,CAACgC,gBAAgB;MACxE;MAEA,IAAIjE,MAAM,CAACiC,OAAO,CAACiC,0BAA0B,KAAKnC,SAAS,EAAE;QAC3D,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACiC,0BAA0B,KAAK,SAAS,IAAIlE,MAAM,CAACiC,OAAO,CAACiC,0BAA0B,KAAK,IAAI,EAAE;UACxH,MAAM,IAAItC,SAAS,CAAC,2FAA2F,CAAC;QAClH;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACiC,0BAA0B,GAAGlE,MAAM,CAACiC,OAAO,CAACiC,0BAA0B;MAC5F;MAEA,IAAIlE,MAAM,CAACiC,OAAO,CAACkC,yBAAyB,KAAKpC,SAAS,EAAE;QAC1D,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACkC,yBAAyB,KAAK,SAAS,IAAInE,MAAM,CAACiC,OAAO,CAACkC,yBAAyB,KAAK,IAAI,EAAE;UACtH,MAAM,IAAIvC,SAAS,CAAC,0FAA0F,CAAC;QACjH;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACkC,yBAAyB,GAAGnE,MAAM,CAACiC,OAAO,CAACkC,yBAAyB;MAC1F;MAEA,IAAInE,MAAM,CAACiC,OAAO,CAACmC,0BAA0B,KAAKrC,SAAS,EAAE;QAC3D,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACmC,0BAA0B,KAAK,SAAS,IAAIpE,MAAM,CAACiC,OAAO,CAACmC,0BAA0B,KAAK,IAAI,EAAE;UACxH,MAAM,IAAIxC,SAAS,CAAC,2FAA2F,CAAC;QAClH;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACmC,0BAA0B,GAAGpE,MAAM,CAACiC,OAAO,CAACmC,0BAA0B;MAC5F;MAEA,IAAIpE,MAAM,CAACiC,OAAO,CAACoC,uBAAuB,KAAKtC,SAAS,EAAE;QACxD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACoC,uBAAuB,KAAK,SAAS,IAAIrE,MAAM,CAACiC,OAAO,CAACoC,uBAAuB,KAAK,IAAI,EAAE;UAClH,MAAM,IAAIzC,SAAS,CAAC,wFAAwF,CAAC;QAC/G;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACoC,uBAAuB,GAAGrE,MAAM,CAACiC,OAAO,CAACoC,uBAAuB;MACtF;MAEA,IAAIrE,MAAM,CAACiC,OAAO,CAACqC,sBAAsB,KAAKvC,SAAS,EAAE;QACvD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACqC,sBAAsB,KAAK,SAAS,IAAItE,MAAM,CAACiC,OAAO,CAACqC,sBAAsB,KAAK,IAAI,EAAE;UAChH,MAAM,IAAI1C,SAAS,CAAC,uFAAuF,CAAC;QAC9G;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACqC,sBAAsB,GAAGtE,MAAM,CAACiC,OAAO,CAACqC,sBAAsB;MACpF;MAEA,IAAItE,MAAM,CAACiC,OAAO,CAACsC,OAAO,KAAKxC,SAAS,EAAE;QACxC,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACsC,OAAO,KAAK,SAAS,EAAE;UAC/C,MAAM,IAAI3C,SAAS,CAAC,gEAAgE,CAAC;QACvF;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACsC,OAAO,GAAGvE,MAAM,CAACiC,OAAO,CAACsC,OAAO;MACtD;MAEA,IAAIvE,MAAM,CAACiC,OAAO,CAACuC,mBAAmB,KAAKzC,SAAS,EAAE;QACpD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACuC,mBAAmB,KAAK,SAAS,EAAE;UAC3D,MAAM,IAAI5C,SAAS,CAAC,4EAA4E,CAAC;QACnG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACuC,mBAAmB,GAAGxE,MAAM,CAACiC,OAAO,CAACuC,mBAAmB;MAC9E;MAEA,IAAIxE,MAAM,CAACiC,OAAO,CAACyC,YAAY,KAAK3C,SAAS,EAAE;QAC7C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACyC,YAAY,KAAK,QAAQ,EAAE;UACnD,MAAM,IAAI9C,SAAS,CAAC,oEAAoE,CAAC;QAC3F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACyC,YAAY,GAAG1E,MAAM,CAACiC,OAAO,CAACyC,YAAY;QAC9D,IAAI,CAAC1E,MAAM,CAACiC,OAAO,CAACgD,IAAI,GAAGlD,SAAS;MACtC;MAEA,IAAI/B,MAAM,CAACiC,OAAO,CAAC0C,cAAc,KAAK5C,SAAS,EAAE;QAC/C,CAAC,CAAC,EAAElE,YAAY,CAACoI,yBAAyB,EAAEjG,MAAM,CAACiC,OAAO,CAAC0C,cAAc,EAAE,+BAA+B,CAAC;QAC3G,IAAI,CAAC3E,MAAM,CAACiC,OAAO,CAAC0C,cAAc,GAAG3E,MAAM,CAACiC,OAAO,CAAC0C,cAAc;MACpE;MAEA,IAAI3E,MAAM,CAACiC,OAAO,CAAC2C,QAAQ,KAAK7C,SAAS,EAAE;QACzC,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC2C,QAAQ,KAAK,QAAQ,IAAI5E,MAAM,CAACiC,OAAO,CAAC2C,QAAQ,KAAK,IAAI,EAAE;UACnF,MAAM,IAAIhD,SAAS,CAAC,wEAAwE,CAAC;QAC/F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC2C,QAAQ,GAAG5E,MAAM,CAACiC,OAAO,CAAC2C,QAAQ;MACxD;MAEA,IAAI5E,MAAM,CAACiC,OAAO,CAAC4C,YAAY,KAAK9C,SAAS,EAAE;QAC7C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC4C,YAAY,KAAK,QAAQ,EAAE;UACnD,MAAM,IAAIjD,SAAS,CAAC,oEAAoE,CAAC;QAC3F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC4C,YAAY,GAAG7E,MAAM,CAACiC,OAAO,CAAC4C,YAAY;MAChE;MAEA,IAAI7E,MAAM,CAACiC,OAAO,CAAC8C,mBAAmB,KAAKhD,SAAS,EAAE;QACpD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC8C,mBAAmB,KAAK,SAAS,EAAE;UAC3D,MAAM,IAAInD,SAAS,CAAC,4EAA4E,CAAC;QACnG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC8C,mBAAmB,GAAG/E,MAAM,CAACiC,OAAO,CAAC8C,mBAAmB;MAC9E;MAEA,IAAI/E,MAAM,CAACiC,OAAO,CAAC+C,UAAU,KAAKjD,SAAS,EAAE;QAC3C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC+C,UAAU,KAAK,QAAQ,EAAE;UACjD,MAAM,IAAIpD,SAAS,CAAC,kEAAkE,CAAC;QACzF;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC+C,UAAU,GAAGhF,MAAM,CAACiC,OAAO,CAAC+C,UAAU;MAC5D;MAEA,IAAIhF,MAAM,CAACiC,OAAO,CAACgD,IAAI,KAAKlD,SAAS,EAAE;QACrC,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACgD,IAAI,KAAK,QAAQ,EAAE;UAC3C,MAAM,IAAIrD,SAAS,CAAC,4DAA4D,CAAC;QACnF;QAEA,IAAI5B,MAAM,CAACiC,OAAO,CAACgD,IAAI,IAAI,CAAC,IAAIjF,MAAM,CAACiC,OAAO,CAACgD,IAAI,IAAI,KAAK,EAAE;UAC5D,MAAM,IAAIiB,UAAU,CAAC,4DAA4D,CAAC;QACpF;QAEA,IAAI,CAAClG,MAAM,CAACiC,OAAO,CAACgD,IAAI,GAAGjF,MAAM,CAACiC,OAAO,CAACgD,IAAI;QAC9C,IAAI,CAACjF,MAAM,CAACiC,OAAO,CAACyC,YAAY,GAAG3C,SAAS;MAC9C;MAEA,IAAI/B,MAAM,CAACiC,OAAO,CAACiD,cAAc,KAAKnD,SAAS,EAAE;QAC/C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACiD,cAAc,KAAK,SAAS,EAAE;UACtD,MAAM,IAAItD,SAAS,CAAC,uEAAuE,CAAC;QAC9F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACiD,cAAc,GAAGlF,MAAM,CAACiC,OAAO,CAACiD,cAAc;MACpE;MAEA,IAAIlF,MAAM,CAACiC,OAAO,CAACkD,cAAc,KAAKpD,SAAS,EAAE;QAC/C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACkD,cAAc,KAAK,QAAQ,EAAE;UACrD,MAAM,IAAIvD,SAAS,CAAC,sEAAsE,CAAC;QAC7F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACkD,cAAc,GAAGnF,MAAM,CAACiC,OAAO,CAACkD,cAAc;MACpE;MAEA,IAAInF,MAAM,CAACiC,OAAO,CAAC6C,2BAA2B,KAAK/C,SAAS,EAAE;QAC5D,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC6C,2BAA2B,KAAK,QAAQ,EAAE;UAClE,MAAM,IAAIlD,SAAS,CAAC,mFAAmF,CAAC;QAC1G;QAEA,IAAI5B,MAAM,CAACiC,OAAO,CAAC6C,2BAA2B,GAAG,CAAC,EAAE;UAClD,MAAM,IAAIlD,SAAS,CAAC,4FAA4F,CAAC;QACnH;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC6C,2BAA2B,GAAG9E,MAAM,CAACiC,OAAO,CAAC6C,2BAA2B;MAC9F;MAEA,IAAI9E,MAAM,CAACiC,OAAO,CAACgB,uBAAuB,KAAKlB,SAAS,EAAE;QACxD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACgB,uBAAuB,KAAK,QAAQ,EAAE;UAC9D,MAAM,IAAIrB,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAI5B,MAAM,CAACiC,OAAO,CAACgB,uBAAuB,IAAI,CAAC,EAAE;UAC/C,MAAM,IAAIrB,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACgB,uBAAuB,GAAGjD,MAAM,CAACiC,OAAO,CAACgB,uBAAuB;MACtF;MAEA,IAAIjD,MAAM,CAACiC,OAAO,CAACmD,mBAAmB,KAAKrD,SAAS,EAAE;QACpD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACmD,mBAAmB,KAAK,SAAS,EAAE;UAC3D,MAAM,IAAIxD,SAAS,CAAC,4EAA4E,CAAC;QACnG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACmD,mBAAmB,GAAGpF,MAAM,CAACiC,OAAO,CAACmD,mBAAmB;MAC9E;MAEA,IAAIpF,MAAM,CAACiC,OAAO,CAACoD,gCAAgC,KAAKtD,SAAS,EAAE;QACjE,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACoD,gCAAgC,KAAK,SAAS,EAAE;UACxE,MAAM,IAAIzD,SAAS,CAAC,yFAAyF,CAAC;QAChH;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACoD,gCAAgC,GAAGrF,MAAM,CAACiC,OAAO,CAACoD,gCAAgC;MACxG;MAEA,IAAIrF,MAAM,CAACiC,OAAO,CAACuD,UAAU,KAAKzD,SAAS,EAAE;QAC3C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACuD,UAAU,KAAK,QAAQ,EAAE;UACjD,MAAM,IAAI5D,SAAS,CAAC,kEAAkE,CAAC;QACzF;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAGxF,MAAM,CAACiC,OAAO,CAACuD,UAAU;MAC5D;MAEA,IAAIxF,MAAM,CAACiC,OAAO,CAACwD,QAAQ,KAAK1D,SAAS,EAAE;QACzC,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAACwD,QAAQ,KAAK,QAAQ,IAAIzF,MAAM,CAACiC,OAAO,CAACwD,QAAQ,KAAK,IAAI,EAAE;UACnF,MAAM,IAAI7D,SAAS,CAAC,wEAAwE,CAAC;QAC/F;QAEA,IAAI5B,MAAM,CAACiC,OAAO,CAACwD,QAAQ,GAAG,UAAU,EAAE;UACxC,MAAM,IAAI7D,SAAS,CAAC,kEAAkE,CAAC;QACzF,CAAC,MAAM,IAAI5B,MAAM,CAACiC,OAAO,CAACwD,QAAQ,GAAG,CAAC,CAAC,EAAE;UACvC,MAAM,IAAI7D,SAAS,CAAC,0DAA0D,CAAC;QACjF;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAACwD,QAAQ,GAAGzF,MAAM,CAACiC,OAAO,CAACwD,QAAQ,GAAG,CAAC;MAC5D;MAEA,IAAIzF,MAAM,CAACiC,OAAO,CAAC0D,sBAAsB,KAAK5D,SAAS,EAAE;QACvD,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC0D,sBAAsB,KAAK,SAAS,EAAE;UAC9D,MAAM,IAAI/D,SAAS,CAAC,+EAA+E,CAAC;QACtG;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC0D,sBAAsB,GAAG3F,MAAM,CAACiC,OAAO,CAAC0D,sBAAsB;MACpF;MAEA,IAAI3F,MAAM,CAACiC,OAAO,CAAC2D,cAAc,KAAK7D,SAAS,EAAE;QAC/C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC2D,cAAc,KAAK,SAAS,EAAE;UACtD,MAAM,IAAIhE,SAAS,CAAC,uEAAuE,CAAC;QAC9F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC2D,cAAc,GAAG5F,MAAM,CAACiC,OAAO,CAAC2D,cAAc;MACpE;MAEA,IAAI5F,MAAM,CAACiC,OAAO,CAAC4D,MAAM,KAAK9D,SAAS,EAAE;QACvC,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC4D,MAAM,KAAK,SAAS,EAAE;UAC9C,MAAM,IAAIjE,SAAS,CAAC,+DAA+D,CAAC;QACtF;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC4D,MAAM,GAAG7F,MAAM,CAACiC,OAAO,CAAC4D,MAAM;MACpD;MAEA,IAAI7F,MAAM,CAACiC,OAAO,CAAC6D,aAAa,KAAK/D,SAAS,EAAE;QAC9C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC6D,aAAa,KAAK,QAAQ,EAAE;UACpD,MAAM,IAAIlE,SAAS,CAAC,qEAAqE,CAAC;QAC5F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC6D,aAAa,GAAG9F,MAAM,CAACiC,OAAO,CAAC6D,aAAa;MAClE;MAEA,IAAI9F,MAAM,CAACiC,OAAO,CAAC8D,cAAc,KAAKhE,SAAS,EAAE;QAC/C,IAAI,OAAO/B,MAAM,CAACiC,OAAO,CAAC8D,cAAc,KAAK,SAAS,EAAE;UACtD,MAAM,IAAInE,SAAS,CAAC,uEAAuE,CAAC;QAC9F;QAEA,IAAI,CAAC5B,MAAM,CAACiC,OAAO,CAAC8D,cAAc,GAAG/F,MAAM,CAACiC,OAAO,CAAC8D,cAAc;MACpE;IACF;IAEA,IAAI,CAAC7F,oBAAoB,GAAG,IAAI,CAACF,MAAM,CAACiC,OAAO,CAACqB,wBAAwB;IAExE,IAAI,IAAI,CAACpD,oBAAoB,CAACiG,aAAa,KAAKpE,SAAS,EAAE;MACzD;MACA;MACA;MACA;MACA;MACA,IAAI,CAAC7B,oBAAoB,GAAG9D,MAAM,CAACgK,MAAM,CAAC,IAAI,CAAClG,oBAAoB,EAAE;QACnEiG,aAAa,EAAE;UACb5J,KAAK,EAAEK,UAAU,CAACV,OAAO,CAACmK;QAC5B;MACF,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC1F,KAAK,GAAG,IAAI,CAAC2F,WAAW,EAAE;IAC/B,IAAI,CAACnG,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACC,sBAAsB,GAAG,CAACmG,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE;IACA;IACA;IACA;;IAEA,IAAI,CAACnG,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACG,MAAM,GAAG,KAAK;IACnB,IAAI,CAACY,aAAa,GAAGkF,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC;IACpC,IAAI,CAAClG,sBAAsB,GAAG,CAAC;IAC/B,IAAI,CAACC,oBAAoB,GAAG,IAAIrD,qBAAqB,CAACuJ,oBAAoB,EAAE;IAC5E,IAAI,CAAC1F,KAAK,GAAG,IAAI,CAAC2F,KAAK,CAACC,WAAW;IAEnC,IAAI,CAAClF,uBAAuB,GAAG,MAAM;MACnC,IAAI,CAACX,SAAS,CAAC8F,WAAW,CAACzJ,OAAO,CAAC0J,IAAI,CAACC,SAAS,CAAC;MAClD,IAAI,CAACC,iBAAiB,EAAE;IAC1B,CAAC;EACH;EAEAC,OAAOA,CAACC,eAAe,EAAE;IACvB,IAAI,IAAI,CAAClG,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAACC,WAAW,EAAE;MACzC,MAAM,IAAI9I,OAAO,CAACqJ,eAAe,CAAC,mDAAmD,GAAG,IAAI,CAACnG,KAAK,CAACoG,IAAI,GAAG,UAAU,CAAC;IACvH;IAEA,IAAIF,eAAe,EAAE;MACnB,MAAMG,SAAS,GAAGC,GAAG,IAAI;QACvB,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEC,OAAO,CAAC;QACrCN,eAAe,CAACI,GAAG,CAAC;MACtB,CAAC;MAED,MAAME,OAAO,GAAGF,GAAG,IAAI;QACrB,IAAI,CAACC,cAAc,CAAC,SAAS,EAAEF,SAAS,CAAC;QACzCH,eAAe,CAACI,GAAG,CAAC;MACtB,CAAC;MAED,IAAI,CAACG,IAAI,CAAC,SAAS,EAAEJ,SAAS,CAAC;MAC/B,IAAI,CAACI,IAAI,CAAC,OAAO,EAAED,OAAO,CAAC;IAC7B;IAEA,IAAI,CAACE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACgB,UAAU,CAAC;EAC1C;EACA;AACF;AACA;;EAGEC,EAAEA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAClB,OAAO,KAAK,CAACF,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;EAClC;EACA;AACF;AACA;;EAGEC,IAAIA,CAACF,KAAK,EAAE,GAAGG,IAAI,EAAE;IACnB,OAAO,KAAK,CAACD,IAAI,CAACF,KAAK,EAAE,GAAGG,IAAI,CAAC;EACnC;EACA;AACF;AACA;AACA;AACA;;EAGEC,KAAKA,CAAA,EAAG;IACN,IAAI,CAACP,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;EACrC;EACA;AACF;AACA;;EAGEC,oBAAoBA,CAAA,EAAG;IACrB,MAAMC,MAAM,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAExC,IAAI,IAAI,CAACrI,MAAM,CAACiC,OAAO,CAACgD,IAAI,EAAE;MAC5B,OAAO,IAAI,CAACqD,aAAa,CAAC,IAAI,CAACtI,MAAM,CAACiC,OAAO,CAACgD,IAAI,EAAE,IAAI,CAACjF,MAAM,CAACiC,OAAO,CAAC8C,mBAAmB,EAAEqD,MAAM,CAAC;IACtG,CAAC,MAAM;MACL,OAAO,CAAC,CAAC,EAAElL,eAAe,CAACqL,cAAc,EAAE;QACzC1G,MAAM,EAAE,IAAI,CAAC7B,MAAM,CAAC6B,MAAM;QAC1B6C,YAAY,EAAE,IAAI,CAAC1E,MAAM,CAACiC,OAAO,CAACyC,YAAY;QAC9C8D,OAAO,EAAE,IAAI,CAACxI,MAAM,CAACiC,OAAO,CAACiB,cAAc;QAC3CkF,MAAM,EAAEA;MACV,CAAC,CAAC,CAACK,IAAI,CAACxD,IAAI,IAAI;QACdyD,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,IAAI,CAACL,aAAa,CAACrD,IAAI,EAAE,IAAI,CAACjF,MAAM,CAACiC,OAAO,CAAC8C,mBAAmB,EAAEqD,MAAM,CAAC;QAC3E,CAAC,CAAC;MACJ,CAAC,EAAEd,GAAG,IAAI;QACR,IAAI,CAACsB,iBAAiB,EAAE;QAExB,IAAItB,GAAG,CAACF,IAAI,KAAK,YAAY,EAAE;UAC7B;UACA;QACF;QAEAsB,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,IAAI,CAACZ,IAAI,CAAC,SAAS,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAACG,GAAG,CAACuB,OAAO,EAAE,aAAa,CAAC,CAAC;QAC/E,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;EACA;AACF;AACA;;EAGEC,iBAAiBA,CAACC,WAAW,EAAE;IAC7B,IAAI,CAAC,IAAI,CAACtI,MAAM,EAAE;MAChB,IAAI,CAACmI,iBAAiB,EAAE;MACxB,IAAI,CAACI,iBAAiB,EAAE;MACxB,IAAI,CAACC,eAAe,EAAE;MACtB,IAAI,CAACC,eAAe,EAAE;MAEtB,IAAIH,WAAW,KAAKtJ,YAAY,CAACE,QAAQ,EAAE;QACzC,IAAI,CAACoI,IAAI,CAAC,WAAW,CAAC;MACxB,CAAC,MAAM,IAAIgB,WAAW,KAAKtJ,YAAY,CAACG,KAAK,EAAE;QAC7C8I,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,IAAI,CAACZ,IAAI,CAAC,KAAK,CAAC;QAClB,CAAC,CAAC;MACJ;MAEA,MAAM7G,OAAO,GAAG,IAAI,CAACA,OAAO;MAE5B,IAAIA,OAAO,EAAE;QACX,MAAMoG,GAAG,GAAG,IAAIxJ,OAAO,CAACqL,YAAY,CAAC,6CAA6C,EAAE,QAAQ,CAAC;QAC7FjI,OAAO,CAACkI,QAAQ,CAAC9B,GAAG,CAAC;QACrB,IAAI,CAACpG,OAAO,GAAGa,SAAS;MAC1B;MAEA,IAAI,CAACtB,MAAM,GAAG,IAAI;MAClB,IAAI,CAACC,UAAU,GAAGqB,SAAS;IAC7B;EACF;EACA;AACF;AACA;;EAGEuE,WAAWA,CAAA,EAAG;IACZ,MAAM3F,KAAK,GAAG,IAAI3D,MAAM,CAACd,OAAO,CAAC,IAAI,CAAC8D,MAAM,CAACiC,OAAO,CAACtB,KAAK,CAAC;IAC3DA,KAAK,CAACiH,EAAE,CAAC,OAAO,EAAEiB,OAAO,IAAI;MAC3B,IAAI,CAACd,IAAI,CAAC,OAAO,EAAEc,OAAO,CAAC;IAC7B,CAAC,CAAC;IACF,OAAOlI,KAAK;EACd;EACA;AACF;AACA;;EAGE0I,uBAAuBA,CAACR,OAAO,EAAES,OAAO,EAAE;IACxC,OAAO,IAAI1L,kBAAkB,CAAC2L,MAAM,CAACV,OAAO,EAAE,IAAI,CAAClI,KAAK,EAAE2I,OAAO,EAAE,IAAI,CAACtJ,MAAM,CAACiC,OAAO,CAAC;EACzF;EAEAqG,aAAaA,CAACrD,IAAI,EAAEF,mBAAmB,EAAEqD,MAAM,EAAE;IAC/C,MAAMoB,WAAW,GAAG;MAClBC,IAAI,EAAE,IAAI,CAAC3I,WAAW,GAAG,IAAI,CAACA,WAAW,CAACe,MAAM,GAAG,IAAI,CAAC7B,MAAM,CAAC6B,MAAM;MACrEoD,IAAI,EAAE,IAAI,CAACnE,WAAW,GAAG,IAAI,CAACA,WAAW,CAACmE,IAAI,GAAGA,IAAI;MACrDJ,YAAY,EAAE,IAAI,CAAC7E,MAAM,CAACiC,OAAO,CAAC4C;IACpC,CAAC;IACD,MAAMoC,OAAO,GAAGlC,mBAAmB,GAAGhH,UAAU,CAAC2L,iBAAiB,GAAG3L,UAAU,CAAC4L,iBAAiB;IACjG1C,OAAO,CAACuC,WAAW,EAAE7M,IAAI,CAACT,OAAO,CAAC0N,MAAM,EAAExB,MAAM,CAAC,CAACK,IAAI,CAACrH,MAAM,IAAI;MAC/DsH,OAAO,CAACC,QAAQ,CAAC,MAAM;QACrBvH,MAAM,CAACwG,EAAE,CAAC,OAAO,EAAEiC,KAAK,IAAI;UAC1B,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;QACzB,CAAC,CAAC;QACFzI,MAAM,CAACwG,EAAE,CAAC,OAAO,EAAE,MAAM;UACvB,IAAI,CAACmC,WAAW,EAAE;QACpB,CAAC,CAAC;QACF3I,MAAM,CAACwG,EAAE,CAAC,KAAK,EAAE,MAAM;UACrB,IAAI,CAACoC,SAAS,EAAE;QAClB,CAAC,CAAC;QACF5I,MAAM,CAAC6I,YAAY,CAAC,IAAI,EAAEpL,wBAAwB,CAAC;QACnD,IAAI,CAACkC,SAAS,GAAG,IAAIpD,UAAU,CAACzB,OAAO,CAACkF,MAAM,EAAE,IAAI,CAACpB,MAAM,CAACiC,OAAO,CAAC+C,UAAU,EAAE,IAAI,CAACrE,KAAK,CAAC;QAC3F,IAAI,CAACI,SAAS,CAAC6G,EAAE,CAAC,QAAQ,EAAEsC,SAAS,IAAI;UACvC,IAAI,CAACnC,IAAI,CAAC,QAAQ,EAAEmC,SAAS,CAAC;QAChC,CAAC,CAAC;QACF,IAAI,CAAC9I,MAAM,GAAGA,MAAM;QACpB,IAAI,CAACX,MAAM,GAAG,KAAK;QACnB,IAAI,CAACE,KAAK,CAACwJ,GAAG,CAAC,eAAe,GAAG,IAAI,CAACnK,MAAM,CAAC6B,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC7B,MAAM,CAACiC,OAAO,CAACgD,IAAI,CAAC;QACrF,IAAI,CAACmF,YAAY,EAAE;QACnB,IAAI,CAAC1C,YAAY,CAAC,IAAI,CAACf,KAAK,CAAC0D,aAAa,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC,EAAE/C,GAAG,IAAI;MACR,IAAI,CAACsB,iBAAiB,EAAE;MAExB,IAAItB,GAAG,CAACF,IAAI,KAAK,YAAY,EAAE;QAC7B;MACF;MAEAsB,OAAO,CAACC,QAAQ,CAAC,MAAM;QACrB,IAAI,CAACmB,WAAW,CAACxC,GAAG,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAGE4B,eAAeA,CAAA,EAAG;IAChB,IAAI,IAAI,CAAC9H,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACkJ,OAAO,EAAE;IACvB;EACF;EACA;AACF;AACA;;EAGEjC,kBAAkBA,CAAA,EAAG;IACnB,MAAMkC,UAAU,GAAG,IAAInM,oBAAoB,CAACoM,eAAe,EAAE;IAC7D,IAAI,CAAClJ,YAAY,GAAGmJ,UAAU,CAAC,MAAM;MACnCF,UAAU,CAACG,KAAK,EAAE;MAClB,IAAI,CAACxH,cAAc,EAAE;IACvB,CAAC,EAAE,IAAI,CAAClD,MAAM,CAACiC,OAAO,CAACiB,cAAc,CAAC;IACtC,OAAOqH,UAAU,CAACnC,MAAM;EAC1B;EACA;AACF;AACA;;EAGEpB,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAAC2D,gBAAgB,EAAE;IACvB,MAAMnC,OAAO,GAAG,IAAI,CAACxI,MAAM,CAACiC,OAAO,CAACY,aAAa;IAEjD,IAAI2F,OAAO,GAAG,CAAC,EAAE;MACf,IAAI,CAACjH,WAAW,GAAGkJ,UAAU,CAAC,MAAM;QAClC,IAAI,CAAC5H,aAAa,EAAE;MACtB,CAAC,EAAE2F,OAAO,CAAC;IACb;EACF;EACA;AACF;AACA;;EAGEoC,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAAC5B,iBAAiB,EAAE,CAAC,CAAC;;IAE1B,MAAM9H,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMsH,OAAO,GAAGtH,OAAO,CAACsH,OAAO,KAAKzG,SAAS,GAAGb,OAAO,CAACsH,OAAO,GAAG,IAAI,CAACxI,MAAM,CAACiC,OAAO,CAACkD,cAAc;IAEpG,IAAIqD,OAAO,EAAE;MACX,IAAI,CAAChH,YAAY,GAAGiJ,UAAU,CAAC,MAAM;QACnC,IAAI,CAACtF,cAAc,EAAE;MACvB,CAAC,EAAEqD,OAAO,CAAC;IACb;EACF;EACA;AACF;AACA;;EAGEqC,gBAAgBA,CAAA,EAAG;IACjB,IAAI,CAAC5B,eAAe,EAAE;IACtB,IAAI,CAACxH,UAAU,GAAGgJ,UAAU,CAAC,MAAM;MACjC,IAAI,CAACK,YAAY,EAAE;IACrB,CAAC,EAAE,IAAI,CAAC9K,MAAM,CAACiC,OAAO,CAACgB,uBAAuB,CAAC;EACjD;EACA;AACF;AACA;;EAGEC,cAAcA,CAAA,EAAG;IACf,MAAM2F,OAAO,GAAI,wBAAuB,IAAI,CAAC7I,MAAM,CAAC6B,MAAO,GAAE,IAAI,CAAC7B,MAAM,CAACiC,OAAO,CAACgD,IAAI,GAAI,IAAG,IAAI,CAACjF,MAAM,CAACiC,OAAO,CAACgD,IAAK,EAAC,GAAI,KAAI,IAAI,CAACjF,MAAM,CAACiC,OAAO,CAACyC,YAAa,EAAE,OAAM,IAAI,CAAC1E,MAAM,CAACiC,OAAO,CAACiB,cAAe,IAAG;IAC7M,IAAI,CAACvC,KAAK,CAACwJ,GAAG,CAACtB,OAAO,CAAC;IACvB,IAAI,CAACd,IAAI,CAAC,SAAS,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAAC0B,OAAO,EAAE,UAAU,CAAC,CAAC;IACtE,IAAI,CAACvH,YAAY,GAAGS,SAAS;IAC7B,IAAI,CAACgJ,aAAa,CAAC,gBAAgB,CAAC;EACtC;EACA;AACF;AACA;;EAGElI,aAAaA,CAAA,EAAG;IACd,MAAMgG,OAAO,GAAI,+BAA8B,IAAI,CAAC7I,MAAM,CAACiC,OAAO,CAACY,aAAc,IAAG;IACpF,IAAI,CAAClC,KAAK,CAACwJ,GAAG,CAACtB,OAAO,CAAC;IACvB,IAAI,CAACkC,aAAa,CAAC,aAAa,EAAE,IAAIjN,OAAO,CAACqJ,eAAe,CAAC0B,OAAO,EAAE,UAAU,CAAC,CAAC;EACrF;EACA;AACF;AACA;;EAGE1D,cAAcA,CAAA,EAAG;IACf,IAAI,CAAC3D,YAAY,GAAGO,SAAS;IAC7B,MAAMb,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5BA,OAAO,CAAC8J,MAAM,EAAE;IAChB,MAAMxC,OAAO,GAAGtH,OAAO,CAACsH,OAAO,KAAKzG,SAAS,GAAGb,OAAO,CAACsH,OAAO,GAAG,IAAI,CAACxI,MAAM,CAACiC,OAAO,CAACkD,cAAc;IACpG,MAAM0D,OAAO,GAAG,yCAAyC,GAAGL,OAAO,GAAG,IAAI;IAC1EtH,OAAO,CAAC2I,KAAK,GAAG,IAAI/L,OAAO,CAACqL,YAAY,CAACN,OAAO,EAAE,UAAU,CAAC;EAC/D;EACA;AACF;AACA;;EAGEiC,YAAYA,CAAA,EAAG;IACb,IAAI,CAACrJ,UAAU,GAAGM,SAAS;IAC3B,IAAI,CAACgG,IAAI,CAAC,OAAO,CAAC;IAClB,IAAI,CAACL,YAAY,CAAC,IAAI,CAACf,KAAK,CAACgB,UAAU,CAAC;EAC1C;EACA;AACF;AACA;;EAGEiB,iBAAiBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACtH,YAAY,EAAE;MACrB2J,YAAY,CAAC,IAAI,CAAC3J,YAAY,CAAC;MAC/B,IAAI,CAACA,YAAY,GAAGS,SAAS;IAC/B;EACF;EACA;AACF;AACA;;EAGE4I,gBAAgBA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACpJ,WAAW,EAAE;MACpB0J,YAAY,CAAC,IAAI,CAAC1J,WAAW,CAAC;MAC9B,IAAI,CAACA,WAAW,GAAGQ,SAAS;IAC9B;EACF;EACA;AACF;AACA;;EAGEiH,iBAAiBA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACxH,YAAY,EAAE;MACrByJ,YAAY,CAAC,IAAI,CAACzJ,YAAY,CAAC;MAC/B,IAAI,CAACA,YAAY,GAAGO,SAAS;IAC/B;EACF;EACA;AACF;AACA;;EAGEkH,eAAeA,CAAA,EAAG;IAChB,IAAI,IAAI,CAACxH,UAAU,EAAE;MACnBwJ,YAAY,CAAC,IAAI,CAACxJ,UAAU,CAAC;MAC7B,IAAI,CAACA,UAAU,GAAGM,SAAS;IAC7B;EACF;EACA;AACF;AACA;;EAGE2F,YAAYA,CAACwD,QAAQ,EAAE;IACrB,IAAI,IAAI,CAAClK,KAAK,KAAKkK,QAAQ,EAAE;MAC3B,IAAI,CAACvK,KAAK,CAACwJ,GAAG,CAAC,mBAAmB,GAAGe,QAAQ,CAAC9D,IAAI,CAAC;MACnD;IACF;IAEA,IAAI,IAAI,CAACpG,KAAK,IAAI,IAAI,CAACA,KAAK,CAACmK,IAAI,EAAE;MACjC,IAAI,CAACnK,KAAK,CAACmK,IAAI,CAACC,IAAI,CAAC,IAAI,EAAEF,QAAQ,CAAC;IACtC;IAEA,IAAI,CAACvK,KAAK,CAACwJ,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAACnJ,KAAK,GAAG,IAAI,CAACA,KAAK,CAACoG,IAAI,GAAG,WAAW,CAAC,GAAG,MAAM,GAAG8D,QAAQ,CAAC9D,IAAI,CAAC;IACxG,IAAI,CAACpG,KAAK,GAAGkK,QAAQ;IAErB,IAAI,IAAI,CAAClK,KAAK,CAACqK,KAAK,EAAE;MACpB,IAAI,CAACrK,KAAK,CAACqK,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;IAC9B;EACF;EACA;AACF;AACA;;EAGEC,eAAeA,CAACC,SAAS,EAAE;IACzB,MAAMlC,OAAO,GAAG,IAAI,CAACtI,KAAK,CAACyK,MAAM,CAACD,SAAS,CAAC;IAE5C,IAAI,CAAClC,OAAO,EAAE;MACZ,MAAM,IAAItD,KAAK,CAAE,aAAYwF,SAAU,eAAc,IAAI,CAACxK,KAAK,CAACoG,IAAK,GAAE,CAAC;IAC1E;IAEA,OAAOkC,OAAO;EAChB;EACA;AACF;AACA;;EAGEyB,aAAaA,CAACS,SAAS,EAAE,GAAGxD,IAAI,EAAE;IAChC,MAAMsB,OAAO,GAAG,IAAI,CAACtI,KAAK,CAACyK,MAAM,CAACD,SAAS,CAAC;IAE5C,IAAIlC,OAAO,EAAE;MACXA,OAAO,CAACgC,KAAK,CAAC,IAAI,EAAEtD,IAAI,CAAC;IAC3B,CAAC,MAAM;MACL,IAAI,CAACD,IAAI,CAAC,OAAO,EAAE,IAAI/B,KAAK,CAAE,aAAYwF,SAAU,eAAc,IAAI,CAACxK,KAAK,CAACoG,IAAK,GAAE,CAAC,CAAC;MACtF,IAAI,CAACa,KAAK,EAAE;IACd;EACF;EACA;AACF;AACA;;EAGE6B,WAAWA,CAACD,KAAK,EAAE;IACjB,IAAI,IAAI,CAAC7I,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAACgB,UAAU,IAAI,IAAI,CAAC3G,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAAC+E,sBAAsB,EAAE;MAC5F,MAAM7C,OAAO,GAAI,wBAAuB,IAAI,CAAC7I,MAAM,CAAC6B,MAAO,IAAG,IAAI,CAAC7B,MAAM,CAACiC,OAAO,CAACgD,IAAK,MAAK4E,KAAK,CAAChB,OAAQ,EAAC;MAC3G,IAAI,CAAClI,KAAK,CAACwJ,GAAG,CAACtB,OAAO,CAAC;MACvB,IAAI,CAACd,IAAI,CAAC,SAAS,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAAC0B,OAAO,EAAE,SAAS,CAAC,CAAC;IACvE,CAAC,MAAM;MACL,MAAMA,OAAO,GAAI,qBAAoBgB,KAAK,CAAChB,OAAQ,EAAC;MACpD,IAAI,CAAClI,KAAK,CAACwJ,GAAG,CAACtB,OAAO,CAAC;MACvB,IAAI,CAACd,IAAI,CAAC,OAAO,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAAC0B,OAAO,EAAE,SAAS,CAAC,CAAC;IACrE;IAEA,IAAI,CAACkC,aAAa,CAAC,aAAa,EAAElB,KAAK,CAAC;EAC1C;EACA;AACF;AACA;;EAGEG,SAASA,CAAA,EAAG;IACV,IAAI,CAACrJ,KAAK,CAACwJ,GAAG,CAAC,cAAc,CAAC;IAE9B,IAAI,IAAI,CAACnJ,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAACuB,KAAK,EAAE;MACnC,MAAM2B,KAAK,GAAG,IAAI7D,KAAK,CAAC,gBAAgB,CAAC;MACzC6D,KAAK,CAAC8B,IAAI,GAAG,YAAY;MACzB,IAAI,CAAC7B,WAAW,CAACD,KAAK,CAAC;IACzB;EACF;EACA;AACF;AACA;;EAGEE,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACpJ,KAAK,CAACwJ,GAAG,CAAC,gBAAgB,GAAG,IAAI,CAACnK,MAAM,CAAC6B,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC7B,MAAM,CAACiC,OAAO,CAACgD,IAAI,GAAG,SAAS,CAAC;IAElG,IAAI,IAAI,CAACjE,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAACiF,SAAS,EAAE;MACvC,IAAI,CAACjL,KAAK,CAACwJ,GAAG,CAAC,eAAe,GAAG,IAAI,CAACrJ,WAAW,CAACe,MAAM,GAAG,GAAG,GAAG,IAAI,CAACf,WAAW,CAACmE,IAAI,CAAC;MACvF,IAAI,CAAC8F,aAAa,CAAC,WAAW,CAAC;IACjC,CAAC,MAAM,IAAI,IAAI,CAAC/J,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAACkF,uBAAuB,EAAE;MAC5D,MAAMhK,MAAM,GAAG,IAAI,CAACf,WAAW,GAAG,IAAI,CAACA,WAAW,CAACe,MAAM,GAAG,IAAI,CAAC7B,MAAM,CAAC6B,MAAM;MAC9E,MAAMoD,IAAI,GAAG,IAAI,CAACnE,WAAW,GAAG,IAAI,CAACA,WAAW,CAACmE,IAAI,GAAG,IAAI,CAACjF,MAAM,CAACiC,OAAO,CAACgD,IAAI;MAChF,IAAI,CAACtE,KAAK,CAACwJ,GAAG,CAAC,8CAA8C,GAAGtI,MAAM,GAAG,GAAG,GAAGoD,IAAI,CAAC;MACpF,IAAI,CAAC8F,aAAa,CAAC,OAAO,CAAC;IAC7B,CAAC,MAAM;MACL,IAAI,CAACrD,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;IACrC;EACF;EACA;AACF;AACA;;EAGEkC,YAAYA,CAAA,EAAG;IACb,MAAM,GAAG0B,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC,GAAG,sBAAsB,CAACC,IAAI,CAACzN,QAAQ,CAAC0N,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACzG,MAAMtI,OAAO,GAAG,IAAIvG,gBAAgB,CAACnB,OAAO,CAAC;MAC3CqI,OAAO,EAAE,IAAI,CAACvE,MAAM,CAACiC,OAAO,CAACsC,OAAO;MACpC2H,OAAO,EAAE;QACPJ,KAAK,EAAEK,MAAM,CAACL,KAAK,CAAC;QACpBC,KAAK,EAAEI,MAAM,CAACJ,KAAK,CAAC;QACpBC,KAAK,EAAEG,MAAM,CAACH,KAAK,CAAC;QACpBI,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IACF,IAAI,CAACrL,SAAS,CAAC8F,WAAW,CAACzJ,OAAO,CAAC0J,IAAI,CAACuF,QAAQ,EAAEzI,OAAO,CAACF,IAAI,CAAC;IAC/D,IAAI,CAAC/C,KAAK,CAACiD,OAAO,CAAC,YAAY;MAC7B,OAAOA,OAAO,CAAC0I,QAAQ,CAAC,IAAI,CAAC;IAC/B,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAGEC,gBAAgBA,CAAA,EAAG;IACjB,MAAM3I,OAAO,GAAG,IAAItG,cAAc,CAACpB,OAAO,CAAC;MACzCsJ,UAAU,EAAEvH,YAAY,CAACuO,QAAQ,CAAC,IAAI,CAACxM,MAAM,CAACiC,OAAO,CAACuD,UAAU,CAAC;MACjER,UAAU,EAAE,IAAI,CAAChF,MAAM,CAACiC,OAAO,CAAC+C,UAAU;MAC1CyH,aAAa,EAAE,CAAC;MAChBC,SAAS,EAAEhE,OAAO,CAACiE,GAAG;MACtBC,YAAY,EAAE,CAAC;MACfC,cAAc,EAAE,IAAIC,IAAI,EAAE,CAACC,iBAAiB,EAAE;MAC9CC,UAAU,EAAE;IACd,CAAC,CAAC;IACF,MAAM;MACJlL;IACF,CAAC,GAAG,IAAI,CAAC9B,MAAM;IAEf,QAAQ8B,cAAc,CAACE,IAAI;MACzB,KAAK,iCAAiC;QACpC4B,OAAO,CAACqJ,OAAO,GAAG;UAChBjL,IAAI,EAAE,MAAM;UACZkL,IAAI,EAAE,IAAI,CAACjN,eAAe;UAC1BkN,QAAQ,EAAE;QACZ,CAAC;QACD;MAEF,KAAK,qCAAqC;QACxCvJ,OAAO,CAACqJ,OAAO,GAAG;UAChBjL,IAAI,EAAE,eAAe;UACrBkL,IAAI,EAAE,IAAI,CAACjN,eAAe;UAC1BmN,YAAY,EAAEtL,cAAc,CAACG,OAAO,CAACO;QACvC,CAAC;QACD;MAEF,KAAK,+BAA+B;MACpC,KAAK,gCAAgC;MACrC,KAAK,wCAAwC;MAC7C,KAAK,iDAAiD;QACpDoB,OAAO,CAACqJ,OAAO,GAAG;UAChBjL,IAAI,EAAE,MAAM;UACZkL,IAAI,EAAE,IAAI,CAACjN,eAAe;UAC1BkN,QAAQ,EAAE;QACZ,CAAC;QACD;MAEF,KAAK,MAAM;QACTvJ,OAAO,CAACyJ,IAAI,GAAG,CAAC,CAAC,EAAElP,KAAK,CAACmP,iBAAiB,EAAE;UAC1CpL,MAAM,EAAEJ,cAAc,CAACG,OAAO,CAACC;QACjC,CAAC,CAAC;QACF;MAEF;QACE0B,OAAO,CAACzB,QAAQ,GAAGL,cAAc,CAACG,OAAO,CAACE,QAAQ;QAClDyB,OAAO,CAACxB,QAAQ,GAAGN,cAAc,CAACG,OAAO,CAACG,QAAQ;IAAC;IAGvDwB,OAAO,CAAC2J,QAAQ,GAAG,IAAI,CAACvN,MAAM,CAACiC,OAAO,CAAC6D,aAAa,IAAIpJ,GAAG,CAACR,OAAO,CAACqR,QAAQ,EAAE;IAC9E3J,OAAO,CAAC0B,UAAU,GAAG,IAAI,CAACxE,WAAW,GAAG,IAAI,CAACA,WAAW,CAACe,MAAM,GAAG,IAAI,CAAC7B,MAAM,CAAC6B,MAAM;IACpF+B,OAAO,CAACjB,OAAO,GAAG,IAAI,CAAC3C,MAAM,CAACiC,OAAO,CAACU,OAAO,IAAI,SAAS;IAC1DiB,OAAO,CAAC4J,WAAW,GAAGxP,QAAQ,CAACoJ,IAAI;IACnCxD,OAAO,CAACgB,QAAQ,GAAG,IAAI,CAAC5E,MAAM,CAACiC,OAAO,CAAC2C,QAAQ;IAC/ChB,OAAO,CAACL,QAAQ,GAAG,IAAI,CAACvD,MAAM,CAACiC,OAAO,CAACsB,QAAQ;IAC/CK,OAAO,CAACtB,QAAQ,GAAGiE,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClD5C,OAAO,CAACsB,cAAc,GAAG,IAAI,CAAClF,MAAM,CAACiC,OAAO,CAACiD,cAAc;IAC3DtB,OAAO,CAAC6J,WAAW,GAAG,CAAC,IAAI,CAACzN,MAAM,CAACiC,OAAO,CAACuC,mBAAmB;IAC9D,IAAI,CAAC1D,WAAW,GAAGiB,SAAS;IAC5B,IAAI,CAAChB,SAAS,CAAC8F,WAAW,CAACzJ,OAAO,CAAC0J,IAAI,CAAC4G,MAAM,EAAE9J,OAAO,CAAC+J,QAAQ,EAAE,CAAC;IACnE,IAAI,CAAChN,KAAK,CAACiD,OAAO,CAAC,YAAY;MAC7B,OAAOA,OAAO,CAAC0I,QAAQ,CAAC,IAAI,CAAC;IAC/B,CAAC,CAAC;EACJ;EACA;AACF;AACA;;EAGEsB,uBAAuBA,CAACpL,KAAK,EAAE;IAC7B,MAAMqL,cAAc,GAAGtH,MAAM,CAACuH,UAAU,CAACtL,KAAK,EAAE,MAAM,CAAC;IACvD,MAAMkB,IAAI,GAAG6C,MAAM,CAACE,KAAK,CAAC,CAAC,GAAGoH,cAAc,CAAC;IAC7C,IAAIE,MAAM,GAAG,CAAC;IACdA,MAAM,GAAGrK,IAAI,CAACsK,aAAa,CAACH,cAAc,GAAG,CAAC,EAAEE,MAAM,CAAC;IACvDA,MAAM,GAAGrK,IAAI,CAACsK,aAAa,CAACH,cAAc,EAAEE,MAAM,CAAC;IACnDrK,IAAI,CAACuK,KAAK,CAACzL,KAAK,EAAEuL,MAAM,EAAE,MAAM,CAAC;IACjC,IAAI,CAAChN,SAAS,CAAC8F,WAAW,CAACzJ,OAAO,CAAC0J,IAAI,CAACoH,aAAa,EAAExK,IAAI,CAAC,CAAC,CAAC;;IAE9D,IAAI,CAACgE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACwH,+BAA+B,CAAC;EAC/D;EACA;AACF;AACA;;EAGEC,cAAcA,CAAA,EAAG;IACf,MAAMxK,OAAO,GAAG,IAAIlG,gBAAgB,CAACxB,OAAO,CAAC,IAAI,CAACmS,aAAa,EAAE,EAAE,IAAI,CAACC,4BAA4B,EAAE,EAAE,IAAI,CAACtO,MAAM,CAACiC,OAAO,CAAC;IAC5H,MAAM4G,OAAO,GAAG,IAAI3K,QAAQ,CAAChC,OAAO,CAAC;MACnC8F,IAAI,EAAE5E,OAAO,CAAC0J,IAAI,CAACyH;IACrB,CAAC,CAAC;IACF,IAAI,CAACxN,SAAS,CAACyN,qBAAqB,CAACP,KAAK,CAACpF,OAAO,CAAC;IAEnDhM,OAAO,CAAC4R,QAAQ,CAACjI,IAAI,CAAC5C,OAAO,CAAC,CAAC8K,IAAI,CAAC7F,OAAO,CAAC;EAC9C;EACA;AACF;AACA;;EAGEwF,aAAaA,CAAA,EAAG;IACd,MAAMpM,OAAO,GAAG,EAAE;IAElB,IAAI,IAAI,CAACjC,MAAM,CAACiC,OAAO,CAAC4B,cAAc,KAAK,IAAI,EAAE;MAC/C5B,OAAO,CAAC0M,IAAI,CAAC,mBAAmB,CAAC;IACnC,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC4B,cAAc,KAAK,KAAK,EAAE;MACvD5B,OAAO,CAAC0M,IAAI,CAAC,oBAAoB,CAAC;IACpC;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC6B,qBAAqB,KAAK,IAAI,EAAE;MACtD7B,OAAO,CAAC0M,IAAI,CAAC,0BAA0B,CAAC;IAC1C,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC6B,qBAAqB,KAAK,KAAK,EAAE;MAC9D7B,OAAO,CAAC0M,IAAI,CAAC,2BAA2B,CAAC;IAC3C;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC8B,iBAAiB,KAAK,IAAI,EAAE;MAClD9B,OAAO,CAAC0M,IAAI,CAAC,qBAAqB,CAAC;IACrC,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC8B,iBAAiB,KAAK,KAAK,EAAE;MAC1D9B,OAAO,CAAC0M,IAAI,CAAC,sBAAsB,CAAC;IACtC;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC+B,kBAAkB,KAAK,IAAI,EAAE;MACnD/B,OAAO,CAAC0M,IAAI,CAAC,sBAAsB,CAAC;IACtC,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC+B,kBAAkB,KAAK,KAAK,EAAE;MAC3D/B,OAAO,CAAC0M,IAAI,CAAC,uBAAuB,CAAC;IACvC;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACgC,gBAAgB,KAAK,IAAI,EAAE;MACjDhC,OAAO,CAAC0M,IAAI,CAAC,mBAAmB,CAAC;IACnC,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACgC,gBAAgB,KAAK,KAAK,EAAE;MACzDhC,OAAO,CAAC0M,IAAI,CAAC,oBAAoB,CAAC;IACpC;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACiC,0BAA0B,KAAK,IAAI,EAAE;MAC3DjC,OAAO,CAAC0M,IAAI,CAAC,gCAAgC,CAAC;IAChD,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACiC,0BAA0B,KAAK,KAAK,EAAE;MACnEjC,OAAO,CAAC0M,IAAI,CAAC,iCAAiC,CAAC;IACjD;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACkC,yBAAyB,KAAK,IAAI,EAAE;MAC1DlC,OAAO,CAAC0M,IAAI,CAAC,+BAA+B,CAAC;IAC/C,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACkC,yBAAyB,KAAK,KAAK,EAAE;MAClElC,OAAO,CAAC0M,IAAI,CAAC,gCAAgC,CAAC;IAChD;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACuB,SAAS,KAAK,IAAI,EAAE;MAC1CvB,OAAO,CAAC0M,IAAI,CAAE,iBAAgB,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACuB,SAAU,EAAC,CAAC;IAChE;IAEA,IAAI,IAAI,CAACxD,MAAM,CAACiC,OAAO,CAACwB,UAAU,KAAK,IAAI,EAAE;MAC3CxB,OAAO,CAAC0M,IAAI,CAAE,kBAAiB,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACwB,UAAW,EAAC,CAAC;IAClE;IAEA,IAAI,IAAI,CAACzD,MAAM,CAACiC,OAAO,CAACmC,0BAA0B,KAAK,IAAI,EAAE;MAC3DnC,OAAO,CAAC0M,IAAI,CAAC,8BAA8B,CAAC;IAC9C,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACmC,0BAA0B,KAAK,KAAK,EAAE;MACnEnC,OAAO,CAAC0M,IAAI,CAAC,+BAA+B,CAAC;IAC/C;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC2C,QAAQ,KAAK,IAAI,EAAE;MACzC3C,OAAO,CAAC0M,IAAI,CAAE,gBAAe,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAAC2C,QAAS,EAAC,CAAC;IAC9D;IAEA,IAAI,IAAI,CAAC5E,MAAM,CAACiC,OAAO,CAACoC,uBAAuB,KAAK,IAAI,EAAE;MACxDpC,OAAO,CAAC0M,IAAI,CAAC,2BAA2B,CAAC;IAC3C,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACoC,uBAAuB,KAAK,KAAK,EAAE;MAChEpC,OAAO,CAAC0M,IAAI,CAAC,4BAA4B,CAAC;IAC5C;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACqC,sBAAsB,KAAK,IAAI,EAAE;MACvDrC,OAAO,CAAC0M,IAAI,CAAC,0BAA0B,CAAC;IAC1C,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACqC,sBAAsB,KAAK,KAAK,EAAE;MAC/DrC,OAAO,CAAC0M,IAAI,CAAC,2BAA2B,CAAC;IAC3C;IAEA,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACwD,QAAQ,KAAK,IAAI,EAAE;MACzCxD,OAAO,CAAC0M,IAAI,CAAE,gBAAe,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACwD,QAAS,EAAC,CAAC;IAC9D;IAEA,IAAI,IAAI,CAACzF,MAAM,CAACiC,OAAO,CAACkB,wBAAwB,KAAK,IAAI,EAAE;MACzDlB,OAAO,CAAC0M,IAAI,CAAE,mCAAkC,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAAC5O,MAAM,CAACiC,OAAO,CAACkB,wBAAwB,CAAE,EAAC,CAAC;IAC7H;IAEA,IAAI,IAAI,CAACnD,MAAM,CAACiC,OAAO,CAACS,uBAAuB,KAAK,IAAI,EAAE;MACxDT,OAAO,CAAC0M,IAAI,CAAC,mBAAmB,CAAC;IACnC,CAAC,MAAM,IAAI,IAAI,CAAC3O,MAAM,CAACiC,OAAO,CAACS,uBAAuB,KAAK,KAAK,EAAE;MAChET,OAAO,CAAC0M,IAAI,CAAC,oBAAoB,CAAC;IACpC;IAEA,OAAO1M,OAAO,CAAC4M,IAAI,CAAC,IAAI,CAAC;EAC3B;EACA;AACF;AACA;;EAGEC,mBAAmBA,CAAA,EAAG;IACpB,IAAI,CAAClG,iBAAiB,EAAE;IACxB,IAAI,CAACb,IAAI,CAAC,SAAS,CAAC;EACtB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEgH,YAAYA,CAAC7N,OAAO,EAAE;IACpB,IAAI,CAAC8N,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAACyH,SAAS,EAAE,IAAI7Q,gBAAgB,CAACxB,OAAO,CAACgF,OAAO,CAAC+N,kBAAkB,EAAE,IAAI,CAACX,4BAA4B,EAAE,EAAE,IAAI,CAACtO,MAAM,CAACiC,OAAO,CAAC,CAAC;EACvK;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEiN,OAAOA,CAAChO,OAAO,EAAE;IACf,IAAI;MACFA,OAAO,CAACiO,kBAAkB,CAAC,IAAI,CAACxN,iBAAiB,CAAC;IACpD,CAAC,CAAC,OAAOkI,KAAK,EAAE;MACd3I,OAAO,CAAC2I,KAAK,GAAGA,KAAK;MACrBnB,OAAO,CAACC,QAAQ,CAAC,MAAM;QACrB,IAAI,CAAChI,KAAK,CAACwJ,GAAG,CAACN,KAAK,CAAChB,OAAO,CAAC;QAC7B3H,OAAO,CAACkI,QAAQ,CAACS,KAAK,CAAC;MACzB,CAAC,CAAC;MACF;IACF;IAEA,MAAMuF,UAAU,GAAG,EAAE;IACrBA,UAAU,CAACT,IAAI,CAAC;MACd3M,IAAI,EAAE3D,SAAS,CAACgR,KAAK,CAACC,QAAQ;MAC9BlI,IAAI,EAAE,WAAW;MACjB7K,KAAK,EAAE2E,OAAO,CAAC+N,kBAAkB;MACjCM,MAAM,EAAE,KAAK;MACbC,MAAM,EAAEzN,SAAS;MACjB0N,SAAS,EAAE1N,SAAS;MACpB2N,KAAK,EAAE3N;IACT,CAAC,CAAC;IAEF,IAAIb,OAAO,CAACkO,UAAU,CAACI,MAAM,EAAE;MAC7BJ,UAAU,CAACT,IAAI,CAAC;QACd3M,IAAI,EAAE3D,SAAS,CAACgR,KAAK,CAACC,QAAQ;QAC9BlI,IAAI,EAAE,QAAQ;QACd7K,KAAK,EAAE2E,OAAO,CAACyO,mBAAmB,CAACzO,OAAO,CAACkO,UAAU,CAAC;QACtDG,MAAM,EAAE,KAAK;QACbC,MAAM,EAAEzN,SAAS;QACjB0N,SAAS,EAAE1N,SAAS;QACpB2N,KAAK,EAAE3N;MACT,CAAC,CAAC;MACFqN,UAAU,CAACT,IAAI,CAAC,GAAGzN,OAAO,CAACkO,UAAU,CAAC;IACxC;IAEA,IAAI,CAACJ,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC8I,WAAW,EAAE,IAAInS,kBAAkB,CAACvB,OAAO,CAAC,eAAe,EAAEkT,UAAU,EAAE,IAAI,CAACd,4BAA4B,EAAE,EAAE,IAAI,CAACtO,MAAM,CAACiC,OAAO,EAAE,IAAI,CAACN,iBAAiB,CAAC,CAAC;EACpM;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEkO,WAAWA,CAACC,KAAK,EAAEC,iBAAiB,EAAE3G,QAAQ,EAAE;IAC9C,IAAInH,OAAO;IAEX,IAAImH,QAAQ,KAAKrH,SAAS,EAAE;MAC1BqH,QAAQ,GAAG2G,iBAAiB;MAC5B9N,OAAO,GAAG,CAAC,CAAC;IACd,CAAC,MAAM;MACLA,OAAO,GAAG8N,iBAAiB;IAC7B;IAEA,IAAI,OAAO9N,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAIL,SAAS,CAAC,sCAAsC,CAAC;IAC7D;IAEA,OAAO,IAAI7E,SAAS,CAACb,OAAO,CAAC4T,KAAK,EAAE,IAAI,CAACnO,iBAAiB,EAAE,IAAI,CAAC3B,MAAM,CAACiC,OAAO,EAAEA,OAAO,EAAEmH,QAAQ,CAAC;EACrG;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE4G,YAAYA,CAACC,QAAQ,EAAEC,IAAI,EAAE;IAC3BD,QAAQ,CAACE,gBAAgB,GAAG,IAAI;IAEhC,IAAID,IAAI,EAAE;MACR,IAAID,QAAQ,CAACG,aAAa,EAAE;QAC1B,MAAM,IAAIpK,KAAK,CAAC,yFAAyF,CAAC;MAC5G;MAEA,IAAIiK,QAAQ,CAACI,eAAe,EAAE;QAC5B,MAAM,IAAIrK,KAAK,CAAC,8FAA8F,CAAC;MACjH;MAEA,MAAMsK,SAAS,GAAGzT,OAAO,CAAC4R,QAAQ,CAACjI,IAAI,CAAC0J,IAAI,CAAC,CAAC,CAAC;MAC/C;;MAGAI,SAAS,CAAC1I,EAAE,CAAC,OAAO,EAAEN,GAAG,IAAI;QAC3B2I,QAAQ,CAACM,oBAAoB,CAACjG,OAAO,CAAChD,GAAG,CAAC;MAC5C,CAAC,CAAC,CAAC,CAAC;MACJ;;MAEA2I,QAAQ,CAACM,oBAAoB,CAAC3I,EAAE,CAAC,OAAO,EAAEN,GAAG,IAAI;QAC/CgJ,SAAS,CAAChG,OAAO,CAAChD,GAAG,CAAC;MACxB,CAAC,CAAC;MACFgJ,SAAS,CAAC5B,IAAI,CAACuB,QAAQ,CAACM,oBAAoB,CAAC;IAC/C,CAAC,MAAM,IAAI,CAACN,QAAQ,CAACG,aAAa,EAAE;MAClC;MACA;MACA;MACA;MACA;MACAH,QAAQ,CAACM,oBAAoB,CAACC,GAAG,EAAE;IACrC;IAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrBvP,OAAO,CAAC8J,MAAM,EAAE;IAClB,CAAC;IAED,MAAMpH,OAAO,GAAG,IAAItF,gBAAgB,CAACoS,eAAe,CAACT,QAAQ,CAAC;IAC9D,MAAM/O,OAAO,GAAG,IAAI1D,QAAQ,CAACtB,OAAO,CAAC+T,QAAQ,CAACU,gBAAgB,EAAE,EAAE9G,KAAK,IAAI;MACzEoG,QAAQ,CAAC1I,cAAc,CAAC,QAAQ,EAAEkJ,QAAQ,CAAC;MAE3C,IAAI5G,KAAK,EAAE;QACT,IAAIA,KAAK,CAAC8B,IAAI,KAAK,SAAS,EAAE;UAC5B9B,KAAK,CAAChB,OAAO,IAAI,8HAA8H;QACjJ;QAEAoH,QAAQ,CAACpG,KAAK,GAAGA,KAAK;QACtBoG,QAAQ,CAAC7G,QAAQ,CAACS,KAAK,CAAC;QACxB;MACF;MAEA,IAAI,CAACmF,WAAW,CAACiB,QAAQ,EAAE7S,OAAO,CAAC0J,IAAI,CAAC8J,SAAS,EAAEhN,OAAO,CAAC;IAC7D,CAAC,CAAC;IACFqM,QAAQ,CAACxI,IAAI,CAAC,QAAQ,EAAEgJ,QAAQ,CAAC;IACjC,IAAI,CAAC1B,YAAY,CAAC7N,OAAO,CAAC;EAC5B;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE2P,OAAOA,CAAC3P,OAAO,EAAE;IACf,MAAMkO,UAAU,GAAG,EAAE;IACrBA,UAAU,CAACT,IAAI,CAAC;MACd3M,IAAI,EAAE3D,SAAS,CAACgR,KAAK,CAACyB,GAAG;MACzB1J,IAAI,EAAE,QAAQ;MACd7K,KAAK,EAAEwF,SAAS;MAChBwN,MAAM,EAAE,IAAI;MACZC,MAAM,EAAEzN,SAAS;MACjB0N,SAAS,EAAE1N,SAAS;MACpB2N,KAAK,EAAE3N;IACT,CAAC,CAAC;IACFqN,UAAU,CAACT,IAAI,CAAC;MACd3M,IAAI,EAAE3D,SAAS,CAACgR,KAAK,CAACC,QAAQ;MAC9BlI,IAAI,EAAE,QAAQ;MACd7K,KAAK,EAAE2E,OAAO,CAACkO,UAAU,CAACI,MAAM,GAAGtO,OAAO,CAACyO,mBAAmB,CAACzO,OAAO,CAACkO,UAAU,CAAC,GAAG,IAAI;MACzFG,MAAM,EAAE,KAAK;MACbC,MAAM,EAAEzN,SAAS;MACjB0N,SAAS,EAAE1N,SAAS;MACpB2N,KAAK,EAAE3N;IACT,CAAC,CAAC;IACFqN,UAAU,CAACT,IAAI,CAAC;MACd3M,IAAI,EAAE3D,SAAS,CAACgR,KAAK,CAACC,QAAQ;MAC9BlI,IAAI,EAAE,MAAM;MACZ7K,KAAK,EAAE2E,OAAO,CAAC+N,kBAAkB;MACjCM,MAAM,EAAE,KAAK;MACbC,MAAM,EAAEzN,SAAS;MACjB0N,SAAS,EAAE1N,SAAS;MACpB2N,KAAK,EAAE3N;IACT,CAAC,CAAC;IACFb,OAAO,CAAC6P,SAAS,GAAG,IAAI,CAAC,CAAC;;IAE1B7P,OAAO,CAAC0G,EAAE,CAAC,aAAa,EAAE,CAACR,IAAI,EAAE7K,KAAK,KAAK;MACzC,IAAI6K,IAAI,KAAK,QAAQ,EAAE;QACrBlG,OAAO,CAAC8P,MAAM,GAAGzU,KAAK;MACxB,CAAC,MAAM;QACL2E,OAAO,CAAC2I,KAAK,GAAG,IAAI/L,OAAO,CAACqL,YAAY,CAAE,yCAAwC/B,IAAK,kBAAiB,CAAC;MAC3G;IACF,CAAC,CAAC;IACF,IAAI,CAAC4H,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC8I,WAAW,EAAE,IAAInS,kBAAkB,CAACvB,OAAO,CAAC,YAAY,EAAEkT,UAAU,EAAE,IAAI,CAACd,4BAA4B,EAAE,EAAE,IAAI,CAACtO,MAAM,CAACiC,OAAO,EAAE,IAAI,CAACN,iBAAiB,CAAC,CAAC;EACjM;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEsP,SAASA,CAAC/P,OAAO,EAAE;IACjB,MAAMkO,UAAU,GAAG,EAAE;IACrBA,UAAU,CAACT,IAAI,CAAC;MACd3M,IAAI,EAAE3D,SAAS,CAACgR,KAAK,CAACyB,GAAG;MACzB1J,IAAI,EAAE,QAAQ;MACd;MACA7K,KAAK,EAAE2E,OAAO,CAAC8P,MAAM;MACrBzB,MAAM,EAAE,KAAK;MACbC,MAAM,EAAEzN,SAAS;MACjB0N,SAAS,EAAE1N,SAAS;MACpB2N,KAAK,EAAE3N;IACT,CAAC,CAAC;IACF,IAAI,CAACiN,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC8I,WAAW,EAAE,IAAInS,kBAAkB,CAACvB,OAAO,CAAC,cAAc,EAAEkT,UAAU,EAAE,IAAI,CAACd,4BAA4B,EAAE,EAAE,IAAI,CAACtO,MAAM,CAACiC,OAAO,EAAE,IAAI,CAACN,iBAAiB,CAAC,CAAC;EACnM;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEuP,OAAOA,CAAChQ,OAAO,EAAEkO,UAAU,EAAE;IAC3B,MAAM+B,iBAAiB,GAAG,EAAE;IAC5BA,iBAAiB,CAACxC,IAAI,CAAC;MACrB3M,IAAI,EAAE3D,SAAS,CAACgR,KAAK,CAACyB,GAAG;MACzB1J,IAAI,EAAE,QAAQ;MACd;MACA7K,KAAK,EAAE2E,OAAO,CAAC8P,MAAM;MACrBzB,MAAM,EAAE,KAAK;MACbC,MAAM,EAAEzN,SAAS;MACjB0N,SAAS,EAAE1N,SAAS;MACpB2N,KAAK,EAAE3N;IACT,CAAC,CAAC;IAEF,IAAI;MACF,KAAK,IAAIqP,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGnQ,OAAO,CAACkO,UAAU,CAACI,MAAM,EAAE4B,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAC7D,MAAME,SAAS,GAAGpQ,OAAO,CAACkO,UAAU,CAACgC,CAAC,CAAC;QACvCD,iBAAiB,CAACxC,IAAI,CAAC;UAAE,GAAG2C,SAAS;UACnC/U,KAAK,EAAE+U,SAAS,CAACtP,IAAI,CAACuP,QAAQ,CAACnC,UAAU,GAAGA,UAAU,CAACkC,SAAS,CAAClK,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,CAACzF,iBAAiB;QACvG,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOkI,KAAK,EAAE;MACd3I,OAAO,CAAC2I,KAAK,GAAGA,KAAK;MACrBnB,OAAO,CAACC,QAAQ,CAAC,MAAM;QACrB,IAAI,CAAChI,KAAK,CAACwJ,GAAG,CAACN,KAAK,CAAChB,OAAO,CAAC;QAC7B3H,OAAO,CAACkI,QAAQ,CAACS,KAAK,CAAC;MACzB,CAAC,CAAC;MACF;IACF;IAEA,IAAI,CAACmF,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC8I,WAAW,EAAE,IAAInS,kBAAkB,CAACvB,OAAO,CAAC,YAAY,EAAEiV,iBAAiB,EAAE,IAAI,CAAC7C,4BAA4B,EAAE,EAAE,IAAI,CAACtO,MAAM,CAACiC,OAAO,EAAE,IAAI,CAACN,iBAAiB,CAAC,CAAC;EACxM;EACA;AACF;AACA;AACA;AACA;;EAGE6P,aAAaA,CAACtQ,OAAO,EAAE;IACrB,IAAI;MACFA,OAAO,CAACiO,kBAAkB,CAAC,IAAI,CAACxN,iBAAiB,CAAC;IACpD,CAAC,CAAC,OAAOkI,KAAK,EAAE;MACd3I,OAAO,CAAC2I,KAAK,GAAGA,KAAK;MACrBnB,OAAO,CAACC,QAAQ,CAAC,MAAM;QACrB,IAAI,CAAChI,KAAK,CAACwJ,GAAG,CAACN,KAAK,CAAChB,OAAO,CAAC;QAC7B3H,OAAO,CAACkI,QAAQ,CAACS,KAAK,CAAC;MACzB,CAAC,CAAC;MACF;IACF;IAEA,IAAI,CAACmF,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC8I,WAAW,EAAE,IAAInS,kBAAkB,CAACvB,OAAO,CAACgF,OAAO,CAAC+N,kBAAkB,EAAE/N,OAAO,CAACkO,UAAU,EAAE,IAAI,CAACd,4BAA4B,EAAE,EAAE,IAAI,CAACtO,MAAM,CAACiC,OAAO,EAAE,IAAI,CAACN,iBAAiB,CAAC,CAAC;EACvN;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE8P,gBAAgBA,CAACrI,QAAQ,EAAEhC,IAAI,GAAG,EAAE,EAAEzC,cAAc,GAAG,IAAI,CAAC3E,MAAM,CAACiC,OAAO,CAAC0C,cAAc,EAAE;IACzF,CAAC,CAAC,EAAE9G,YAAY,CAACoI,yBAAyB,EAAEtB,cAAc,EAAE,gBAAgB,CAAC;IAC7E,MAAM+M,WAAW,GAAG,IAAI7T,YAAY,CAAC8T,WAAW,CAACvK,IAAI,EAAEzC,cAAc,CAAC;IAEtE,IAAI,IAAI,CAAC3E,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAG,KAAK,EAAE;MAC1C,OAAO,IAAI,CAACuJ,YAAY,CAAC,IAAIvR,QAAQ,CAACtB,OAAO,CAAC,kCAAkC,GAAGwV,WAAW,CAACE,oBAAoB,EAAE,GAAG,cAAc,GAAGF,WAAW,CAACtK,IAAI,EAAEE,GAAG,IAAI;QAChK,IAAI,CAACjH,gBAAgB,EAAE;QAEvB,IAAI,IAAI,CAACA,gBAAgB,KAAK,CAAC,EAAE;UAC/B,IAAI,CAACF,aAAa,GAAG,IAAI;QAC3B;QAEAiJ,QAAQ,CAAC9B,GAAG,CAAC;MACf,CAAC,CAAC,CAAC;IACL;IAEA,MAAMpG,OAAO,GAAG,IAAI1D,QAAQ,CAACtB,OAAO,CAAC6F,SAAS,EAAEuF,GAAG,IAAI;MACrD,OAAO8B,QAAQ,CAAC9B,GAAG,EAAE,IAAI,CAACgH,4BAA4B,EAAE,CAAC;IAC3D,CAAC,CAAC;IACF,OAAO,IAAI,CAACU,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC+K,mBAAmB,EAAEH,WAAW,CAACI,YAAY,CAAC,IAAI,CAACxD,4BAA4B,EAAE,CAAC,CAAC;EACnI;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEyD,iBAAiBA,CAAC3I,QAAQ,EAAEhC,IAAI,GAAG,EAAE,EAAE;IACrC,MAAMsK,WAAW,GAAG,IAAI7T,YAAY,CAAC8T,WAAW,CAACvK,IAAI,CAAC;IAEtD,IAAI,IAAI,CAACpH,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAG,KAAK,EAAE;MAC1C,OAAO,IAAI,CAACuJ,YAAY,CAAC,IAAIvR,QAAQ,CAACtB,OAAO,CAAC,cAAc,GAAGwV,WAAW,CAACtK,IAAI,EAAEE,GAAG,IAAI;QACtF,IAAI,CAACjH,gBAAgB,EAAE;QAEvB,IAAI,IAAI,CAACA,gBAAgB,KAAK,CAAC,EAAE;UAC/B,IAAI,CAACF,aAAa,GAAG,KAAK;QAC5B;QAEAiJ,QAAQ,CAAC9B,GAAG,CAAC;MACf,CAAC,CAAC,CAAC;IACL;IAEA,MAAMpG,OAAO,GAAG,IAAI1D,QAAQ,CAACtB,OAAO,CAAC6F,SAAS,EAAEqH,QAAQ,CAAC;IACzD,OAAO,IAAI,CAAC4F,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC+K,mBAAmB,EAAEH,WAAW,CAACM,aAAa,CAAC,IAAI,CAAC1D,4BAA4B,EAAE,CAAC,CAAC;EACpI;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE2D,mBAAmBA,CAAC7I,QAAQ,EAAEhC,IAAI,GAAG,EAAE,EAAE;IACvC,MAAMsK,WAAW,GAAG,IAAI7T,YAAY,CAAC8T,WAAW,CAACvK,IAAI,CAAC;IAEtD,IAAI,IAAI,CAACpH,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAG,KAAK,EAAE;MAC1C,OAAO,IAAI,CAACuJ,YAAY,CAAC,IAAIvR,QAAQ,CAACtB,OAAO,CAAC,gBAAgB,GAAGwV,WAAW,CAACtK,IAAI,EAAEE,GAAG,IAAI;QACxF,IAAI,CAACjH,gBAAgB,EAAE;QAEvB,IAAI,IAAI,CAACA,gBAAgB,KAAK,CAAC,EAAE;UAC/B,IAAI,CAACF,aAAa,GAAG,KAAK;QAC5B;QAEAiJ,QAAQ,CAAC9B,GAAG,CAAC;MACf,CAAC,CAAC,CAAC;IACL;IAEA,MAAMpG,OAAO,GAAG,IAAI1D,QAAQ,CAACtB,OAAO,CAAC6F,SAAS,EAAEqH,QAAQ,CAAC;IACzD,OAAO,IAAI,CAAC4F,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC+K,mBAAmB,EAAEH,WAAW,CAACQ,eAAe,CAAC,IAAI,CAAC5D,4BAA4B,EAAE,CAAC,CAAC;EACtI;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE6D,eAAeA,CAAC/I,QAAQ,EAAEhC,IAAI,EAAE;IAC9B,MAAMsK,WAAW,GAAG,IAAI7T,YAAY,CAAC8T,WAAW,CAACvK,IAAI,CAAC;IAEtD,IAAI,IAAI,CAACpH,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAG,KAAK,EAAE;MAC1C,OAAO,IAAI,CAACuJ,YAAY,CAAC,IAAIvR,QAAQ,CAACtB,OAAO,CAAC,YAAY,GAAGwV,WAAW,CAACtK,IAAI,EAAEE,GAAG,IAAI;QACpF,IAAI,CAACjH,gBAAgB,EAAE;QACvB+I,QAAQ,CAAC9B,GAAG,CAAC;MACf,CAAC,CAAC,CAAC;IACL;IAEA,MAAMpG,OAAO,GAAG,IAAI1D,QAAQ,CAACtB,OAAO,CAAC6F,SAAS,EAAEqH,QAAQ,CAAC;IACzD,OAAO,IAAI,CAAC4F,WAAW,CAAC9N,OAAO,EAAE9D,OAAO,CAAC0J,IAAI,CAAC+K,mBAAmB,EAAEH,WAAW,CAACU,WAAW,CAAC,IAAI,CAAC9D,4BAA4B,EAAE,CAAC,CAAC;EAClI;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGEoD,WAAWA,CAACW,EAAE,EAAE1N,cAAc,EAAE;IAC9B,IAAI,OAAO0N,EAAE,KAAK,UAAU,EAAE;MAC5B,MAAM,IAAIzQ,SAAS,CAAC,yBAAyB,CAAC;IAChD;IAEA,MAAM0Q,YAAY,GAAG,IAAI,CAACnS,aAAa;IAEvC,MAAMiH,IAAI,GAAG,WAAW,GAAG5K,OAAO,CAACN,OAAO,CAACqW,WAAW,CAAC,EAAE,CAAC,CAACjG,QAAQ,CAAC,KAAK,CAAC;IAE1E,MAAMkG,MAAM,GAAGA,CAAClL,GAAG,EAAEmL,IAAI,EAAE,GAAGzK,IAAI,KAAK;MACrC,IAAIV,GAAG,EAAE;QACP,IAAI,IAAI,CAACnH,aAAa,IAAI,IAAI,CAACa,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAAC+L,SAAS,EAAE;UAC7D,IAAI,CAACT,mBAAmB,CAACU,KAAK,IAAI;YAChCF,IAAI,CAACE,KAAK,IAAIrL,GAAG,EAAE,GAAGU,IAAI,CAAC;UAC7B,CAAC,EAAEZ,IAAI,CAAC;QACV,CAAC,MAAM;UACLqL,IAAI,CAACnL,GAAG,EAAE,GAAGU,IAAI,CAAC;QACpB;MACF,CAAC,MAAM,IAAIsK,YAAY,EAAE;QACvB,IAAI,IAAI,CAACtS,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAG,KAAK,EAAE;UAC1C,IAAI,CAACnF,gBAAgB,EAAE;QACzB;QAEAoS,IAAI,CAAC,IAAI,EAAE,GAAGzK,IAAI,CAAC;MACrB,CAAC,MAAM;QACL,IAAI,CAAC+J,iBAAiB,CAACY,KAAK,IAAI;UAC9BF,IAAI,CAACE,KAAK,EAAE,GAAG3K,IAAI,CAAC;QACtB,CAAC,EAAEZ,IAAI,CAAC;MACV;IACF,CAAC;IAED,IAAIkL,YAAY,EAAE;MAChB,OAAO,IAAI,CAACH,eAAe,CAAC7K,GAAG,IAAI;QACjC,IAAIA,GAAG,EAAE;UACP,OAAO+K,EAAE,CAAC/K,GAAG,CAAC;QAChB;QAEA,IAAI3C,cAAc,EAAE;UAClB,OAAO,IAAI,CAACoK,YAAY,CAAC,IAAIvR,QAAQ,CAACtB,OAAO,CAAC,kCAAkC,GAAG,IAAI,CAAC0S,qBAAqB,CAACjK,cAAc,CAAC,EAAE2C,GAAG,IAAI;YACpI,OAAO+K,EAAE,CAAC/K,GAAG,EAAEkL,MAAM,CAAC;UACxB,CAAC,CAAC,CAAC;QACL,CAAC,MAAM;UACL,OAAOH,EAAE,CAAC,IAAI,EAAEG,MAAM,CAAC;QACzB;MACF,CAAC,EAAEpL,IAAI,CAAC;IACV,CAAC,MAAM;MACL,OAAO,IAAI,CAACqK,gBAAgB,CAACnK,GAAG,IAAI;QAClC,IAAIA,GAAG,EAAE;UACP,OAAO+K,EAAE,CAAC/K,GAAG,CAAC;QAChB;QAEA,OAAO+K,EAAE,CAAC,IAAI,EAAEG,MAAM,CAAC;MACzB,CAAC,EAAEpL,IAAI,EAAEzC,cAAc,CAAC;IAC1B;EACF;EACA;AACF;AACA;;EAGEqK,WAAWA,CAAC9N,OAAO,EAAE0R,UAAU,EAAEhP,OAAO,EAAE;IACxC,IAAI,IAAI,CAAC5C,KAAK,KAAK,IAAI,CAAC2F,KAAK,CAAC+L,SAAS,EAAE;MACvC,MAAM7J,OAAO,GAAG,mCAAmC,GAAG,IAAI,CAAClC,KAAK,CAAC+L,SAAS,CAACtL,IAAI,GAAG,kBAAkB,GAAG,IAAI,CAACpG,KAAK,CAACoG,IAAI,GAAG,QAAQ;MACjI,IAAI,CAACzG,KAAK,CAACwJ,GAAG,CAACtB,OAAO,CAAC;MACvB3H,OAAO,CAACkI,QAAQ,CAAC,IAAItL,OAAO,CAACqL,YAAY,CAACN,OAAO,EAAE,eAAe,CAAC,CAAC;IACtE,CAAC,MAAM,IAAI3H,OAAO,CAAC2R,QAAQ,EAAE;MAC3BnK,OAAO,CAACC,QAAQ,CAAC,MAAM;QACrBzH,OAAO,CAACkI,QAAQ,CAAC,IAAItL,OAAO,CAACqL,YAAY,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;MACpE,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAIyJ,UAAU,KAAKxV,OAAO,CAAC0J,IAAI,CAACyH,SAAS,EAAE;QACzC,IAAI,CAACjO,UAAU,GAAG,IAAI;MACxB,CAAC,MAAM;QACL,IAAI,CAACA,UAAU,GAAG,KAAK;MACzB;MAEA,IAAI,CAACY,OAAO,GAAGA,OAAO;MACtBA,OAAO,CAAC4R,UAAU,GAAG,IAAI;MACzB5R,OAAO,CAAC6R,QAAQ,GAAG,CAAC;MACpB7R,OAAO,CAACgP,IAAI,GAAG,EAAE;MACjBhP,OAAO,CAAC8R,GAAG,GAAG,EAAE;MAEhB,MAAMvC,QAAQ,GAAGA,CAAA,KAAM;QACrBwC,aAAa,CAACC,MAAM,CAACrK,OAAO,CAAC;QAC7BoK,aAAa,CAAC3I,OAAO,CAAC,IAAIxM,OAAO,CAACqL,YAAY,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;;QAEzEN,OAAO,CAACsK,MAAM,GAAG,IAAI;QACrBtK,OAAO,CAAC2H,GAAG,EAAE;QAEb,IAAItP,OAAO,YAAY1D,QAAQ,CAACtB,OAAO,IAAIgF,OAAO,CAACkS,MAAM,EAAE;UACzD;UACAlS,OAAO,CAACmS,MAAM,EAAE;QAClB;MACF,CAAC;MAEDnS,OAAO,CAACuG,IAAI,CAAC,QAAQ,EAAEgJ,QAAQ,CAAC;MAChC,IAAI,CAAC7F,kBAAkB,EAAE;MACzB,MAAM/B,OAAO,GAAG,IAAI3K,QAAQ,CAAChC,OAAO,CAAC;QACnC8F,IAAI,EAAE4Q,UAAU;QAChBU,eAAe,EAAE,IAAI,CAACrS;MACxB,CAAC,CAAC;MACF,IAAI,CAACF,SAAS,CAACyN,qBAAqB,CAACP,KAAK,CAACpF,OAAO,CAAC;MACnD,IAAI,CAACnB,YAAY,CAAC,IAAI,CAACf,KAAK,CAAC4M,mBAAmB,CAAC;MACjD1K,OAAO,CAACpB,IAAI,CAAC,QAAQ,EAAE,MAAM;QAC3BvG,OAAO,CAACqG,cAAc,CAAC,QAAQ,EAAEkJ,QAAQ,CAAC;QAC1CvP,OAAO,CAACuG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC/F,uBAAuB,CAAC;QACpD,IAAI,CAACT,4BAA4B,GAAG,KAAK;QACzC,IAAI,CAACN,KAAK,CAACiD,OAAO,CAAC,YAAY;UAC7B,OAAOA,OAAO,CAAC0I,QAAQ,CAAC,IAAI,CAAC;QAC/B,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAM2G,aAAa,GAAGpW,OAAO,CAAC4R,QAAQ,CAACjI,IAAI,CAAC5C,OAAO,CAAC;MAEpDqP,aAAa,CAACxL,IAAI,CAAC,OAAO,EAAEoC,KAAK,IAAI;QACnCoJ,aAAa,CAACC,MAAM,CAACrK,OAAO,CAAC,CAAC,CAAC;;QAE/B3H,OAAO,CAAC2I,KAAK,KAAK3I,OAAO,CAAC2I,KAAK,GAAGA,KAAK,CAAC;QACxChB,OAAO,CAACsK,MAAM,GAAG,IAAI;QACrBtK,OAAO,CAAC2H,GAAG,EAAE;MACf,CAAC,CAAC;MACFyC,aAAa,CAACvE,IAAI,CAAC7F,OAAO,CAAC;IAC7B;EACF;EACA;AACF;AACA;;EAGEmC,MAAMA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAAC9J,OAAO,EAAE;MACjB,OAAO,KAAK;IACd;IAEA,IAAI,IAAI,CAACA,OAAO,CAAC2R,QAAQ,EAAE;MACzB,OAAO,KAAK;IACd;IAEA,IAAI,CAAC3R,OAAO,CAAC8J,MAAM,EAAE;IACrB,OAAO,IAAI;EACb;EACA;AACF;AACA;AACA;AACA;AACA;;EAGEwI,KAAKA,CAACpK,QAAQ,EAAE;IACd,MAAMlI,OAAO,GAAG,IAAI1D,QAAQ,CAACtB,OAAO,CAAC,IAAI,CAACmS,aAAa,EAAE,EAAE/G,GAAG,IAAI;MAChE,IAAI,IAAI,CAACtH,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAG,KAAK,EAAE;QAC1C,IAAI,CAACrF,aAAa,GAAG,KAAK;MAC5B;MAEAiJ,QAAQ,CAAC9B,GAAG,CAAC;IACf,CAAC,CAAC;IACF,IAAI,CAACrG,4BAA4B,GAAG,IAAI;IACxC,IAAI,CAAC8N,YAAY,CAAC7N,OAAO,CAAC;EAC5B;EACA;AACF;AACA;;EAGEoN,4BAA4BA,CAAA,EAAG;IAC7B,OAAO,IAAI,CAAClO,sBAAsB,CAAC,IAAI,CAACA,sBAAsB,CAACoP,MAAM,GAAG,CAAC,CAAC;EAC5E;EACA;AACF;AACA;;EAGEZ,qBAAqBA,CAACjK,cAAc,EAAE;IACpC,QAAQA,cAAc;MACpB,KAAK9G,YAAY,CAACuF,eAAe,CAACqQ,gBAAgB;QAChD,OAAO,kBAAkB;MAE3B,KAAK5V,YAAY,CAACuF,eAAe,CAACsQ,eAAe;QAC/C,OAAO,iBAAiB;MAE1B,KAAK7V,YAAY,CAACuF,eAAe,CAACuQ,YAAY;QAC5C,OAAO,cAAc;MAEvB,KAAK9V,YAAY,CAACuF,eAAe,CAACwQ,QAAQ;QACxC,OAAO,UAAU;MAEnB;QACE,OAAO,gBAAgB;IAAC;EAE9B;AAEF;AAEA,SAASC,gBAAgBA,CAAChK,KAAK,EAAE;EAC/B,IAAIA,KAAK,YAAYtL,iBAAiB,CAACrC,OAAO,EAAE;IAC9C2N,KAAK,GAAGA,KAAK,CAACiK,MAAM,CAAC,CAAC,CAAC;EACzB;EAEA,OAAOjK,KAAK,YAAY/L,OAAO,CAACqJ,eAAe,IAAI,CAAC,CAAC0C,KAAK,CAACkK,WAAW;AACxE;AAEA,IAAIC,QAAQ,GAAGnU,UAAU;AACzBvD,OAAO,CAACJ,OAAO,GAAG8X,QAAQ;AAC1BC,MAAM,CAAC3X,OAAO,GAAGuD,UAAU;AAC3BA,UAAU,CAACqU,SAAS,CAACvN,KAAK,GAAG;EAC3BC,WAAW,EAAE;IACXQ,IAAI,EAAE,aAAa;IACnBqE,MAAM,EAAE,CAAC;EACX,CAAC;EACD9D,UAAU,EAAE;IACVP,IAAI,EAAE,YAAY;IAClBiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAI,CAAClD,oBAAoB,EAAE;IAC7B,CAAC;IACDsD,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACDmC,aAAa,EAAE;IACbjD,IAAI,EAAE,cAAc;IACpBiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MAAA,IAAA8I,KAAA;MACjBnY,iBAAA,CAAC,aAAY;QACX,IAAIqF,aAAa,GAAGkF,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC;QACnC,IAAIoC,OAAO;QAEX,IAAI;UACFA,OAAO,SAASsL,KAAI,CAACpT,SAAS,CAACqT,WAAW,EAAE;QAC9C,CAAC,CAAC,OAAO9M,GAAG,EAAE;UACZ,OAAO6M,KAAI,CAACrK,WAAW,CAACxC,GAAG,CAAC;QAC9B;QAAC,IAAA+M,yBAAA;QAAA,IAAAC,iBAAA;QAAA,IAAAC,cAAA;QAAA;UAED,SAAAC,SAAA,GAAArY,cAAA,CAAyB0M,OAAO,GAAA4L,KAAA,EAAAJ,yBAAA,KAAAI,KAAA,SAAAD,SAAA,CAAAE,IAAA,IAAAjC,IAAA,EAAA4B,yBAAA,UAAE;YAAA,MAAjB3Q,IAAI,GAAA+Q,KAAA,CAAAlY,KAAA;YAAA;cACnB8E,aAAa,GAAGkF,MAAM,CAACoO,MAAM,CAAC,CAACtT,aAAa,EAAEqC,IAAI,CAAC,CAAC;YAAC;UACvD;QAAC,SAAA4D,GAAA;UAAAgN,iBAAA;UAAAC,cAAA,GAAAjN,GAAA;QAAA;UAAA;YAAA,IAAA+M,yBAAA,IAAAG,SAAA,CAAAI,MAAA;cAAA,MAAAJ,SAAA,CAAAI,MAAA;YAAA;UAAA;YAAA,IAAAN,iBAAA;cAAA,MAAAC,cAAA;YAAA;UAAA;QAAA;QAED,MAAMM,eAAe,GAAG,IAAIxX,gBAAgB,CAACnB,OAAO,CAACmF,aAAa,CAAC;QACnE8S,KAAI,CAACxT,KAAK,CAACiD,OAAO,CAAC,YAAY;UAC7B,OAAOiR,eAAe,CAACvI,QAAQ,CAAC,IAAI,CAAC;QACvC,CAAC,CAAC;QAEF,IAAIuI,eAAe,CAAC5U,eAAe,KAAK,CAAC,EAAE;UACzCkU,KAAI,CAAClU,eAAe,GAAG,IAAI;QAC7B;QAEA,IAAI4U,eAAe,CAACC,gBAAgB,KAAK,IAAI,IAAID,eAAe,CAACC,gBAAgB,KAAK,KAAK,EAAE;UAC3F,IAAI,CAACX,KAAI,CAACnU,MAAM,CAACiC,OAAO,CAACsC,OAAO,EAAE;YAChC4P,KAAI,CAACpM,IAAI,CAAC,SAAS,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAAC,kEAAkE,EAAE,UAAU,CAAC,CAAC;YACjI,OAAOgN,KAAI,CAAClM,KAAK,EAAE;UACrB;UAEA,IAAI;YACF,IAAI8M,iBAAiB;YAErBZ,KAAI,CAACzM,YAAY,CAACyM,KAAI,CAACxN,KAAK,CAAC+E,sBAAsB,CAAC;YACpD,MAAMyI,KAAI,CAACpT,SAAS,CAACiU,QAAQ,CAACb,KAAI,CAACjU,oBAAoB,EAAE,CAAC,CAAC6U,iBAAiB,GAAGZ,KAAI,CAACrT,WAAW,MAAM,IAAI,IAAIiU,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAAClT,MAAM,KAAKsS,KAAI,CAACnU,MAAM,CAAC6B,MAAM,EAAEsS,KAAI,CAACnU,MAAM,CAACiC,OAAO,CAAC0D,sBAAsB,CAAC;UACnP,CAAC,CAAC,OAAO2B,GAAG,EAAE;YACZ,OAAO6M,KAAI,CAACrK,WAAW,CAACxC,GAAG,CAAC;UAC9B;QACF;QAEA6M,KAAI,CAAC5H,gBAAgB,EAAE;QACvB,MAAM;UACJzK;QACF,CAAC,GAAGqS,KAAI,CAACnU,MAAM;QAEf,QAAQ8B,cAAc,CAACE,IAAI;UACzB,KAAK,iCAAiC;UACtC,KAAK,+BAA+B;UACpC,KAAK,wCAAwC;UAC7C,KAAK,iDAAiD;UACtD,KAAK,gCAAgC;YACnCmS,KAAI,CAACzM,YAAY,CAACyM,KAAI,CAACxN,KAAK,CAACsO,wBAAwB,CAAC;YACtD;UAEF,KAAK,MAAM;YACTd,KAAI,CAACzM,YAAY,CAACyM,KAAI,CAACxN,KAAK,CAACuO,qBAAqB,CAAC;YACnD;UAEF;YACEf,KAAI,CAACzM,YAAY,CAACyM,KAAI,CAACxN,KAAK,CAACwH,+BAA+B,CAAC;YAC7D;QAAM;MAEZ,CAAC,GAAG,CAACgH,KAAK,CAAC7N,GAAG,IAAI;QAChBoB,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,MAAMrB,GAAG;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDmE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACD0D,SAAS,EAAE;IACTxE,IAAI,EAAE,WAAW;IACjBiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAI,CAACvC,iBAAiB,CAACrJ,YAAY,CAACE,QAAQ,CAAC;IAC/C,CAAC;IACD8L,MAAM,EAAE;MACN5C,OAAO,EAAE,SAAAA,CAAA,EAAY,CAAC,CAAC;MACvBiB,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDkN,SAAS,EAAE,SAAAA,CAAA,EAAY;QACrB,IAAI,CAAC1N,YAAY,CAAC,IAAI,CAACf,KAAK,CAACgB,UAAU,CAAC;MAC1C;IACF;EACF,CAAC;EACDkE,uBAAuB,EAAE;IACvBzE,IAAI,EAAE,yBAAyB;IAC/BiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAI,CAAC9K,sBAAsB,EAAE;MAC7B,IAAI,CAACuI,iBAAiB,CAACrJ,YAAY,CAACG,KAAK,CAAC;IAC5C,CAAC;IACD6L,MAAM,EAAE;MACN5C,OAAO,EAAE,SAAAA,CAAA,EAAY,CAAC,CAAC;MACvBiB,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDmN,KAAK,EAAE,SAAAA,CAAA,EAAY;QACjB,IAAI,CAACxK,gBAAgB,EAAE;MACzB;IACF;EACF,CAAC;EACDa,sBAAsB,EAAE;IACtBtE,IAAI,EAAE,uBAAuB;IAC7BqE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACDiG,+BAA+B,EAAE;IAC/B/G,IAAI,EAAE,6BAA6B;IACnCiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MAAA,IAAAiK,MAAA;MACjBtZ,iBAAA,CAAC,aAAY;QACX,IAAI6M,OAAO;QAEX,IAAI;UACFA,OAAO,SAASyM,MAAI,CAACvU,SAAS,CAACqT,WAAW,EAAE;QAC9C,CAAC,CAAC,OAAO9M,GAAG,EAAE;UACZ,OAAOgO,MAAI,CAACxL,WAAW,CAACxC,GAAG,CAAC;QAC9B;QAEA,MAAMgC,OAAO,GAAG,IAAI5K,QAAQ,CAAC6W,kBAAkB,CAACD,MAAI,CAAC;QACrD,MAAME,iBAAiB,GAAGF,MAAI,CAACjM,uBAAuB,CAACR,OAAO,EAAES,OAAO,CAAC;QACxE,MAAM,CAAC,CAAC,EAAErM,OAAO,CAACwK,IAAI,EAAE+N,iBAAiB,EAAE,KAAK,CAAC;QAEjD,IAAIlM,OAAO,CAACmM,gBAAgB,EAAE;UAC5B,IAAInM,OAAO,CAACxI,WAAW,EAAE;YACvBwU,MAAI,CAACxU,WAAW,GAAGwI,OAAO,CAACxI,WAAW;YACtCwU,MAAI,CAAC5N,YAAY,CAAC4N,MAAI,CAAC3O,KAAK,CAACiF,SAAS,CAAC;UACzC,CAAC,MAAM;YACL0J,MAAI,CAAC5N,YAAY,CAAC4N,MAAI,CAAC3O,KAAK,CAAC+O,6BAA6B,CAAC;UAC7D;QACF,CAAC,MAAM,IAAIJ,MAAI,CAAC5U,UAAU,EAAE;UAC1B,IAAImT,gBAAgB,CAACyB,MAAI,CAAC5U,UAAU,CAAC,EAAE;YACrC4U,MAAI,CAAC3U,KAAK,CAACwJ,GAAG,CAAC,qCAAqC,CAAC;YACrDmL,MAAI,CAAC5N,YAAY,CAAC4N,MAAI,CAAC3O,KAAK,CAACkF,uBAAuB,CAAC;UACvD,CAAC,MAAM;YACLyJ,MAAI,CAACvN,IAAI,CAAC,SAAS,EAAEuN,MAAI,CAAC5U,UAAU,CAAC;YACrC4U,MAAI,CAAC5N,YAAY,CAAC4N,MAAI,CAAC3O,KAAK,CAACuB,KAAK,CAAC;UACrC;QACF,CAAC,MAAM;UACLoN,MAAI,CAACvN,IAAI,CAAC,SAAS,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;UAC5EmO,MAAI,CAAC5N,YAAY,CAAC4N,MAAI,CAAC3O,KAAK,CAACuB,KAAK,CAAC;QACrC;MACF,CAAC,GAAG,CAACiN,KAAK,CAAC7N,GAAG,IAAI;QAChBoB,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,MAAMrB,GAAG;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDmE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACDgN,qBAAqB,EAAE;IACrB9N,IAAI,EAAE,yBAAyB;IAC/BiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MAAA,IAAAsK,MAAA;MACjB3Z,iBAAA,CAAC,aAAY;QACX,OAAO,IAAI,EAAE;UACX,IAAI6M,OAAO;UAEX,IAAI;YACFA,OAAO,SAAS8M,MAAI,CAAC5U,SAAS,CAACqT,WAAW,EAAE;UAC9C,CAAC,CAAC,OAAO9M,GAAG,EAAE;YACZ,OAAOqO,MAAI,CAAC7L,WAAW,CAACxC,GAAG,CAAC;UAC9B;UAEA,MAAMgC,OAAO,GAAG,IAAI5K,QAAQ,CAAC6W,kBAAkB,CAACI,MAAI,CAAC;UACrD,MAAMH,iBAAiB,GAAGG,MAAI,CAACtM,uBAAuB,CAACR,OAAO,EAAES,OAAO,CAAC;UACxE,MAAM,CAAC,CAAC,EAAErM,OAAO,CAACwK,IAAI,EAAE+N,iBAAiB,EAAE,KAAK,CAAC;UAEjD,IAAIlM,OAAO,CAACmM,gBAAgB,EAAE;YAC5B,IAAInM,OAAO,CAACxI,WAAW,EAAE;cACvB6U,MAAI,CAAC7U,WAAW,GAAGwI,OAAO,CAACxI,WAAW;cACtC,OAAO6U,MAAI,CAACjO,YAAY,CAACiO,MAAI,CAAChP,KAAK,CAACiF,SAAS,CAAC;YAChD,CAAC,MAAM;cACL,OAAO+J,MAAI,CAACjO,YAAY,CAACiO,MAAI,CAAChP,KAAK,CAAC+O,6BAA6B,CAAC;YACpE;UACF,CAAC,MAAM,IAAIC,MAAI,CAAC/U,UAAU,EAAE;YAC1B,MAAMkB,cAAc,GAAG6T,MAAI,CAAC3V,MAAM,CAAC8B,cAAc;YACjD,MAAM8B,OAAO,GAAG,IAAIrG,YAAY,CAACrB,OAAO,CAAC;cACvCgG,MAAM,EAAEJ,cAAc,CAACG,OAAO,CAACC,MAAM;cACrCC,QAAQ,EAAEL,cAAc,CAACG,OAAO,CAACE,QAAQ;cACzCC,QAAQ,EAAEN,cAAc,CAACG,OAAO,CAACG,QAAQ;cACzCxB,UAAU,EAAE+U,MAAI,CAAC/U;YACnB,CAAC,CAAC;YACF+U,MAAI,CAAC5U,SAAS,CAAC8F,WAAW,CAACzJ,OAAO,CAAC0J,IAAI,CAAC8O,YAAY,EAAEhS,OAAO,CAACF,IAAI,CAAC;YACnEiS,MAAI,CAAChV,KAAK,CAACiD,OAAO,CAAC,YAAY;cAC7B,OAAOA,OAAO,CAAC0I,QAAQ,CAAC,IAAI,CAAC;YAC/B,CAAC,CAAC;YACFqJ,MAAI,CAAC/U,UAAU,GAAGmB,SAAS;UAC7B,CAAC,MAAM,IAAI4T,MAAI,CAACjV,UAAU,EAAE;YAC1B,IAAImT,gBAAgB,CAAC8B,MAAI,CAACjV,UAAU,CAAC,EAAE;cACrCiV,MAAI,CAAChV,KAAK,CAACwJ,GAAG,CAAC,qCAAqC,CAAC;cACrD,OAAOwL,MAAI,CAACjO,YAAY,CAACiO,MAAI,CAAChP,KAAK,CAACkF,uBAAuB,CAAC;YAC9D,CAAC,MAAM;cACL8J,MAAI,CAAC5N,IAAI,CAAC,SAAS,EAAE4N,MAAI,CAACjV,UAAU,CAAC;cACrC,OAAOiV,MAAI,CAACjO,YAAY,CAACiO,MAAI,CAAChP,KAAK,CAACuB,KAAK,CAAC;YAC5C;UACF,CAAC,MAAM;YACLyN,MAAI,CAAC5N,IAAI,CAAC,SAAS,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YAC5E,OAAOwO,MAAI,CAACjO,YAAY,CAACiO,MAAI,CAAChP,KAAK,CAACuB,KAAK,CAAC;UAC5C;QACF;MACF,CAAC,GAAG,CAACiN,KAAK,CAAC7N,GAAG,IAAI;QAChBoB,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,MAAMrB,GAAG;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDmE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACD+M,wBAAwB,EAAE;IACxB7N,IAAI,EAAE,uBAAuB;IAC7BiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MAAA,IAAAwK,MAAA;MACjB7Z,iBAAA,CAAC,aAAY;QACX,IAAI6M,OAAO;QAEX,IAAI;UACFA,OAAO,SAASgN,MAAI,CAAC9U,SAAS,CAACqT,WAAW,EAAE;QAC9C,CAAC,CAAC,OAAO9M,GAAG,EAAE;UACZ,OAAOuO,MAAI,CAAC/L,WAAW,CAACxC,GAAG,CAAC;QAC9B;QAEA,MAAMgC,OAAO,GAAG,IAAI5K,QAAQ,CAAC6W,kBAAkB,CAACM,MAAI,CAAC;QACrD,MAAML,iBAAiB,GAAGK,MAAI,CAACxM,uBAAuB,CAACR,OAAO,EAAES,OAAO,CAAC;QACxE,MAAM,CAAC,CAAC,EAAErM,OAAO,CAACwK,IAAI,EAAE+N,iBAAiB,EAAE,KAAK,CAAC;QAEjD,IAAIlM,OAAO,CAACmM,gBAAgB,EAAE;UAC5B,IAAInM,OAAO,CAACxI,WAAW,EAAE;YACvB+U,MAAI,CAAC/U,WAAW,GAAGwI,OAAO,CAACxI,WAAW;YACtC+U,MAAI,CAACnO,YAAY,CAACmO,MAAI,CAAClP,KAAK,CAACiF,SAAS,CAAC;UACzC,CAAC,MAAM;YACLiK,MAAI,CAACnO,YAAY,CAACmO,MAAI,CAAClP,KAAK,CAAC+O,6BAA6B,CAAC;UAC7D;UAEA;QACF;QAEA,MAAMI,gBAAgB,GAAGxM,OAAO,CAACwM,gBAAgB;QAEjD,IAAIA,gBAAgB,IAAIA,gBAAgB,CAACC,MAAM,IAAID,gBAAgB,CAACE,GAAG,EAAE;UACvE,MAAMlU,cAAc,GAAG+T,MAAI,CAAC7V,MAAM,CAAC8B,cAAc;UACjD,MAAMmU,UAAU,GAAG,IAAIxX,IAAI,CAACyX,GAAG,CAAC,WAAW,EAAEJ,gBAAgB,CAACE,GAAG,CAAC,CAAC1J,QAAQ,EAAE;UAC7E,IAAI6J,WAAW;UAEf,QAAQrU,cAAc,CAACE,IAAI;YACzB,KAAK,iCAAiC;cACpCmU,WAAW,GAAG,IAAIrZ,SAAS,CAACsZ,0BAA0B,CAACtU,cAAc,CAACG,OAAO,CAACM,QAAQ,IAAI,QAAQ,EAAET,cAAc,CAACG,OAAO,CAACK,QAAQ,EAAER,cAAc,CAACG,OAAO,CAACE,QAAQ,EAAEL,cAAc,CAACG,OAAO,CAACG,QAAQ,CAAC;cACtM;YAEF,KAAK,+BAA+B;YACpC,KAAK,wCAAwC;cAC3C,MAAMiU,OAAO,GAAGvU,cAAc,CAACG,OAAO,CAACK,QAAQ,GAAG,CAACR,cAAc,CAACG,OAAO,CAACK,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;cAC9F6T,WAAW,GAAG,IAAIrZ,SAAS,CAACwZ,yBAAyB,CAAC,GAAGD,OAAO,CAAC;cACjE;YAEF,KAAK,gCAAgC;cACnC,MAAMrO,IAAI,GAAGlG,cAAc,CAACG,OAAO,CAACK,QAAQ,GAAG;gBAC7CiU,uBAAuB,EAAEzU,cAAc,CAACG,OAAO,CAACK;cAClD,CAAC,GAAG,CAAC,CAAC;cACN6T,WAAW,GAAG,IAAIrZ,SAAS,CAAC0Z,sBAAsB,CAACxO,IAAI,CAAC;cACxD;YAEF,KAAK,iDAAiD;cACpDmO,WAAW,GAAG,IAAIrZ,SAAS,CAAC2Z,sBAAsB,CAAC3U,cAAc,CAACG,OAAO,CAACM,QAAQ,EAAET,cAAc,CAACG,OAAO,CAACK,QAAQ,EAAER,cAAc,CAACG,OAAO,CAACQ,YAAY,CAAC;cACzJ;UAAM;UAGV,IAAIiU,aAAa;UAEjB,IAAI;YACFA,aAAa,SAASP,WAAW,CAACQ,QAAQ,CAACV,UAAU,CAAC;UACxD,CAAC,CAAC,OAAO3O,GAAG,EAAE;YACZuO,MAAI,CAACnV,UAAU,GAAG,IAAInC,iBAAiB,CAACrC,OAAO,CAAC,CAAC,IAAI4B,OAAO,CAACqJ,eAAe,CAAC,0DAA0D,EAAE,UAAU,CAAC,EAAEG,GAAG,CAAC,CAAC;YAC3JuO,MAAI,CAAC9N,IAAI,CAAC,SAAS,EAAE8N,MAAI,CAACnV,UAAU,CAAC;YACrCmV,MAAI,CAACnO,YAAY,CAACmO,MAAI,CAAClP,KAAK,CAACuB,KAAK,CAAC;YACnC;UACF;UAEA,MAAM1F,KAAK,GAAGkU,aAAa,CAAClU,KAAK;UACjCqT,MAAI,CAACjI,uBAAuB,CAACpL,KAAK,CAAC;QACrC,CAAC,MAAM,IAAIqT,MAAI,CAACnV,UAAU,EAAE;UAC1B,IAAImT,gBAAgB,CAACgC,MAAI,CAACnV,UAAU,CAAC,EAAE;YACrCmV,MAAI,CAAClV,KAAK,CAACwJ,GAAG,CAAC,qCAAqC,CAAC;YACrD0L,MAAI,CAACnO,YAAY,CAACmO,MAAI,CAAClP,KAAK,CAACkF,uBAAuB,CAAC;UACvD,CAAC,MAAM;YACLgK,MAAI,CAAC9N,IAAI,CAAC,SAAS,EAAE8N,MAAI,CAACnV,UAAU,CAAC;YACrCmV,MAAI,CAACnO,YAAY,CAACmO,MAAI,CAAClP,KAAK,CAACuB,KAAK,CAAC;UACrC;QACF,CAAC,MAAM;UACL2N,MAAI,CAAC9N,IAAI,CAAC,SAAS,EAAE,IAAIjK,OAAO,CAACqJ,eAAe,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;UAC5E0O,MAAI,CAACnO,YAAY,CAACmO,MAAI,CAAClP,KAAK,CAACuB,KAAK,CAAC;QACrC;MACF,CAAC,GAAG,CAACiN,KAAK,CAAC7N,GAAG,IAAI;QAChBoB,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,MAAMrB,GAAG;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDmE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACDwN,6BAA6B,EAAE;IAC7BtO,IAAI,EAAE,2BAA2B;IACjCiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MAAA,IAAAuL,MAAA;MACjB5a,iBAAA,CAAC,aAAY;QACX4a,MAAI,CAACxI,cAAc,EAAE;QACrB,IAAIvF,OAAO;QAEX,IAAI;UACFA,OAAO,SAAS+N,MAAI,CAAC7V,SAAS,CAACqT,WAAW,EAAE;QAC9C,CAAC,CAAC,OAAO9M,GAAG,EAAE;UACZ,OAAOsP,MAAI,CAAC9M,WAAW,CAACxC,GAAG,CAAC;QAC9B;QAEA,MAAMkO,iBAAiB,GAAGoB,MAAI,CAACvN,uBAAuB,CAACR,OAAO,EAAE,IAAInK,QAAQ,CAACmY,sBAAsB,CAACD,MAAI,CAAC,CAAC;QAC1G,MAAM,CAAC,CAAC,EAAE3Z,OAAO,CAACwK,IAAI,EAAE+N,iBAAiB,EAAE,KAAK,CAAC;QACjDoB,MAAI,CAAClP,YAAY,CAACkP,MAAI,CAACjQ,KAAK,CAAC+L,SAAS,CAAC;QACvCkE,MAAI,CAAC9H,mBAAmB,EAAE;MAC5B,CAAC,GAAG,CAACqG,KAAK,CAAC7N,GAAG,IAAI;QAChBoB,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,MAAMrB,GAAG;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDmE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAASA,WAAWA,CAAA,EAAG;QAClC,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC,CAAC;MACDhF,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAACwE,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACDwK,SAAS,EAAE;IACTtL,IAAI,EAAE,UAAU;IAChBqE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAA,EAAY;QACvB,IAAI,CAACpC,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EACDqL,mBAAmB,EAAE;IACnBnM,IAAI,EAAE,mBAAmB;IACzBiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MAAA,IAAAyL,MAAA;MACjB9a,iBAAA,CAAC,aAAY;QACX,IAAI+a,aAAa,EAAEC,cAAc,EAAEC,eAAe;QAElD,IAAIpO,OAAO;QAEX,IAAI;UACFA,OAAO,SAASiO,MAAI,CAAC/V,SAAS,CAACqT,WAAW,EAAE;QAC9C,CAAC,CAAC,OAAO9M,GAAG,EAAE;UACZ,OAAOwP,MAAI,CAAChN,WAAW,CAACxC,GAAG,CAAC;QAC9B,CAAC,CAAC;;QAGFwP,MAAI,CAAC9N,iBAAiB,EAAE;QACxB,MAAMwM,iBAAiB,GAAGsB,MAAI,CAACzN,uBAAuB,CAACR,OAAO,EAAE,IAAInK,QAAQ,CAACwY,mBAAmB,CAACJ,MAAI,EAAEA,MAAI,CAAC5V,OAAO,CAAC,CAAC,CAAC,CAAC;QACvH;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA,IAAI,CAAC6V,aAAa,GAAGD,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAI6V,aAAa,KAAK,KAAK,CAAC,IAAIA,aAAa,CAAClE,QAAQ,IAAIiE,MAAI,CAACvV,WAAW,EAAE;UACrH,OAAOuV,MAAI,CAACpP,YAAY,CAACoP,MAAI,CAACnQ,KAAK,CAACwQ,cAAc,CAAC;QACrD;QAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;UACrB5B,iBAAiB,CAACnC,MAAM,EAAE;QAC5B,CAAC;QAED,MAAMgE,OAAO,GAAGA,CAAA,KAAM;UACpB,IAAIC,cAAc;UAElB9B,iBAAiB,CAAC+B,KAAK,EAAE;UACzB,CAACD,cAAc,GAAGR,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAIoW,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAAC7P,IAAI,CAAC,QAAQ,EAAE2P,QAAQ,CAAC;QAC1H,CAAC;QAED,CAACJ,cAAc,GAAGF,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAI8V,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACpP,EAAE,CAAC,OAAO,EAAEyP,OAAO,CAAC;QAEpH,IAAIP,MAAI,CAAC5V,OAAO,YAAY1D,QAAQ,CAACtB,OAAO,IAAI4a,MAAI,CAAC5V,OAAO,CAACkS,MAAM,EAAE;UACnEiE,OAAO,EAAE;QACX;QAEA,MAAM5G,QAAQ,GAAGA,CAAA,KAAM;UACrB,IAAI+G,cAAc,EAAEC,cAAc;UAElCjC,iBAAiB,CAACjO,cAAc,CAAC,KAAK,EAAEmQ,cAAc,CAAC;UAEvD,IAAIZ,MAAI,CAAC5V,OAAO,YAAY1D,QAAQ,CAACtB,OAAO,IAAI4a,MAAI,CAAC5V,OAAO,CAACkS,MAAM,EAAE;YACnE;YACA0D,MAAI,CAAC5V,OAAO,CAACmS,MAAM,EAAE;UACvB;UAEA,CAACmE,cAAc,GAAGV,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAIsW,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACjQ,cAAc,CAAC,OAAO,EAAE8P,OAAO,CAAC;UAChI,CAACI,cAAc,GAAGX,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAIuW,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAAClQ,cAAc,CAAC,QAAQ,EAAE6P,QAAQ,CAAC,CAAC,CAAC;UACpI;UACA;UACA;;UAEAN,MAAI,CAACpP,YAAY,CAACoP,MAAI,CAACnQ,KAAK,CAACwQ,cAAc,CAAC;QAC9C,CAAC;QAED,MAAMO,cAAc,GAAGA,CAAA,KAAM;UAC3B,IAAIC,cAAc,EAAEC,cAAc,EAAEC,cAAc,EAAEC,cAAc;UAElE,CAACH,cAAc,GAAGb,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAIyW,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACpQ,cAAc,CAAC,QAAQ,EAAEuP,MAAI,CAACpV,uBAAuB,CAAC;UACtJ,CAACkW,cAAc,GAAGd,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAI0W,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACrQ,cAAc,CAAC,QAAQ,EAAEkJ,QAAQ,CAAC;UAClI,CAACoH,cAAc,GAAGf,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAI2W,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACtQ,cAAc,CAAC,OAAO,EAAE8P,OAAO,CAAC;UAChI,CAACS,cAAc,GAAGhB,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAI4W,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,cAAc,CAACvQ,cAAc,CAAC,QAAQ,EAAE6P,QAAQ,CAAC;UAClIN,MAAI,CAACpP,YAAY,CAACoP,MAAI,CAACnQ,KAAK,CAAC+L,SAAS,CAAC;UACvC,MAAMqF,UAAU,GAAGjB,MAAI,CAAC5V,OAAO;UAC/B4V,MAAI,CAAC5V,OAAO,GAAGa,SAAS;UAExB,IAAI+U,MAAI,CAAC9W,MAAM,CAACiC,OAAO,CAACuD,UAAU,GAAG,KAAK,IAAIuS,UAAU,CAAClO,KAAK,IAAIiN,MAAI,CAACxW,UAAU,EAAE;YACjFwW,MAAI,CAAC3W,aAAa,GAAG,KAAK;UAC5B;UAEA4X,UAAU,CAAC3O,QAAQ,CAAC2O,UAAU,CAAClO,KAAK,EAAEkO,UAAU,CAAChF,QAAQ,EAAEgF,UAAU,CAAC7H,IAAI,CAAC;QAC7E,CAAC;QAEDsF,iBAAiB,CAAC/N,IAAI,CAAC,KAAK,EAAEiQ,cAAc,CAAC;QAC7C,CAACT,eAAe,GAAGH,MAAI,CAAC5V,OAAO,MAAM,IAAI,IAAI+V,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACxP,IAAI,CAAC,QAAQ,EAAEgJ,QAAQ,CAAC;MAC7H,CAAC,GAAG;IACN,CAAC;IACDtF,IAAI,EAAE,SAAAA,CAAU6M,SAAS,EAAE;MACzB,IAAI,CAAChP,iBAAiB,EAAE;IAC1B,CAAC;IACDyC,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAUxC,GAAG,EAAE;QAC1B,MAAMyQ,UAAU,GAAG,IAAI,CAAC7W,OAAO;QAC/B,IAAI,CAACA,OAAO,GAAGa,SAAS;QACxB,IAAI,CAAC2F,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;QACnC6P,UAAU,CAAC3O,QAAQ,CAAC9B,GAAG,CAAC;MAC1B;IACF;EACF,CAAC;EACD6P,cAAc,EAAE;IACd/P,IAAI,EAAE,eAAe;IACrBiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MAAA,IAAA4M,MAAA;MACjBjc,iBAAA,CAAC,aAAY;QACX,IAAI6M,OAAO;QAEX,IAAI;UACFA,OAAO,SAASoP,MAAI,CAAClX,SAAS,CAACqT,WAAW,EAAE;QAC9C,CAAC,CAAC,OAAO9M,GAAG,EAAE;UACZ,OAAO2Q,MAAI,CAACnO,WAAW,CAACxC,GAAG,CAAC;QAC9B;QAEA,MAAMgC,OAAO,GAAG,IAAI5K,QAAQ,CAACwZ,qBAAqB,CAACD,MAAI,EAAEA,MAAI,CAAC/W,OAAO,CAAC;QACtE,MAAMsU,iBAAiB,GAAGyC,MAAI,CAAC5O,uBAAuB,CAACR,OAAO,EAAES,OAAO,CAAC;QACxE,MAAM,CAAC,CAAC,EAAErM,OAAO,CAACwK,IAAI,EAAE+N,iBAAiB,EAAE,KAAK,CAAC,CAAC,CAAC;QACnD;;QAEA,IAAIlM,OAAO,CAAC6O,iBAAiB,EAAE;UAC7BF,MAAI,CAACtN,gBAAgB,EAAE;UACvB,MAAMoN,UAAU,GAAGE,MAAI,CAAC/W,OAAO;UAC/B+W,MAAI,CAAC/W,OAAO,GAAGa,SAAS;UACxBkW,MAAI,CAACvQ,YAAY,CAACuQ,MAAI,CAACtR,KAAK,CAAC+L,SAAS,CAAC;UAEvC,IAAIqF,UAAU,CAAClO,KAAK,IAAIkO,UAAU,CAAClO,KAAK,YAAY/L,OAAO,CAACqL,YAAY,IAAI4O,UAAU,CAAClO,KAAK,CAAC8B,IAAI,KAAK,UAAU,EAAE;YAChHoM,UAAU,CAAC3O,QAAQ,CAAC2O,UAAU,CAAClO,KAAK,CAAC;UACvC,CAAC,MAAM;YACLkO,UAAU,CAAC3O,QAAQ,CAAC,IAAItL,OAAO,CAACqL,YAAY,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;UACvE;QACF;MACF,CAAC,GAAG,CAACgM,KAAK,CAAC7N,GAAG,IAAI;QAChBoB,OAAO,CAACC,QAAQ,CAAC,MAAM;UACrB,MAAMrB,GAAG;QACX,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC;IACDmE,MAAM,EAAE;MACN3B,WAAW,EAAE,SAAAA,CAAUxC,GAAG,EAAE;QAC1B,MAAMyQ,UAAU,GAAG,IAAI,CAAC7W,OAAO;QAC/B,IAAI,CAACA,OAAO,GAAGa,SAAS;QACxB,IAAI,CAAC2F,YAAY,CAAC,IAAI,CAACf,KAAK,CAACuB,KAAK,CAAC;QACnC6P,UAAU,CAAC3O,QAAQ,CAAC9B,GAAG,CAAC;MAC1B;IACF;EACF,CAAC;EACDY,KAAK,EAAE;IACLd,IAAI,EAAE,OAAO;IACbiE,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAI,CAACvC,iBAAiB,CAACrJ,YAAY,CAACC,MAAM,CAAC;IAC7C,CAAC;IACD+L,MAAM,EAAE;MACNvI,cAAc,EAAE,SAAAA,CAAA,EAAY,CAAC;MAAA,CAC5B;MACD2F,OAAO,EAAE,SAAAA,CAAA,EAAY,CAAC;MAAA,CACrB;MACDiB,WAAW,EAAE,SAAAA,CAAA,EAAY,CAAC;MAAA;IAE5B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}