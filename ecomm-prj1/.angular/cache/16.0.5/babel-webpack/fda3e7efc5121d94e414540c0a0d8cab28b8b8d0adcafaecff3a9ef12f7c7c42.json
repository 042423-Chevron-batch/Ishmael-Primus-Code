{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, HeaderNames } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\nvar UsernamePasswordClient = /** @class */function (_super) {\n  __extends(UsernamePasswordClient, _super);\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, responseHandler, tokenResponse;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in username-password client\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _c.sent();\n            httpVerToken = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              httpVerToken: httpVerToken\n            });\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryParametersString = this.createTokenQueryParameters(request);\n        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addResponseTypeForTokenAndIdToken();\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return UsernamePasswordClient;\n}(BaseClient);\nexport { UsernamePasswordClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","ResponseHandler","RequestParameterBuilder","GrantType","HeaderNames","StringUtils","TimeUtils","CcsCredentialType","UrlString","UsernamePasswordClient","_super","configuration","call","prototype","acquireToken","request","_a","_b","atsMeasurement","reqTimestamp","response","httpVerToken","responseHandler","tokenResponse","_c","label","performanceClient","startMeasurement","correlationId","logger","info","nowSeconds","executeTokenRequest","authority","sent","headers","X_MS_HTTP_VERSION","addStaticFields","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","queryParametersString","endpoint","requestBody","thumbprint","createTokenQueryParameters","appendQueryString","tokenEndpoint","createTokenRequestBody","createTokenRequestHeaders","credential","username","type","UPN","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addResponseTypeForTokenAndIdToken","addGrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/client/UsernamePasswordClient.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, HeaderNames } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nvar UsernamePasswordClient = /** @class */ (function (_super) {\r\n    __extends(UsernamePasswordClient, _super);\r\n    function UsernamePasswordClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.acquireToken = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var atsMeasurement, reqTimestamp, response, httpVerToken, responseHandler, tokenResponse;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\r\n                        this.logger.info(\"in acquireToken call in username-password client\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _c.sent();\r\n                        httpVerToken = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_HTTP_VERSION];\r\n                        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\r\n                            httpVerToken: httpVerToken\r\n                        });\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, requestBody, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryParametersString = this.createTokenQueryParameters(request);\r\n                endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                requestBody = this.createTokenRequestBody(request);\r\n                headers = this.createTokenRequestHeaders({\r\n                    credential: request.username,\r\n                    type: CcsCredentialType.UPN\r\n                });\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: authority.canonicalAuthority,\r\n                    scopes: request.scopes,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            var clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return UsernamePasswordClient;\r\n}(BaseClient));\n\nexport { UsernamePasswordClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}