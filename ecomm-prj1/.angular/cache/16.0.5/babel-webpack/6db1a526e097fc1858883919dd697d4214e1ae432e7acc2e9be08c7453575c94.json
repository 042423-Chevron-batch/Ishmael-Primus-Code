{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar JoseHeader = /** @class */function () {\n  function JoseHeader(options) {\n    this.typ = options.typ;\n    this.alg = options.alg;\n    this.kid = options.kid;\n  }\n  /**\r\n   * Builds SignedHttpRequest formatted JOSE Header from the\r\n   * JOSE Header options provided or previously set on the object and returns\r\n   * the stringified header object.\r\n   * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n   * @param shrHeaderOptions\r\n   * @returns\r\n   */\n  JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\n    // KeyID is required on the SHR header\n    if (!shrHeaderOptions.kid) {\n      throw JoseHeaderError.createMissingKidError();\n    }\n    // Alg is required on the SHR header\n    if (!shrHeaderOptions.alg) {\n      throw JoseHeaderError.createMissingAlgError();\n    }\n    var shrHeader = new JoseHeader({\n      // Access Token PoP headers must have type JWT, but the type header can be overriden for special cases\n      typ: shrHeaderOptions.typ || JsonTypes.Jwt,\n      kid: shrHeaderOptions.kid,\n      alg: shrHeaderOptions.alg\n    });\n    return JSON.stringify(shrHeader);\n  };\n  return JoseHeader;\n}();\nexport { JoseHeader };","map":{"version":3,"names":["JoseHeaderError","JsonTypes","JoseHeader","options","typ","alg","kid","getShrHeaderString","shrHeaderOptions","createMissingKidError","createMissingAlgError","shrHeader","Jwt","JSON","stringify"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/crypto/JoseHeader.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { JoseHeaderError } from '../error/JoseHeaderError.js';\nimport { JsonTypes } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar JoseHeader = /** @class */ (function () {\r\n    function JoseHeader(options) {\r\n        this.typ = options.typ;\r\n        this.alg = options.alg;\r\n        this.kid = options.kid;\r\n    }\r\n    /**\r\n     * Builds SignedHttpRequest formatted JOSE Header from the\r\n     * JOSE Header options provided or previously set on the object and returns\r\n     * the stringified header object.\r\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n     * @param shrHeaderOptions\r\n     * @returns\r\n     */\r\n    JoseHeader.getShrHeaderString = function (shrHeaderOptions) {\r\n        // KeyID is required on the SHR header\r\n        if (!shrHeaderOptions.kid) {\r\n            throw JoseHeaderError.createMissingKidError();\r\n        }\r\n        // Alg is required on the SHR header\r\n        if (!shrHeaderOptions.alg) {\r\n            throw JoseHeaderError.createMissingAlgError();\r\n        }\r\n        var shrHeader = new JoseHeader({\r\n            // Access Token PoP headers must have type JWT, but the type header can be overriden for special cases\r\n            typ: shrHeaderOptions.typ || JsonTypes.Jwt,\r\n            kid: shrHeaderOptions.kid,\r\n            alg: shrHeaderOptions.alg\r\n        });\r\n        return JSON.stringify(shrHeader);\r\n    };\r\n    return JoseHeader;\r\n}());\n\nexport { JoseHeader };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,SAAS,QAAQ,uBAAuB;;AAEjD;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC,SAASA,UAAUA,CAACC,OAAO,EAAE;IACzB,IAAI,CAACC,GAAG,GAAGD,OAAO,CAACC,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGF,OAAO,CAACE,GAAG;IACtB,IAAI,CAACC,GAAG,GAAGH,OAAO,CAACG,GAAG;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,UAAU,CAACK,kBAAkB,GAAG,UAAUC,gBAAgB,EAAE;IACxD;IACA,IAAI,CAACA,gBAAgB,CAACF,GAAG,EAAE;MACvB,MAAMN,eAAe,CAACS,qBAAqB,EAAE;IACjD;IACA;IACA,IAAI,CAACD,gBAAgB,CAACH,GAAG,EAAE;MACvB,MAAML,eAAe,CAACU,qBAAqB,EAAE;IACjD;IACA,IAAIC,SAAS,GAAG,IAAIT,UAAU,CAAC;MAC3B;MACAE,GAAG,EAAEI,gBAAgB,CAACJ,GAAG,IAAIH,SAAS,CAACW,GAAG;MAC1CN,GAAG,EAAEE,gBAAgB,CAACF,GAAG;MACzBD,GAAG,EAAEG,gBAAgB,CAACH;IAC1B,CAAC,CAAC;IACF,OAAOQ,IAAI,CAACC,SAAS,CAACH,SAAS,CAAC;EACpC,CAAC;EACD,OAAOT,UAAU;AACrB,CAAC,EAAG;AAEJ,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}