{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as sql from 'mssql';\nimport * as i0 from \"@angular/core\";\nclass DatabaseService {\n  constructor() {\n    this.config = {\n      server: '052123-batch-server.database.windows.net',\n      database: '052123-batch',\n      user: 'batch052123',\n      password: 'Nubian19',\n      options: {\n        encrypt: true // Enable encryption for secure connection\n      }\n    };\n  }\n\n  executeQuery(query) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const pool = yield new sql.ConnectionPool(_this.config).connect();\n        const result = yield pool.request().query(query);\n        return result.recordset;\n      } catch (error) {\n        console.log('Error:', error);\n        throw error;\n      } finally {\n        sql.close();\n      }\n    })();\n  }\n  getCustomers() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Customer';\n      return yield _this2.executeQuery(query);\n    })();\n  }\n  getInventory() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Inventory';\n      return yield _this3.executeQuery(query);\n    })();\n  }\n  getOrders() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM [Order]';\n      return yield _this4.executeQuery(query);\n    })();\n  }\n  getProducts() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Products';\n      return yield _this5.executeQuery(query);\n    })();\n  }\n  getJunction() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM StoreProductJunction';\n      return yield _this6.executeQuery(query);\n    })();\n  }\n  getStores() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const query = 'SELECT * FROM Stores';\n      return yield _this7.executeQuery(query);\n    })();\n  }\n}\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)();\n};\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});\nexport { DatabaseService };","map":{"version":3,"names":["sql","DatabaseService","constructor","config","server","database","user","password","options","encrypt","executeQuery","query","_this","_asyncToGenerator","pool","ConnectionPool","connect","result","request","recordset","error","console","log","close","getCustomers","_this2","getInventory","_this3","getOrders","_this4","getProducts","_this5","getJunction","_this6","getStores","_this7","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ishma\\Revature\\Ishmael-Primus-Code-\\ecomm-prj1\\src\\app\\database.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as sql from 'mssql';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseService {\n  private config: sql.config = {\n    server: '052123-batch-server.database.windows.net',\n    database: '052123-batch',\n    user: 'batch052123',\n    password: 'Nubian19',\n    options: {\n      encrypt: true // Enable encryption for secure connection\n    }\n  };\n\n  async executeQuery(query: string): Promise<any> {\n    try {\n      const pool = await new sql.ConnectionPool(this.config).connect();\n      const result = await pool.request().query(query);\n      return result.recordset;\n    } catch (error) {\n      console.log('Error:', error);\n      throw error;\n    } finally {\n      sql.close();\n    }\n  }\n\n  async getCustomers(): Promise<any> {\n    const query = 'SELECT * FROM Customer';\n    return await this.executeQuery(query);\n  }\n\n  async getInventory(): Promise<any> {\n    const query = 'SELECT * FROM Inventory';\n    return await this.executeQuery(query);\n  }\n\n  async getOrders(): Promise<any> {\n    const query = 'SELECT * FROM [Order]';\n    return await this.executeQuery(query);\n  }\n\n  async getProducts(): Promise<any> {\n    const query = 'SELECT * FROM Products';\n    return await this.executeQuery(query);\n  }\n\n  async getJunction(): Promise<any> {\n    const query = 'SELECT * FROM StoreProductJunction';\n    return await this.executeQuery(query);\n  }\n\n  async getStores(): Promise<any> {\n    const query = 'SELECT * FROM Stores';\n    return await this.executeQuery(query);\n  }\n}\n"],"mappings":";AAEA,OAAO,KAAKA,GAAG,MAAM,OAAO;;AAE5B,MAGaC,eAAe;EAH5BC,YAAA;IAIU,KAAAC,MAAM,GAAe;MAC3BC,MAAM,EAAE,0CAA0C;MAClDC,QAAQ,EAAE,cAAc;MACxBC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,UAAU;MACpBC,OAAO,EAAE;QACPC,OAAO,EAAE,IAAI,CAAC;;KAEjB;;;EAEKC,YAAYA,CAACC,KAAa;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC9B,IAAI;QACF,MAAMC,IAAI,SAAS,IAAId,GAAG,CAACe,cAAc,CAACH,KAAI,CAACT,MAAM,CAAC,CAACa,OAAO,EAAE;QAChE,MAAMC,MAAM,SAASH,IAAI,CAACI,OAAO,EAAE,CAACP,KAAK,CAACA,KAAK,CAAC;QAChD,OAAOM,MAAM,CAACE,SAAS;OACxB,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;QAC5B,MAAMA,KAAK;OACZ,SAAS;QACRpB,GAAG,CAACuB,KAAK,EAAE;;IACZ;EACH;EAEMC,YAAYA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAZ,iBAAA;MAChB,MAAMF,KAAK,GAAG,wBAAwB;MACtC,aAAac,MAAI,CAACf,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMe,YAAYA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAd,iBAAA;MAChB,MAAMF,KAAK,GAAG,yBAAyB;MACvC,aAAagB,MAAI,CAACjB,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMiB,SAASA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAhB,iBAAA;MACb,MAAMF,KAAK,GAAG,uBAAuB;MACrC,aAAakB,MAAI,CAACnB,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMmB,WAAWA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAlB,iBAAA;MACf,MAAMF,KAAK,GAAG,wBAAwB;MACtC,aAAaoB,MAAI,CAACrB,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMqB,WAAWA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAApB,iBAAA;MACf,MAAMF,KAAK,GAAG,oCAAoC;MAClD,aAAasB,MAAI,CAACvB,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;EAEMuB,SAASA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAtB,iBAAA;MACb,MAAMF,KAAK,GAAG,sBAAsB;MACpC,aAAawB,MAAI,CAACzB,YAAY,CAACC,KAAK,CAAC;IAAC;EACxC;;AApDWV,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAmC,OAAA,EAAfnC,eAAe,CAAAoC,IAAA;EAAAC,UAAA,EAFd;AAAM;SAEPrC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}