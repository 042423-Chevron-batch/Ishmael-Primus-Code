{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RegionDiscovery = /** @class */function () {\n  function RegionDiscovery(networkInterface) {\n    this.networkInterface = networkInterface;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata, proxyUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3 /*break*/, 8];\n            options = RegionDiscovery.IMDS_OPTIONS;\n            if (proxyUrl) {\n              options.proxyUrl = proxyUrl;\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n            return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\n          case 2:\n            localIMDSVersionResponse = _a.sent();\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.getCurrentVersion(options)];\n          case 3:\n            currentIMDSVersion = _a.sent();\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2 /*return*/, null];\n            }\n            return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\n          case 4:\n            currentIMDSVersionResponse = _a.sent();\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            _a.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            _a.sent();\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2 /*return*/, null];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _a.label = 9;\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n            return [2 /*return*/, autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.getCurrentVersion = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\n          case 1:\n            response = _a.sent();\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2 /*return*/, response.body[\"newest-versions\"][0]];\n            }\n            return [2 /*return*/, null];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, null];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Options for the IMDS endpoint request\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      Metadata: \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\nexport { RegionDiscovery };","map":{"version":3,"names":["__awaiter","__generator","RegionDiscoverySources","ResponseCodes","Constants","RegionDiscovery","networkInterface","prototype","detectRegion","environmentRegion","regionDiscoveryMetadata","proxyUrl","autodetectedRegionName","options","localIMDSVersionResponse","currentIMDSVersion","currentIMDSVersionResponse","_a","label","IMDS_OPTIONS","trys","push","getRegionFromIMDS","IMDS_VERSION","sent","status","httpSuccess","body","region_source","IMDS","httpBadRequest","getCurrentVersion","FAILED_AUTO_DETECTION","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_TIMEOUT","response","length","headers","Metadata"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/authority/RegionDiscovery.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RegionDiscovery = /** @class */ (function () {\r\n    function RegionDiscovery(networkInterface) {\r\n        this.networkInterface = networkInterface;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata, proxyUrl) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        autodetectedRegionName = environmentRegion;\r\n                        if (!!autodetectedRegionName) return [3 /*break*/, 8];\r\n                        options = RegionDiscovery.IMDS_OPTIONS;\r\n                        if (proxyUrl) {\r\n                            options.proxyUrl = proxyUrl;\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 6, , 7]);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\r\n                    case 2:\r\n                        localIMDSVersionResponse = _a.sent();\r\n                        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = localIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\r\n                        return [4 /*yield*/, this.getCurrentVersion(options)];\r\n                    case 3:\r\n                        currentIMDSVersion = _a.sent();\r\n                        if (!currentIMDSVersion) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\r\n                    case 4:\r\n                        currentIMDSVersionResponse = _a.sent();\r\n                        if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        _a.sent();\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return [2 /*return*/, null];\r\n                    case 7: return [3 /*break*/, 9];\r\n                    case 8:\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n                        _a.label = 9;\r\n                    case 9:\r\n                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n                        if (!autodetectedRegionName) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        }\r\n                        return [2 /*return*/, autodetectedRegionName || null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.getCurrentVersion = function (options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n                        if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                            return [2 /*return*/, response.body[\"newest-versions\"][0]];\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Options for the IMDS endpoint request\r\n    RegionDiscovery.IMDS_OPTIONS = {\r\n        headers: {\r\n            Metadata: \"true\",\r\n        },\r\n    };\r\n    return RegionDiscovery;\r\n}());\n\nexport { RegionDiscovery };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,SAAS,EAAEC,WAAW,QAAQ,uBAAuB;AAC9D,SAASC,sBAAsB,EAAEC,aAAa,EAAEC,SAAS,QAAQ,uBAAuB;;AAExF;AACA;AACA;AACA;AACA,IAAIC,eAAe,GAAG,aAAe,YAAY;EAC7C,SAASA,eAAeA,CAACC,gBAAgB,EAAE;IACvC,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;EAC5C;EACA;AACJ;AACA;AACA;AACA;EACID,eAAe,CAACE,SAAS,CAACC,YAAY,GAAG,UAAUC,iBAAiB,EAAEC,uBAAuB,EAAEC,QAAQ,EAAE;IACrG,OAAOX,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIY,sBAAsB,EAAEC,OAAO,EAAEC,wBAAwB,EAAEC,kBAAkB,EAAEC,0BAA0B;MAC7G,OAAOf,WAAW,CAAC,IAAI,EAAE,UAAUgB,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACFN,sBAAsB,GAAGH,iBAAiB;YAC1C,IAAI,CAAC,CAACG,sBAAsB,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YACrDC,OAAO,GAAGR,eAAe,CAACc,YAAY;YACtC,IAAIR,QAAQ,EAAE;cACVE,OAAO,CAACF,QAAQ,GAAGA,QAAQ;YAC/B;YACAM,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACFD,EAAE,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,CAAC,CAAC;YACzB,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACC,iBAAiB,CAAClB,SAAS,CAACmB,YAAY,EAAEV,OAAO,CAAC,CAAC;UACjF,KAAK,CAAC;YACFC,wBAAwB,GAAGG,EAAE,CAACO,IAAI,EAAE;YACpC,IAAIV,wBAAwB,CAACW,MAAM,KAAKtB,aAAa,CAACuB,WAAW,EAAE;cAC/Dd,sBAAsB,GAAGE,wBAAwB,CAACa,IAAI;cACtDjB,uBAAuB,CAACkB,aAAa,GAAG1B,sBAAsB,CAAC2B,IAAI;YACvE;YACA,IAAI,EAAEf,wBAAwB,CAACW,MAAM,KAAKtB,aAAa,CAAC2B,cAAc,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YAChG,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACC,iBAAiB,CAAClB,OAAO,CAAC,CAAC;UACzD,KAAK,CAAC;YACFE,kBAAkB,GAAGE,EAAE,CAACO,IAAI,EAAE;YAC9B,IAAI,CAACT,kBAAkB,EAAE;cACrBL,uBAAuB,CAACkB,aAAa,GAAG1B,sBAAsB,CAAC8B,qBAAqB;cACpF,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC;YAC/B;YACA,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACV,iBAAiB,CAACP,kBAAkB,EAAEF,OAAO,CAAC,CAAC;UAC7E,KAAK,CAAC;YACFG,0BAA0B,GAAGC,EAAE,CAACO,IAAI,EAAE;YACtC,IAAIR,0BAA0B,CAACS,MAAM,KAAKtB,aAAa,CAACuB,WAAW,EAAE;cACjEd,sBAAsB,GAAGI,0BAA0B,CAACW,IAAI;cACxDjB,uBAAuB,CAACkB,aAAa,GAAG1B,sBAAsB,CAAC2B,IAAI;YACvE;YACAZ,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC/B,KAAK,CAAC;YACFD,EAAE,CAACO,IAAI,EAAE;YACTd,uBAAuB,CAACkB,aAAa,GAAG1B,sBAAsB,CAAC8B,qBAAqB;YACpF,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC;UAC/B,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC/B,KAAK,CAAC;YACFtB,uBAAuB,CAACkB,aAAa,GAAG1B,sBAAsB,CAAC+B,oBAAoB;YACnFhB,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACF;YACA,IAAI,CAACN,sBAAsB,EAAE;cACzBF,uBAAuB,CAACkB,aAAa,GAAG1B,sBAAsB,CAAC8B,qBAAqB;YACxF;YACA,OAAO,CAAC,CAAC,CAAC,YAAYpB,sBAAsB,IAAI,IAAI,CAAC;QAAC;MAElE,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIP,eAAe,CAACE,SAAS,CAACe,iBAAiB,GAAG,UAAUY,OAAO,EAAErB,OAAO,EAAE;IACtE,OAAOb,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,OAAOC,WAAW,CAAC,IAAI,EAAE,UAAUgB,EAAE,EAAE;QACnC,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI,CAACX,gBAAgB,CAAC6B,mBAAmB,CAAC/B,SAAS,CAACgC,aAAa,GAAG,eAAe,GAAGF,OAAO,GAAG,cAAc,EAAErB,OAAO,EAAET,SAAS,CAACiC,YAAY,CAAC,CAAC;MAC3K,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIhC,eAAe,CAACE,SAAS,CAACwB,iBAAiB,GAAG,UAAUlB,OAAO,EAAE;IAC7D,OAAOb,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIsC,QAAQ;MACZ,OAAOrC,WAAW,CAAC,IAAI,EAAE,UAAUgB,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACFD,EAAE,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,CAAC,CAAC;YACzB,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACf,gBAAgB,CAAC6B,mBAAmB,CAAC/B,SAAS,CAACgC,aAAa,GAAG,cAAc,EAAEvB,OAAO,CAAC,CAAC;UACtH,KAAK,CAAC;YACFyB,QAAQ,GAAGrB,EAAE,CAACO,IAAI,EAAE;YACpB;YACA,IAAIc,QAAQ,CAACb,MAAM,KAAKtB,aAAa,CAAC2B,cAAc,IAAIQ,QAAQ,CAACX,IAAI,IAAIW,QAAQ,CAACX,IAAI,CAAC,iBAAiB,CAAC,IAAIW,QAAQ,CAACX,IAAI,CAAC,iBAAiB,CAAC,CAACY,MAAM,GAAG,CAAC,EAAE;cACtJ,OAAO,CAAC,CAAC,CAAC,YAAYD,QAAQ,CAACX,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D;YACA,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC;UAC/B,KAAK,CAAC;YACFV,EAAE,CAACO,IAAI,EAAE;YACT,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC;UAC/B,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW;QAAC;MAEtC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;EACAnB,eAAe,CAACc,YAAY,GAAG;IAC3BqB,OAAO,EAAE;MACLC,QAAQ,EAAE;IACd;EACJ,CAAC;EACD,OAAOpC,eAAe;AAC1B,CAAC,EAAG;AAEJ,SAASA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}