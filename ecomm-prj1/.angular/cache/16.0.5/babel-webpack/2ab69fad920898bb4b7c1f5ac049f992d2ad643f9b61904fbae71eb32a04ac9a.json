{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { ClientAuthError } from './ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\nvar ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: \"redirect_uri_empty\",\n    desc: \"A redirect URI is required for all calls, and none has been set.\"\n  },\n  postLogoutUriNotSet: {\n    code: \"post_logout_uri_empty\",\n    desc: \"A post logout redirect has not been set.\"\n  },\n  claimsRequestParsingError: {\n    code: \"claims_request_parsing_error\",\n    desc: \"Could not parse the given claims request object.\"\n  },\n  authorityUriInsecure: {\n    code: \"authority_uri_insecure\",\n    desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n  },\n  urlParseError: {\n    code: \"url_parse_error\",\n    desc: \"URL could not be parsed into appropriate segments.\"\n  },\n  urlEmptyError: {\n    code: \"empty_url_error\",\n    desc: \"URL was empty or null.\"\n  },\n  emptyScopesError: {\n    code: \"empty_input_scopes_error\",\n    desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n  },\n  nonArrayScopesError: {\n    code: \"nonarray_input_scopes_error\",\n    desc: \"Scopes cannot be passed as non-array.\"\n  },\n  clientIdSingleScopeError: {\n    code: \"clientid_input_scopes_error\",\n    desc: \"Client ID can only be provided as a single scope.\"\n  },\n  invalidPrompt: {\n    code: \"invalid_prompt_value\",\n    desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\"\n  },\n  invalidClaimsRequest: {\n    code: \"invalid_claims\",\n    desc: \"Given claims parameter must be a stringified JSON object.\"\n  },\n  tokenRequestEmptyError: {\n    code: \"token_request_empty\",\n    desc: \"Token request was empty and not found in cache.\"\n  },\n  logoutRequestEmptyError: {\n    code: \"logout_request_empty\",\n    desc: \"The logout request was null or undefined.\"\n  },\n  invalidCodeChallengeMethod: {\n    code: \"invalid_code_challenge_method\",\n    desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n  },\n  invalidCodeChallengeParams: {\n    code: \"pkce_params_missing\",\n    desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: \"invalid_cloud_discovery_metadata\",\n    desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\n  },\n  invalidAuthorityMetadata: {\n    code: \"invalid_authority_metadata\",\n    desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\n  },\n  untrustedAuthority: {\n    code: \"untrusted_authority\",\n    desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n  },\n  invalidAzureCloudInstance: {\n    code: \"invalid_azure_cloud_instance\",\n    desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\n  },\n  missingSshJwk: {\n    code: \"missing_ssh_jwk\",\n    desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\n  },\n  missingSshKid: {\n    code: \"missing_ssh_kid\",\n    desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\n  },\n  missingNonceAuthenticationHeader: {\n    code: \"missing_nonce_authentication_header\",\n    desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\n  },\n  invalidAuthenticationHeader: {\n    code: \"invalid_authentication_header\",\n    desc: \"Invalid authentication header provided\"\n  },\n  authorityMismatch: {\n    code: \"authority_mismatch\",\n    desc: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\nvar ClientConfigurationError = /** @class */function (_super) {\n  __extends(ClientConfigurationError, _super);\n  function ClientConfigurationError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n    _this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n   */\n  ClientConfigurationError.createRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n   */\n  ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the claims request could not be successfully parsed\r\n   */\n  ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\n  };\n  /**\r\n   * Creates an error thrown if authority uri is given an insecure protocol.\r\n   * @param urlString\r\n   */\n  ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\n  };\n  /**\r\n   * Creates an error thrown if URL string does not parse into separate segments.\r\n   * @param urlString\r\n   */\n  ClientConfigurationError.createUrlParseError = function (urlParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\n  };\n  /**\r\n   * Creates an error thrown if URL string is empty or null.\r\n   * @param urlString\r\n   */\n  ClientConfigurationError.createUrlEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\n  };\n  /**\r\n   * Error thrown when scopes are empty.\r\n   * @param scopesValue\r\n   */\n  ClientConfigurationError.createEmptyScopesArrayError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, \"\" + ClientConfigurationErrorMessage.emptyScopesError.desc);\n  };\n  /**\r\n   * Error thrown when client id scope is not provided as single scope.\r\n   * @param inputScopes\r\n   */\n  ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes);\n  };\n  /**\r\n   * Error thrown when prompt is not an allowed type.\r\n   * @param promptValue\r\n   */\n  ClientConfigurationError.createInvalidPromptError = function (promptValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\n  };\n  /**\r\n   * Creates error thrown when claims parameter is not a stringified JSON object\r\n   */\n  ClientConfigurationError.createInvalidClaimsRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n  ClientConfigurationError.createEmptyLogoutRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n  ClientConfigurationError.createEmptyTokenRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when an invalid code_challenge_method is passed by the user\r\n   */\n  ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\n  };\n  /**\r\n   * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n   */\n  ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n  ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n  ClientConfigurationError.createInvalidAuthorityMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n  };\n  /**\r\n   * Throws error when provided authority is not a member of the trusted host list\r\n   */\n  ClientConfigurationError.createUntrustedAuthorityError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\n  };\n  /**\r\n   * Throws error when the AzureCloudInstance is set to an invalid value\r\n   */\n  ClientConfigurationError.createInvalidAzureCloudInstanceError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\n  };\n  /**\r\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\r\n   */\n  ClientConfigurationError.createMissingSshJwkError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\n  };\n  /**\r\n   * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\r\n   */\n  ClientConfigurationError.createMissingSshKidError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\n  };\n  /**\r\n   * Throws error when provided headers don't contain a header that a server nonce can be extracted from\r\n   */\n  ClientConfigurationError.createMissingNonceAuthenticationHeadersError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\n  };\n  /**\r\n   * Throws error when a provided header is invalid in any way\r\n   */\n  ClientConfigurationError.createInvalidAuthenticationHeaderError = function (invalidHeaderName, details) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + \". Invalid header: \" + invalidHeaderName + \". Details: \" + details);\n  };\n  /**\r\n   * Create an error when the authority provided in request does not match authority provided in account or MSAL.js configuration.\r\n   */\n  ClientConfigurationError.createAuthorityMismatchError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityMismatch.code, ClientConfigurationErrorMessage.authorityMismatch.desc);\n  };\n  return ClientConfigurationError;\n}(ClientAuthError);\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };","map":{"version":3,"names":["__extends","ClientAuthError","ClientConfigurationErrorMessage","redirectUriNotSet","code","desc","postLogoutUriNotSet","claimsRequestParsingError","authorityUriInsecure","urlParseError","urlEmptyError","emptyScopesError","nonArrayScopesError","clientIdSingleScopeError","invalidPrompt","invalidClaimsRequest","tokenRequestEmptyError","logoutRequestEmptyError","invalidCodeChallengeMethod","invalidCodeChallengeParams","invalidCloudDiscoveryMetadata","invalidAuthorityMetadata","untrustedAuthority","invalidAzureCloudInstance","missingSshJwk","missingSshKid","missingNonceAuthenticationHeader","invalidAuthenticationHeader","authorityMismatch","ClientConfigurationError","_super","errorCode","errorMessage","_this","call","name","Object","setPrototypeOf","prototype","createRedirectUriEmptyError","createPostLogoutRedirectUriEmptyError","createClaimsRequestParsingError","claimsRequestParseError","createInsecureAuthorityUriError","urlString","createUrlParseError","createUrlEmptyError","createEmptyScopesArrayError","createClientIdSingleScopeError","inputScopes","createInvalidPromptError","promptValue","createInvalidClaimsRequestError","createEmptyLogoutRequestError","createEmptyTokenRequestError","createInvalidCodeChallengeMethodError","createInvalidCodeChallengeParamsError","createInvalidCloudDiscoveryMetadataError","createInvalidAuthorityMetadataError","createUntrustedAuthorityError","createInvalidAzureCloudInstanceError","createMissingSshJwkError","createMissingSshKidError","createMissingNonceAuthenticationHeadersError","createInvalidAuthenticationHeaderError","invalidHeaderName","details","createAuthorityMismatchError"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/error/ClientConfigurationError.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends } from '../_virtual/_tslib.js';\nimport { ClientAuthError } from './ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: \"redirect_uri_empty\",\r\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\r\n    },\r\n    postLogoutUriNotSet: {\r\n        code: \"post_logout_uri_empty\",\r\n        desc: \"A post logout redirect has not been set.\"\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: \"claims_request_parsing_error\",\r\n        desc: \"Could not parse the given claims request object.\"\r\n    },\r\n    authorityUriInsecure: {\r\n        code: \"authority_uri_insecure\",\r\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\r\n    },\r\n    urlParseError: {\r\n        code: \"url_parse_error\",\r\n        desc: \"URL could not be parsed into appropriate segments.\"\r\n    },\r\n    urlEmptyError: {\r\n        code: \"empty_url_error\",\r\n        desc: \"URL was empty or null.\"\r\n    },\r\n    emptyScopesError: {\r\n        code: \"empty_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\r\n    },\r\n    nonArrayScopesError: {\r\n        code: \"nonarray_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as non-array.\"\r\n    },\r\n    clientIdSingleScopeError: {\r\n        code: \"clientid_input_scopes_error\",\r\n        desc: \"Client ID can only be provided as a single scope.\"\r\n    },\r\n    invalidPrompt: {\r\n        code: \"invalid_prompt_value\",\r\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: \"invalid_claims\",\r\n        desc: \"Given claims parameter must be a stringified JSON object.\"\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: \"token_request_empty\",\r\n        desc: \"Token request was empty and not found in cache.\"\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: \"logout_request_empty\",\r\n        desc: \"The logout request was null or undefined.\"\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: \"invalid_code_challenge_method\",\r\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: \"pkce_params_missing\",\r\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: \"invalid_cloud_discovery_metadata\",\r\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\"\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: \"invalid_authority_metadata\",\r\n        desc: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\"\r\n    },\r\n    untrustedAuthority: {\r\n        code: \"untrusted_authority\",\r\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\r\n    },\r\n    invalidAzureCloudInstance: {\r\n        code: \"invalid_azure_cloud_instance\",\r\n        desc: \"Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values\"\r\n    },\r\n    missingSshJwk: {\r\n        code: \"missing_ssh_jwk\",\r\n        desc: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\"\r\n    },\r\n    missingSshKid: {\r\n        code: \"missing_ssh_kid\",\r\n        desc: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\"\r\n    },\r\n    missingNonceAuthenticationHeader: {\r\n        code: \"missing_nonce_authentication_header\",\r\n        desc: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\"\r\n    },\r\n    invalidAuthenticationHeader: {\r\n        code: \"invalid_authentication_header\",\r\n        desc: \"Invalid authentication header provided\"\r\n    },\r\n    authorityMismatch: {\r\n        code: \"authority_mismatch\",\r\n        desc: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nvar ClientConfigurationError = /** @class */ (function (_super) {\r\n    __extends(ClientConfigurationError, _super);\r\n    function ClientConfigurationError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n     */\r\n    ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the claims request could not be successfully parsed\r\n     */\r\n    ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if authority uri is given an insecure protocol.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string does not parse into separate segments.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlParseError = function (urlParseError) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if URL string is empty or null.\r\n     * @param urlString\r\n     */\r\n    ClientConfigurationError.createUrlEmptyError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\r\n    };\r\n    /**\r\n     * Error thrown when scopes are empty.\r\n     * @param scopesValue\r\n     */\r\n    ClientConfigurationError.createEmptyScopesArrayError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, \"\" + ClientConfigurationErrorMessage.emptyScopesError.desc);\r\n    };\r\n    /**\r\n     * Error thrown when client id scope is not provided as single scope.\r\n     * @param inputScopes\r\n     */\r\n    ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes);\r\n    };\r\n    /**\r\n     * Error thrown when prompt is not an allowed type.\r\n     * @param promptValue\r\n     */\r\n    ClientConfigurationError.createInvalidPromptError = function (promptValue) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\r\n    };\r\n    /**\r\n     * Creates error thrown when claims parameter is not a stringified JSON object\r\n     */\r\n    ClientConfigurationError.createInvalidClaimsRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\r\n    };\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    ClientConfigurationError.createEmptyLogoutRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\r\n    };\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    ClientConfigurationError.createEmptyTokenRequestError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\r\n    };\r\n    /**\r\n     * Throws error when an invalid code_challenge_method is passed by the user\r\n     */\r\n    ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\r\n    };\r\n    /**\r\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n     */\r\n    ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    ClientConfigurationError.createInvalidAuthorityMetadataError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided authority is not a member of the trusted host list\r\n     */\r\n    ClientConfigurationError.createUntrustedAuthorityError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\r\n    };\r\n    /**\r\n     * Throws error when the AzureCloudInstance is set to an invalid value\r\n     */\r\n    ClientConfigurationError.createInvalidAzureCloudInstanceError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request\r\n     */\r\n    ClientConfigurationError.createMissingSshJwkError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);\r\n    };\r\n    /**\r\n     * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request\r\n     */\r\n    ClientConfigurationError.createMissingSshKidError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided headers don't contain a header that a server nonce can be extracted from\r\n     */\r\n    ClientConfigurationError.createMissingNonceAuthenticationHeadersError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);\r\n    };\r\n    /**\r\n     * Throws error when a provided header is invalid in any way\r\n     */\r\n    ClientConfigurationError.createInvalidAuthenticationHeaderError = function (invalidHeaderName, details) {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + \". Invalid header: \" + invalidHeaderName + \". Details: \" + details);\r\n    };\r\n    /**\r\n     * Create an error when the authority provided in request does not match authority provided in account or MSAL.js configuration.\r\n     */\r\n    ClientConfigurationError.createAuthorityMismatchError = function () {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityMismatch.code, ClientConfigurationErrorMessage.authorityMismatch.desc);\r\n    };\r\n    return ClientConfigurationError;\r\n}(ClientAuthError));\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}