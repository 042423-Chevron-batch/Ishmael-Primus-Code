{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { Constants } from '@azure/msal-common';\nimport { MathUtils } from '../utils/MathUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar GuidGenerator = /** @class */function () {\n  function GuidGenerator(cryptoObj) {\n    this.cryptoObj = cryptoObj;\n  }\n  /*\r\n   * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n   * pseudo-random numbers.\r\n   * The algorithm is as follows:\r\n   *     Set the two most significant bits (bits 6 and 7) of the\r\n   *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n   *     Set the four most significant bits (bits 12 through 15) of the\r\n   *        time_hi_and_version field to the 4-bit version number from\r\n   *        Section 4.1.3. Version4\r\n   *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n   *     values.\r\n   * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n   * time-low               = 4hexOctet\r\n   * time-mid               = 2hexOctet\r\n   * time-high-and-version  = 2hexOctet\r\n   * clock-seq-and-reserved = hexOctet:\r\n   * clock-seq-low          = hexOctet\r\n   * node                   = 6hexOctet\r\n   * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n   * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n   * y values are 8, 9, A, B\r\n   */\n  GuidGenerator.prototype.generateGuid = function () {\n    try {\n      var buffer = new Uint8Array(16);\n      this.cryptoObj.getRandomValues(buffer);\n      // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n      buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n      buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n      buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n      buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n      return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1]) + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3]) + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5]) + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7]) + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9]) + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11]) + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13]) + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\n    } catch (err) {\n      var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      var hex = \"0123456789abcdef\";\n      var r = 0;\n      var guidResponse = Constants.EMPTY_STRING;\n      for (var i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n          r |= 0x8; // set pos 3 to 1 as 1???\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n      return guidResponse;\n    }\n  };\n  /**\r\n   * verifies if a string is  GUID\r\n   * @param guid\r\n   */\n  GuidGenerator.prototype.isGuid = function (guid) {\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  };\n  return GuidGenerator;\n}();\nexport { GuidGenerator };","map":{"version":3,"names":["Constants","MathUtils","GuidGenerator","cryptoObj","prototype","generateGuid","buffer","Uint8Array","getRandomValues","decimalToHex","err","guidHolder","hex","r","guidResponse","EMPTY_STRING","i","Math","random","isGuid","guid","regexGuid","test"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/crypto/GuidGenerator.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { Constants } from '@azure/msal-common';\nimport { MathUtils } from '../utils/MathUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar GuidGenerator = /** @class */ (function () {\r\n    function GuidGenerator(cryptoObj) {\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n    /*\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n     * pseudo-random numbers.\r\n     * The algorithm is as follows:\r\n     *     Set the two most significant bits (bits 6 and 7) of the\r\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n     *     Set the four most significant bits (bits 12 through 15) of the\r\n     *        time_hi_and_version field to the 4-bit version number from\r\n     *        Section 4.1.3. Version4\r\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n     *     values.\r\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n     * time-low               = 4hexOctet\r\n     * time-mid               = 2hexOctet\r\n     * time-high-and-version  = 2hexOctet\r\n     * clock-seq-and-reserved = hexOctet:\r\n     * clock-seq-low          = hexOctet\r\n     * node                   = 6hexOctet\r\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n     * y values are 8, 9, A, B\r\n     */\r\n    GuidGenerator.prototype.generateGuid = function () {\r\n        try {\r\n            var buffer = new Uint8Array(16);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\r\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\r\n            return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])\r\n                + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])\r\n                + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])\r\n                + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\r\n        }\r\n        catch (err) {\r\n            var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\r\n            var hex = \"0123456789abcdef\";\r\n            var r = 0;\r\n            var guidResponse = Constants.EMPTY_STRING;\r\n            for (var i = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === \"x\") {\r\n                    guidResponse += hex[r];\r\n                }\r\n                else if (guidHolder[i] === \"y\") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                }\r\n                else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    };\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    GuidGenerator.prototype.isGuid = function (guid) {\r\n        var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    };\r\n    return GuidGenerator;\r\n}());\n\nexport { GuidGenerator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}