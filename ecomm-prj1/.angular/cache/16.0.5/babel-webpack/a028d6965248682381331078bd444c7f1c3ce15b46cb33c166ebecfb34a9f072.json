{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObject } from \"./object\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n  return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e) {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified;\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err) {\n      stringified = \"[unable to stringify input]\";\n    }\n    return `Unknown error ${stringified}`;\n  }\n}","map":{"version":3,"names":["isObject","isError","e","hasName","name","hasMessage","message","getErrorMessage","stringified","JSON","stringify","String","err"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-util/dist-esm/src/error.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isObject } from \"./object\";\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e) {\n    if (isObject(e)) {\n        const hasName = typeof e.name === \"string\";\n        const hasMessage = typeof e.message === \"string\";\n        return hasName && hasMessage;\n    }\n    return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e) {\n    if (isError(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,QAAQ,QAAQ,UAAU;AACnC;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,CAAC,EAAE;EACvB,IAAIF,QAAQ,CAACE,CAAC,CAAC,EAAE;IACb,MAAMC,OAAO,GAAG,OAAOD,CAAC,CAACE,IAAI,KAAK,QAAQ;IAC1C,MAAMC,UAAU,GAAG,OAAOH,CAAC,CAACI,OAAO,KAAK,QAAQ;IAChD,OAAOH,OAAO,IAAIE,UAAU;EAChC;EACA,OAAO,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAeA,CAACL,CAAC,EAAE;EAC/B,IAAID,OAAO,CAACC,CAAC,CAAC,EAAE;IACZ,OAAOA,CAAC,CAACI,OAAO;EACpB,CAAC,MACI;IACD,IAAIE,WAAW;IACf,IAAI;MACA,IAAI,OAAON,CAAC,KAAK,QAAQ,IAAIA,CAAC,EAAE;QAC5BM,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACR,CAAC,CAAC;MACnC,CAAC,MACI;QACDM,WAAW,GAAGG,MAAM,CAACT,CAAC,CAAC;MAC3B;IACJ,CAAC,CACD,OAAOU,GAAG,EAAE;MACRJ,WAAW,GAAG,6BAA6B;IAC/C;IACA,OAAQ,iBAAgBA,WAAY,EAAC;EACzC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}