{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { base64ToBytes, bufferToBase64 } from \"./base64.browser\";\nimport { bufferToHex } from \"./hex\";\nimport { utf8ToBytes } from \"./utf8.browser\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport function computeSha256Hmac(_x, _x2, _x3) {\n  return _computeSha256Hmac.apply(this, arguments);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nfunction _computeSha256Hmac() {\n  _computeSha256Hmac = _asyncToGenerator(function* (key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = base64ToBytes(key);\n    const stringToSignBytes = utf8ToBytes(stringToSign);\n    const cryptoKey = yield crypto.importKey(\"raw\", keyBytes, {\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, false, [\"sign\"]);\n    const signature = yield crypto.sign({\n      name: \"HMAC\",\n      hash: {\n        name: \"SHA-256\"\n      }\n    }, cryptoKey, stringToSignBytes);\n    switch (encoding) {\n      case \"base64\":\n        return bufferToBase64(signature);\n      case \"hex\":\n        return bufferToHex(signature);\n    }\n  });\n  return _computeSha256Hmac.apply(this, arguments);\n}\nexport function computeSha256Hash(_x4, _x5) {\n  return _computeSha256Hash.apply(this, arguments);\n}\nfunction _computeSha256Hash() {\n  _computeSha256Hash = _asyncToGenerator(function* (content, encoding) {\n    const contentBytes = utf8ToBytes(content);\n    const digest = yield getCrypto().digest({\n      name: \"SHA-256\"\n    }, contentBytes);\n    switch (encoding) {\n      case \"base64\":\n        return bufferToBase64(digest);\n      case \"hex\":\n        return bufferToHex(digest);\n    }\n  });\n  return _computeSha256Hash.apply(this, arguments);\n}","map":{"version":3,"names":["base64ToBytes","bufferToBase64","bufferToHex","utf8ToBytes","subtleCrypto","getCrypto","self","crypto","subtle","Error","computeSha256Hmac","_x","_x2","_x3","_computeSha256Hmac","apply","arguments","_asyncToGenerator","key","stringToSign","encoding","keyBytes","stringToSignBytes","cryptoKey","importKey","name","hash","signature","sign","computeSha256Hash","_x4","_x5","_computeSha256Hash","content","contentBytes","digest"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-util/dist-esm/src/sha256.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { base64ToBytes, bufferToBase64 } from \"./base64.browser\";\nimport { bufferToHex } from \"./hex\";\nimport { utf8ToBytes } from \"./utf8.browser\";\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n    if (subtleCrypto) {\n        return subtleCrypto;\n    }\n    if (!self.crypto || !self.crypto.subtle) {\n        throw new Error(\"Your browser environment does not support cryptography functions.\");\n    }\n    subtleCrypto = self.crypto.subtle;\n    return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport async function computeSha256Hmac(key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = base64ToBytes(key);\n    const stringToSignBytes = utf8ToBytes(stringToSign);\n    const cryptoKey = await crypto.importKey(\"raw\", keyBytes, {\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, false, [\"sign\"]);\n    const signature = await crypto.sign({\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, cryptoKey, stringToSignBytes);\n    switch (encoding) {\n        case \"base64\":\n            return bufferToBase64(signature);\n        case \"hex\":\n            return bufferToHex(signature);\n    }\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport async function computeSha256Hash(content, encoding) {\n    const contentBytes = utf8ToBytes(content);\n    const digest = await getCrypto().digest({ name: \"SHA-256\" }, contentBytes);\n    switch (encoding) {\n        case \"base64\":\n            return bufferToBase64(digest);\n        case \"hex\":\n            return bufferToHex(digest);\n    }\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,aAAa,EAAEC,cAAc,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,IAAIC,YAAY;AAChB;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACjB,IAAID,YAAY,EAAE;IACd,OAAOA,YAAY;EACvB;EACA,IAAI,CAACE,IAAI,CAACC,MAAM,IAAI,CAACD,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE;IACrC,MAAM,IAAIC,KAAK,CAAC,mEAAmE,CAAC;EACxF;EACAL,YAAY,GAAGE,IAAI,CAACC,MAAM,CAACC,MAAM;EACjC,OAAOJ,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAsBM,iBAAiBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAmBvC;AACA;AACA;AACA;AACA;AAJA,SAAAF,mBAAA;EAAAA,kBAAA,GAAAG,iBAAA,CAnBO,WAAiCC,GAAG,EAAEC,YAAY,EAAEC,QAAQ,EAAE;IACjE,MAAMb,MAAM,GAAGF,SAAS,EAAE;IAC1B,MAAMgB,QAAQ,GAAGrB,aAAa,CAACkB,GAAG,CAAC;IACnC,MAAMI,iBAAiB,GAAGnB,WAAW,CAACgB,YAAY,CAAC;IACnD,MAAMI,SAAS,SAAShB,MAAM,CAACiB,SAAS,CAAC,KAAK,EAAEH,QAAQ,EAAE;MACtDI,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QAAED,IAAI,EAAE;MAAU;IAC5B,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC;IACnB,MAAME,SAAS,SAASpB,MAAM,CAACqB,IAAI,CAAC;MAChCH,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QAAED,IAAI,EAAE;MAAU;IAC5B,CAAC,EAAEF,SAAS,EAAED,iBAAiB,CAAC;IAChC,QAAQF,QAAQ;MACZ,KAAK,QAAQ;QACT,OAAOnB,cAAc,CAAC0B,SAAS,CAAC;MACpC,KAAK,KAAK;QACN,OAAOzB,WAAW,CAACyB,SAAS,CAAC;IAAC;EAE1C,CAAC;EAAA,OAAAb,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAMD,gBAAsBa,iBAAiBA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,kBAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA;AAStC,SAAAgB,mBAAA;EAAAA,kBAAA,GAAAf,iBAAA,CATM,WAAiCgB,OAAO,EAAEb,QAAQ,EAAE;IACvD,MAAMc,YAAY,GAAG/B,WAAW,CAAC8B,OAAO,CAAC;IACzC,MAAME,MAAM,SAAS9B,SAAS,EAAE,CAAC8B,MAAM,CAAC;MAAEV,IAAI,EAAE;IAAU,CAAC,EAAES,YAAY,CAAC;IAC1E,QAAQd,QAAQ;MACZ,KAAK,QAAQ;QACT,OAAOnB,cAAc,CAACkC,MAAM,CAAC;MACjC,KAAK,KAAK;QACN,OAAOjC,WAAW,CAACiC,MAAM,CAAC;IAAC;EAEvC,CAAC;EAAA,OAAAH,kBAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}