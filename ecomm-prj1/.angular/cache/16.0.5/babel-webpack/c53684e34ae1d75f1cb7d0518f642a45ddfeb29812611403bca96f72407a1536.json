{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n    return buffer;\n  },\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n    let value = parameter.value;\n    if (parameter.length <= this.maximumLength) {\n      let length;\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, 'ucs2');\n      }\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n    let value = parameter.value;\n    if (parameter.length <= this.maximumLength) {\n      if (value instanceof Buffer) {\n        yield value;\n      } else {\n        value = value.toString();\n        yield Buffer.from(value, 'ucs2');\n      }\n    } else {\n      if (value instanceof Buffer) {\n        const length = value.length;\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield value;\n        }\n      } else {\n        value = value.toString();\n        const length = Buffer.byteLength(value, 'ucs2');\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n      yield PLP_TERMINATOR;\n    }\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","MAX","UNKNOWN_PLP_LEN","Buffer","from","PLP_TERMINATOR","NULL_LENGTH","MAX_NULL_LENGTH","NVarChar","id","type","name","maximumLength","declaration","parameter","length","toString","output","resolveLength","isBuffer","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","collation","toBuffer","copy","generateParameterLength","options","byteLength","generateParameterData","writeUInt32LE","validate","TypeError","_default","module"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/data-types/nvarchar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length <= this.maximumLength) {\n      let length;\n\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, 'ucs2');\n      }\n\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length <= this.maximumLength) {\n      if (value instanceof Buffer) {\n        yield value;\n      } else {\n        value = value.toString();\n        yield Buffer.from(value, 'ucs2');\n      }\n    } else {\n      if (value instanceof Buffer) {\n        const length = value.length;\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield value;\n        }\n      } else {\n        value = value.toString();\n        const length = Buffer.byteLength(value, 'ucs2');\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}