{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar BrowserPerformanceClient = /** @class */function (_super) {\n  __extends(BrowserPerformanceClient, _super);\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n    _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n  BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\n    var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\n    var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\n    var incompleteMeasurements = [];\n    if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\n      rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\n        incompleteMeasurements.push(__assign({}, subMeasurement));\n      });\n    }\n    // Clean up remaining marks for incomplete sub-measurements\n    if (incompleteMeasurements.length > 0) {\n      BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\n    }\n  };\n  BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\n    return typeof window !== \"undefined\" && typeof window.performance !== \"undefined\" && typeof window.performance.now === \"function\";\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this;\n    // Capture page visibilityState and then invoke start/end measurement\n    var startPageVisibility = this.getPageVisibility();\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function (event) {\n        var res = inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n        return res;\n      },\n      discardMeasurement: function () {\n        inProgressEvent.discardMeasurement();\n        _this.deleteIncompleteSubMeasurements(inProgressEvent);\n        inProgressEvent.measurement.flushMeasurement();\n      }\n    });\n  };\n  /**\r\n   * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @returns\r\n   */\n  BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\n      return;\n    }\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    /**\r\n     * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n     * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n     */\n    if (preQueueEvent) {\n      this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\n      this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\n    }\n    this.preQueueTimeByCorrelationId.set(correlationId, {\n      name: eventName,\n      time: window.performance.now()\n    });\n  };\n  /**\r\n   * Calculates and adds queue time measurement for given performance event.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n  BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!this.supportsBrowserPerformanceNow()) {\n      this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\n      return;\n    }\n    if (!correlationId) {\n      this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\n      return;\n    }\n    var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\n    if (!preQueueTime) {\n      return;\n    }\n    var currentTime = window.performance.now();\n    var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\n    return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\n  };\n  return BrowserPerformanceClient;\n}(PerformanceClient);\nexport { BrowserPerformanceClient };","map":{"version":3,"names":["__extends","__assign","PerformanceClient","BrowserCrypto","GuidGenerator","BrowserPerformanceMeasurement","BrowserPerformanceClient","_super","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","cryptoOptions","_this","call","browserCrypto","guidGenerator","prototype","startPerformanceMeasuremeant","measureName","correlationId","generateId","generateGuid","getPageVisibility","_a","document","visibilityState","toString","deleteIncompleteSubMeasurements","inProgressEvent","rootEvent","eventsByCorrelationId","get","event","isRootEvent","eventId","incompleteMeasurements","incompleteSubMeasurements","forEach","subMeasurement","push","length","flushMeasurements","supportsBrowserPerformanceNow","window","performance","now","startMeasurement","startPageVisibility","endMeasurement","res","endPageVisibility","discardMeasurement","measurement","flushMeasurement","setPreQueueTime","eventName","trace","preQueueEvent","preQueueTimeByCorrelationId","name","addQueueMeasurement","undefined","set","time","queueTime","manuallyCompleted","preQueueTime","getPreQueueTime","currentTime","resQueueTime","calculateQueuedTime"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/telemetry/BrowserPerformanceClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar BrowserPerformanceClient = /** @class */ (function (_super) {\r\n    __extends(BrowserPerformanceClient, _super);\r\n    function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {\r\n        var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\r\n        _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);\r\n        _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\r\n        return _this;\r\n    }\r\n    BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\r\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\r\n    };\r\n    BrowserPerformanceClient.prototype.generateId = function () {\r\n        return this.guidGenerator.generateGuid();\r\n    };\r\n    BrowserPerformanceClient.prototype.getPageVisibility = function () {\r\n        var _a;\r\n        return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\r\n    };\r\n    BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {\r\n        var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);\r\n        var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;\r\n        var incompleteMeasurements = [];\r\n        if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {\r\n            rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {\r\n                incompleteMeasurements.push(__assign({}, subMeasurement));\r\n            });\r\n        }\r\n        // Clean up remaining marks for incomplete sub-measurements\r\n        if (incompleteMeasurements.length > 0) {\r\n            BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);\r\n        }\r\n    };\r\n    BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {\r\n        return typeof window !== \"undefined\" &&\r\n            typeof window.performance !== \"undefined\" &&\r\n            typeof window.performance.now === \"function\";\r\n    };\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     * Also captures browser page visibilityState.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n     */\r\n    BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\r\n        var _this = this;\r\n        // Capture page visibilityState and then invoke start/end measurement\r\n        var startPageVisibility = this.getPageVisibility();\r\n        var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\r\n        return __assign(__assign({}, inProgressEvent), { endMeasurement: function (event) {\r\n                var res = inProgressEvent.endMeasurement(__assign({ startPageVisibility: startPageVisibility, endPageVisibility: _this.getPageVisibility() }, event));\r\n                _this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n                return res;\r\n            }, discardMeasurement: function () {\r\n                inProgressEvent.discardMeasurement();\r\n                _this.deleteIncompleteSubMeasurements(inProgressEvent);\r\n                inProgressEvent.measurement.flushMeasurement();\r\n            } });\r\n    };\r\n    /**\r\n     * Adds pre-queue time to preQueueTimeByCorrelationId map.\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @returns\r\n     */\r\n    BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for \" + eventName);\r\n            return;\r\n        }\r\n        if (!correlationId) {\r\n            this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to set telemetry queue time\");\r\n            return;\r\n        }\r\n        var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\r\n        /**\r\n         * Manually complete queue measurement if there is an incomplete pre-queue event.\r\n         * Incomplete pre-queue events are instrumentation bugs that should be fixed.\r\n         */\r\n        if (preQueueEvent) {\r\n            this.logger.trace(\"BrowserPerformanceClient: Incomplete pre-queue \" + preQueueEvent.name + \" found\", correlationId);\r\n            this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);\r\n        }\r\n        this.preQueueTimeByCorrelationId.set(correlationId, { name: eventName, time: window.performance.now() });\r\n    };\r\n    /**\r\n     * Calculates and adds queue time measurement for given performance event.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\r\n        if (!this.supportsBrowserPerformanceNow()) {\r\n            this.logger.trace(\"BrowserPerformanceClient: window performance API not available, unable to add queue measurement for \" + eventName);\r\n            return;\r\n        }\r\n        if (!correlationId) {\r\n            this.logger.trace(\"BrowserPerformanceClient: correlationId for \" + eventName + \" not provided, unable to add queue measurement\");\r\n            return;\r\n        }\r\n        var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);\r\n        if (!preQueueTime) {\r\n            return;\r\n        }\r\n        var currentTime = window.performance.now();\r\n        var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);\r\n        return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);\r\n    };\r\n    return BrowserPerformanceClient;\r\n}(PerformanceClient));\n\nexport { BrowserPerformanceClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}