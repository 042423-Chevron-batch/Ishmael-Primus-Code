{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential {\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(options) {\n    if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n      const error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n    const browserOptions = options;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(`Invalid loginStyle: ${browserOptions.loginStyle}. Should be any of the following: ${loginStyles.join(\", \")}.`);\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n    const msalOptions = Object.assign(Object.assign({}, options), {\n      logger,\n      loginStyle: loginStyle,\n      redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri\n    });\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(`${_this.constructor.name}.getToken`, options, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (newOptions) {\n          const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n          return _this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n            disableAutomaticAuthentication: _this.disableAutomaticAuthentication\n          }));\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  authenticate(scopes, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(`${_this2.constructor.name}.authenticate`, options, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (newOptions) {\n          const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n          yield _this2.msalFlow.getToken(arrayScopes, newOptions);\n          return _this2.msalFlow.getActiveAccount();\n        });\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}","map":{"version":3,"names":["credentialLogger","formatError","tracingClient","MSALAuthCode","logger","InteractiveBrowserCredential","constructor","options","clientId","error","Error","info","browserOptions","loginStyle","loginStyles","indexOf","join","msalOptions","Object","assign","redirectUri","msalFlow","disableAutomaticAuthentication","getToken","scopes","_this","_asyncToGenerator","withSpan","name","_ref","newOptions","arrayScopes","Array","isArray","_x","apply","arguments","authenticate","_this2","_ref2","getActiveAccount","_x2"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/identity/dist-esm/src/credentials/interactiveBrowserCredential.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential {\n    /**\n     * Creates an instance of the InteractiveBrowserCredential with the\n     * details needed to authenticate against Azure Active Directory with\n     * a user identity.\n     *\n     * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n     * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n     * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n     *\n     * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n     * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(options) {\n        if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n            const error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n            logger.info(formatError(\"\", error));\n            throw error;\n        }\n        const browserOptions = options;\n        const loginStyle = browserOptions.loginStyle || \"popup\";\n        const loginStyles = [\"redirect\", \"popup\"];\n        if (loginStyles.indexOf(loginStyle) === -1) {\n            const error = new Error(`Invalid loginStyle: ${browserOptions.loginStyle}. Should be any of the following: ${loginStyles.join(\", \")}.`);\n            logger.info(formatError(\"\", error));\n            throw error;\n        }\n        const msalOptions = Object.assign(Object.assign({}, options), { logger, loginStyle: loginStyle, redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri });\n        this.msalFlow = new MSALAuthCode(msalOptions);\n        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), { disableAutomaticAuthentication: this.disableAutomaticAuthentication }));\n        });\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */\n    async authenticate(scopes, options = {}) {\n        return tracingClient.withSpan(`${this.constructor.name}.authenticate`, options, async (newOptions) => {\n            const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n            await this.msalFlow.getToken(arrayScopes, newOptions);\n            return this.msalFlow.getActiveAccount();\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}