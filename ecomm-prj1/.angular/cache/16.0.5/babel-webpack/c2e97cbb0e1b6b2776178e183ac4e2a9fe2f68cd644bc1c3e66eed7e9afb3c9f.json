{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as sql from 'mssql';\nimport * as i0 from \"@angular/core\";\nclass DatabaseService {\n  constructor() {\n    this.config = {\n      server: '052123-batch-server.database.windows.net',\n      database: '052123-batch',\n      user: 'batch052123',\n      password: 'Nubian19',\n      options: {\n        encrypt: true // Enable encryption for secure connection\n      }\n    };\n  }\n\n  executeQuery(query) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const pool = yield new sql.ConnectionPool(_this.config).connect();\n        const result = yield pool.request().query(query);\n        return result.recordset;\n      } catch (error) {\n        console.log('Error:', error);\n        throw error;\n      } finally {\n        if (pool) {\n          pool.close();\n        }\n      }\n      async;\n      getCustomers();\n      Promise < any > {\n        const: query = 'SELECT * FROM Customer',\n        return: yield _this.executeQuery(query)\n      };\n      async;\n      getInventory();\n      Promise < any > {\n        const: query = 'SELECT * FROM Inventory',\n        return: yield _this.executeQuery(query)\n      };\n      async;\n      getOrders();\n      Promise < any > {\n        const: query = 'SELECT * FROM [Order]',\n        return: yield _this.executeQuery(query)\n      };\n      async;\n      getProducts();\n      Promise < any > {\n        const: query = 'SELECT * FROM Products',\n        return: yield _this.executeQuery(query)\n      };\n      async;\n      getJunction();\n      Promise < any > {\n        const: query = 'SELECT * FROM StoreProductJunction',\n        return: yield _this.executeQuery(query)\n      };\n      async;\n      getStores();\n      Promise < any > {\n        const: query = 'SELECT * FROM Stores',\n        return: yield _this.executeQuery(query)\n      };\n    })();\n  }\n}\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)();\n};\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});\nexport { DatabaseService };","map":{"version":3,"names":["sql","DatabaseService","constructor","config","server","database","user","password","options","encrypt","executeQuery","query","_this","_asyncToGenerator","pool","ConnectionPool","connect","result","request","recordset","error","console","log","close","async","getCustomers","Promise","any","const","return","getInventory","getOrders","getProducts","getJunction","getStores","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ishma\\Revature\\Ishmael-Primus-Code-\\ecomm-prj1\\src\\app\\database.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as sql from 'mssql';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseService {\n  private config: sql.config = {\n    server: '052123-batch-server.database.windows.net',\n    database: '052123-batch',\n    user: 'batch052123',\n    password: 'Nubian19',\n    options: {\n      encrypt: true // Enable encryption for secure connection\n    }\n  };\n\n  async executeQuery(query: string): Promise<any> {\n    try {\n      const pool = await new sql.ConnectionPool(this.config).connect();\n      const result = await pool.request().query(query);\n      return result.recordset;\n    } catch (error) {\n      console.log('Error:', error);\n      throw error;\n    } finally {\n      if (pool) {\n        \n      pool.close();\n    }\n  }\n\n  async getCustomers(): Promise<any> {\n    const query = 'SELECT * FROM Customer';\n    return await this.executeQuery(query);\n  }\n\n  async getInventory(): Promise<any> {\n    const query = 'SELECT * FROM Inventory';\n    return await this.executeQuery(query);\n  }\n\n  async getOrders(): Promise<any> {\n    const query = 'SELECT * FROM [Order]';\n    return await this.executeQuery(query);\n  }\n\n  async getProducts(): Promise<any> {\n    const query = 'SELECT * FROM Products';\n    return await this.executeQuery(query);\n  }\n\n  async getJunction(): Promise<any> {\n    const query = 'SELECT * FROM StoreProductJunction';\n    return await this.executeQuery(query);\n  }\n\n  async getStores(): Promise<any> {\n    const query = 'SELECT * FROM Stores';\n    return await this.executeQuery(query);\n  }\n}\n"],"mappings":";AACA,OAAO,KAAKA,GAAG,MAAM,OAAO;;AAG5B,MAGaC,eAAe;EAH5BC,YAAA;IAIU,KAAAC,MAAM,GAAe;MAC3BC,MAAM,EAAE,0CAA0C;MAClDC,QAAQ,EAAE,cAAc;MACxBC,IAAI,EAAE,aAAa;MACnBC,QAAQ,EAAE,UAAU;MACpBC,OAAO,EAAE;QACPC,OAAO,EAAE,IAAI,CAAC;;KAEjB;;;EAEKC,YAAYA,CAACC,KAAa;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC9B,IAAI;QACF,MAAMC,IAAI,SAAS,IAAId,GAAG,CAACe,cAAc,CAACH,KAAI,CAACT,MAAM,CAAC,CAACa,OAAO,EAAE;QAChE,MAAMC,MAAM,SAASH,IAAI,CAACI,OAAO,EAAE,CAACP,KAAK,CAACA,KAAK,CAAC;QAChD,OAAOM,MAAM,CAACE,SAAS;OACxB,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;QAC5B,MAAMA,KAAK;OACZ,SAAS;QACR,IAAIN,IAAI,EAAE;UAEVA,IAAI,CAACS,KAAK,EAAE;;;MAIhBC,KAAK;MAACC,YAAY,EAAE;MAAEC,OAAO,GAACC,GAAG,GAAE;QACjCC,KAAK,EAACjB,KAAK,GAAG,wBAAwB;QACtCkB,MAAM,QAAOjB,KAAI,CAACF,YAAY,CAACC,KAAK;OACrC;MAEDa,KAAK;MAACM,YAAY,EAAE;MAAEJ,OAAO,GAACC,GAAG,GAAE;QACjCC,KAAK,EAACjB,KAAK,GAAG,yBAAyB;QACvCkB,MAAM,QAAOjB,KAAI,CAACF,YAAY,CAACC,KAAK;OACrC;MAEDa,KAAK;MAACO,SAAS,EAAE;MAAEL,OAAO,GAACC,GAAG,GAAE;QAC9BC,KAAK,EAACjB,KAAK,GAAG,uBAAuB;QACrCkB,MAAM,QAAOjB,KAAI,CAACF,YAAY,CAACC,KAAK;OACrC;MAEDa,KAAK;MAACQ,WAAW,EAAE;MAAEN,OAAO,GAACC,GAAG,GAAE;QAChCC,KAAK,EAACjB,KAAK,GAAG,wBAAwB;QACtCkB,MAAM,QAAOjB,KAAI,CAACF,YAAY,CAACC,KAAK;OACrC;MAEDa,KAAK;MAACS,WAAW,EAAE;MAAEP,OAAO,GAACC,GAAG,GAAE;QAChCC,KAAK,EAACjB,KAAK,GAAG,oCAAoC;QAClDkB,MAAM,QAAOjB,KAAI,CAACF,YAAY,CAACC,KAAK;OACrC;MAEDa,KAAK;MAACU,SAAS,EAAE;MAAER,OAAO,GAACC,GAAG,GAAE;QAC9BC,KAAK,EAACjB,KAAK,GAAG,sBAAsB;QACpCkB,MAAM,QAAOjB,KAAI,CAACF,YAAY,CAACC,KAAK;OACrC;IAAA;EACH;;AAvDaV,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAkC,OAAA,EAAflC,eAAe,CAAAmC,IAAA;EAAAC,UAAA,EAFd;AAAM;SAEPpC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}