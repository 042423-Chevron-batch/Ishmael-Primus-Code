{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { MsalBaseUtilities, getAuthority, getKnownAuthorities } from \"../utils\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(options) {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin\n    }\n  };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport class MsalBrowser extends MsalBaseUtilities {\n  constructor(options) {\n    super(options);\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n    if (options.authenticationRecord) {\n      this.account = Object.assign(Object.assign({}, options.authenticationRecord), {\n        tenantId: this.tenantId\n      });\n    }\n  }\n  /**\n   * In the browsers we don't need to init()\n   */\n  init() {\n    return _asyncToGenerator(function* () {})();\n  } // Nothing to do here.\n  /**\n   * Clears MSAL's cache.\n   */\n  logout() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      (_a = _this.app) === null || _a === void 0 ? void 0 : _a.logout();\n    })();\n  }\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  getToken(scopes, options = {}) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const tenantId = processMultiTenantRequest(_this2.tenantId, options) || _this2.tenantId;\n      if (!options.authority) {\n        options.authority = getAuthority(tenantId, _this2.authorityHost);\n      }\n      // We ensure that redirection is handled at this point.\n      yield _this2.handleRedirect();\n      if (!(yield _this2.getActiveAccount()) && !_this2.disableAutomaticAuthentication) {\n        yield _this2.login(scopes);\n      }\n      return _this2.getTokenSilent(scopes).catch(err => {\n        if (err.name !== \"AuthenticationRequiredError\") {\n          throw err;\n        }\n        if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n          throw new AuthenticationRequiredError({\n            scopes,\n            getTokenOptions: options,\n            message: \"Automatic authentication has been disabled. You may call the authentication() method.\"\n          });\n        }\n        _this2.logger.info(`Silent authentication failed, falling back to interactive method ${_this2.loginStyle}`);\n        return _this2.doGetToken(scopes);\n      });\n    })();\n  }\n}","map":{"version":3,"names":["DefaultTenantId","resolveTenantId","processMultiTenantRequest","AuthenticationRequiredError","CredentialUnavailableError","MsalBaseUtilities","getAuthority","getKnownAuthorities","defaultBrowserMsalConfig","options","tenantId","authority","authorityHost","auth","clientId","knownAuthorities","redirectUri","self","location","origin","MsalBrowser","constructor","logger","loginStyle","msalConfig","disableAutomaticAuthentication","authenticationRecord","account","Object","assign","init","_asyncToGenerator","logout","_this","_a","app","getToken","scopes","_this2","handleRedirect","getActiveAccount","login","getTokenSilent","catch","err","name","getTokenOptions","message","info","doGetToken"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/identity/dist-esm/src/msal/browserFlows/msalBrowserCommon.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { MsalBaseUtilities, getAuthority, getKnownAuthorities } from \"../utils\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(options) {\n    const tenantId = options.tenantId || DefaultTenantId;\n    const authority = getAuthority(tenantId, options.authorityHost);\n    return {\n        auth: {\n            clientId: options.clientId,\n            authority,\n            knownAuthorities: getKnownAuthorities(tenantId, authority),\n            // If the users picked redirect as their login style,\n            // but they didn't provide a redirectUri,\n            // we can try to use the current page we're in as a default value.\n            redirectUri: options.redirectUri || self.location.origin,\n        },\n    };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport class MsalBrowser extends MsalBaseUtilities {\n    constructor(options) {\n        super(options);\n        this.logger = options.logger;\n        this.loginStyle = options.loginStyle;\n        if (!options.clientId) {\n            throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n        }\n        this.clientId = options.clientId;\n        this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n        this.authorityHost = options.authorityHost;\n        this.msalConfig = defaultBrowserMsalConfig(options);\n        this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n        if (options.authenticationRecord) {\n            this.account = Object.assign(Object.assign({}, options.authenticationRecord), { tenantId: this.tenantId });\n        }\n    }\n    /**\n     * In the browsers we don't need to init()\n     */\n    async init() {\n        // Nothing to do here.\n    }\n    /**\n     * Clears MSAL's cache.\n     */\n    async logout() {\n        var _a;\n        (_a = this.app) === null || _a === void 0 ? void 0 : _a.logout();\n    }\n    /**\n     * Attempts to retrieve an authenticated token from MSAL.\n     */\n    async getToken(scopes, options = {}) {\n        const tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n        if (!options.authority) {\n            options.authority = getAuthority(tenantId, this.authorityHost);\n        }\n        // We ensure that redirection is handled at this point.\n        await this.handleRedirect();\n        if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n            await this.login(scopes);\n        }\n        return this.getTokenSilent(scopes).catch((err) => {\n            if (err.name !== \"AuthenticationRequiredError\") {\n                throw err;\n            }\n            if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n                throw new AuthenticationRequiredError({\n                    scopes,\n                    getTokenOptions: options,\n                    message: \"Automatic authentication has been disabled. You may call the authentication() method.\",\n                });\n            }\n            this.logger.info(`Silent authentication failed, falling back to interactive method ${this.loginStyle}`);\n            return this.doGetToken(scopes);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}