{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\nvar UrlString = /** @class */function () {\n  function UrlString(url) {\n    this._urlString = url;\n    if (StringUtils.isEmpty(this._urlString)) {\n      // Throws error if url is empty\n      throw ClientConfigurationError.createUrlEmptyError();\n    }\n    if (StringUtils.isEmpty(this.getHash())) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n  Object.defineProperty(UrlString.prototype, \"urlString\", {\n    get: function () {\n      return this._urlString;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Ensure urls are lower case and end with a / character.\r\n   * @param url\r\n   */\n  UrlString.canonicalizeUri = function (url) {\n    if (url) {\n      var lowerCaseUrl = url.toLowerCase();\n      if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n      if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n      return lowerCaseUrl;\n    }\n    return url;\n  };\n  /**\r\n   * Throws if urlString passed is not a valid authority URI string.\r\n   */\n  UrlString.prototype.validateAsUri = function () {\n    // Attempts to parse url for uri components\n    var components;\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError.createUrlParseError(e);\n    }\n    // Throw error if URI or path segments are not parseable.\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    }\n    // Throw error if uri is insecure.\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\n    }\n  };\n  /**\r\n   * Given a url and a query string return the url with provided query string appended\r\n   * @param url\r\n   * @param queryString\r\n   */\n  UrlString.appendQueryString = function (url, queryString) {\n    if (StringUtils.isEmpty(queryString)) {\n      return url;\n    }\n    return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\n  };\n  /**\r\n   * Returns a url with the hash removed\r\n   * @param url\r\n   */\n  UrlString.removeHashFromUrl = function (url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  };\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n  UrlString.prototype.replaceTenantPath = function (tenantId) {\n    var urlObject = this.getUrlComponents();\n    var pathArray = urlObject.PathSegments;\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  };\n  /**\r\n   * Returns the anchor part(#) of the URL\r\n   */\n  UrlString.prototype.getHash = function () {\n    return UrlString.parseHash(this.urlString);\n  };\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n  UrlString.prototype.getUrlComponents = function () {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n    // If url string does not match regEx, we throw an error\n    var match = this.urlString.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\n    }\n    // Url component object\n    var urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    var pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(function (val) {\n      return val && val.length > 0;\n    }); // remove empty elements\n    urlComponents.PathSegments = pathSegments;\n    if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n    return urlComponents;\n  };\n  UrlString.getDomainFromUrl = function (url) {\n    var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    var match = url.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\n    }\n    return match[2];\n  };\n  UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants.FORWARD_SLASH) {\n      var url = new UrlString(baseUrl);\n      var baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n    return relativeUrl;\n  };\n  /**\r\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n   * @param hashString\r\n   */\n  UrlString.parseHash = function (hashString) {\n    var hashIndex1 = hashString.indexOf(\"#\");\n    var hashIndex2 = hashString.indexOf(\"#/\");\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Parses query string from given string. Returns empty string if no query symbol is found.\r\n   * @param queryString\r\n   */\n  UrlString.parseQueryString = function (queryString) {\n    var queryIndex1 = queryString.indexOf(\"?\");\n    var queryIndex2 = queryString.indexOf(\"/?\");\n    if (queryIndex2 > -1) {\n      return queryString.substring(queryIndex2 + 2);\n    } else if (queryIndex1 > -1) {\n      return queryString.substring(queryIndex1 + 1);\n    }\n    return Constants.EMPTY_STRING;\n  };\n  UrlString.constructAuthorityUriFromObject = function (urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  };\n  /**\r\n   * Returns URL hash as server auth code response object.\r\n   */\n  UrlString.getDeserializedHash = function (hash) {\n    // Check if given hash is empty\n    if (StringUtils.isEmpty(hash)) {\n      return {};\n    }\n    // Strip the # symbol if present\n    var parsedHash = UrlString.parseHash(hash);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\n    // Check if deserialization didn't work\n    if (!deserializedHash) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n    return deserializedHash;\n  };\n  /**\r\n   * Returns URL query string as server auth code response object.\r\n   */\n  UrlString.getDeserializedQueryString = function (query) {\n    // Check if given query is empty\n    if (StringUtils.isEmpty(query)) {\n      return {};\n    }\n    // Strip the ? symbol if present\n    var parsedQueryString = UrlString.parseQueryString(query);\n    // If ? symbol was not present, above will return empty string, so give original query value\n    var deserializedQueryString = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString);\n    // Check if deserialization didn't work\n    if (!deserializedQueryString) {\n      throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\n    }\n    return deserializedQueryString;\n  };\n  /**\r\n   * Check if the hash of the URL string contains known properties\r\n   */\n  UrlString.hashContainsKnownProperties = function (hash) {\n    if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\n      // Hash doesn't contain key/value pairs\n      return false;\n    }\n    var parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  };\n  return UrlString;\n}();\nexport { UrlString };","map":{"version":3,"names":["ClientConfigurationError","ClientAuthError","StringUtils","AADAuthorityConstants","Constants","UrlString","url","_urlString","isEmpty","createUrlEmptyError","getHash","canonicalizeUri","Object","defineProperty","prototype","get","enumerable","configurable","lowerCaseUrl","toLowerCase","endsWith","slice","validateAsUri","components","getUrlComponents","e","createUrlParseError","HostNameAndPort","PathSegments","urlString","Protocol","createInsecureAuthorityUriError","appendQueryString","queryString","indexOf","removeHashFromUrl","split","replaceTenantPath","tenantId","urlObject","pathArray","length","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","RegExp","match","urlComponents","AbsolutePath","QueryString","pathSegments","filter","val","substring","getDomainFromUrl","getAbsoluteUrl","relativeUrl","baseUrl","FORWARD_SLASH","baseComponents","hashString","hashIndex1","hashIndex2","EMPTY_STRING","parseQueryString","queryIndex1","queryIndex2","join","getDeserializedHash","hash","parsedHash","deserializedHash","queryStringToObject","createHashNotDeserializedError","JSON","stringify","getDeserializedQueryString","query","parsedQueryString","deserializedQueryString","hashContainsKnownProperties","parameters","code","error_description","error","state"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/url/UrlString.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nvar UrlString = /** @class */ (function () {\r\n    function UrlString(url) {\r\n        this._urlString = url;\r\n        if (StringUtils.isEmpty(this._urlString)) {\r\n            // Throws error if url is empty\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n        if (StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    Object.defineProperty(UrlString.prototype, \"urlString\", {\r\n        get: function () {\r\n            return this._urlString;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    UrlString.canonicalizeUri = function (url) {\r\n        if (url) {\r\n            var lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    UrlString.prototype.validateAsUri = function () {\r\n        // Attempts to parse url for uri components\r\n        var components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n    };\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    UrlString.appendQueryString = function (url, queryString) {\r\n        if (StringUtils.isEmpty(queryString)) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\r\n    };\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    UrlString.removeHashFromUrl = function (url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    };\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    UrlString.prototype.replaceTenantPath = function (tenantId) {\r\n        var urlObject = this.getUrlComponents();\r\n        var pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    };\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    UrlString.prototype.getHash = function () {\r\n        return UrlString.parseHash(this.urlString);\r\n    };\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    UrlString.prototype.getUrlComponents = function () {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        var match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + this.urlString);\r\n        }\r\n        // Url component object\r\n        var urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7]\r\n        };\r\n        var pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    };\r\n    UrlString.getDomainFromUrl = function (url) {\r\n        var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        var match = url.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(\"Given url string: \" + url);\r\n        }\r\n        return match[2];\r\n    };\r\n    UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            var url = new UrlString(baseUrl);\r\n            var baseComponents = url.getUrlComponents();\r\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\r\n        }\r\n        return relativeUrl;\r\n    };\r\n    /**\r\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n     * @param hashString\r\n     */\r\n    UrlString.parseHash = function (hashString) {\r\n        var hashIndex1 = hashString.indexOf(\"#\");\r\n        var hashIndex2 = hashString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return hashString.substring(hashIndex2 + 2);\r\n        }\r\n        else if (hashIndex1 > -1) {\r\n            return hashString.substring(hashIndex1 + 1);\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    };\r\n    /**\r\n     * Parses query string from given string. Returns empty string if no query symbol is found.\r\n     * @param queryString\r\n     */\r\n    UrlString.parseQueryString = function (queryString) {\r\n        var queryIndex1 = queryString.indexOf(\"?\");\r\n        var queryIndex2 = queryString.indexOf(\"/?\");\r\n        if (queryIndex2 > -1) {\r\n            return queryString.substring(queryIndex2 + 2);\r\n        }\r\n        else if (queryIndex1 > -1) {\r\n            return queryString.substring(queryIndex1 + 1);\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    };\r\n    UrlString.constructAuthorityUriFromObject = function (urlObject) {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    };\r\n    /**\r\n     * Returns URL hash as server auth code response object.\r\n     */\r\n    UrlString.getDeserializedHash = function (hash) {\r\n        // Check if given hash is empty\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return {};\r\n        }\r\n        // Strip the # symbol if present\r\n        var parsedHash = UrlString.parseHash(hash);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    };\r\n    /**\r\n     * Returns URL query string as server auth code response object.\r\n     */\r\n    UrlString.getDeserializedQueryString = function (query) {\r\n        // Check if given query is empty\r\n        if (StringUtils.isEmpty(query)) {\r\n            return {};\r\n        }\r\n        // Strip the ? symbol if present\r\n        var parsedQueryString = UrlString.parseQueryString(query);\r\n        // If ? symbol was not present, above will return empty string, so give original query value\r\n        var deserializedQueryString = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedQueryString) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));\r\n        }\r\n        return deserializedQueryString;\r\n    };\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    UrlString.hashContainsKnownProperties = function (hash) {\r\n        if (StringUtils.isEmpty(hash) || hash.indexOf(\"=\") < 0) {\r\n            // Hash doesn't contain key/value pairs\r\n            return false;\r\n        }\r\n        var parameters = UrlString.getDeserializedHash(hash);\r\n        return !!(parameters.code ||\r\n            parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state);\r\n    };\r\n    return UrlString;\r\n}());\n\nexport { UrlString };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,wBAAwB,QAAQ,sCAAsC;AAC/E,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,qBAAqB,EAAEC,SAAS,QAAQ,uBAAuB;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,aAAe,YAAY;EACvC,SAASA,SAASA,CAACC,GAAG,EAAE;IACpB,IAAI,CAACC,UAAU,GAAGD,GAAG;IACrB,IAAIJ,WAAW,CAACM,OAAO,CAAC,IAAI,CAACD,UAAU,CAAC,EAAE;MACtC;MACA,MAAMP,wBAAwB,CAACS,mBAAmB,EAAE;IACxD;IACA,IAAIP,WAAW,CAACM,OAAO,CAAC,IAAI,CAACE,OAAO,EAAE,CAAC,EAAE;MACrC,IAAI,CAACH,UAAU,GAAGF,SAAS,CAACM,eAAe,CAACL,GAAG,CAAC;IACpD;EACJ;EACAM,MAAM,CAACC,cAAc,CAACR,SAAS,CAACS,SAAS,EAAE,WAAW,EAAE;IACpDC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACR,UAAU;IAC1B,CAAC;IACDS,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;EACIZ,SAAS,CAACM,eAAe,GAAG,UAAUL,GAAG,EAAE;IACvC,IAAIA,GAAG,EAAE;MACL,IAAIY,YAAY,GAAGZ,GAAG,CAACa,WAAW,EAAE;MACpC,IAAIjB,WAAW,CAACkB,QAAQ,CAACF,YAAY,EAAE,GAAG,CAAC,EAAE;QACzCA,YAAY,GAAGA,YAAY,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5C,CAAC,MACI,IAAInB,WAAW,CAACkB,QAAQ,CAACF,YAAY,EAAE,IAAI,CAAC,EAAE;QAC/CA,YAAY,GAAGA,YAAY,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC5C;MACA,IAAI,CAACnB,WAAW,CAACkB,QAAQ,CAACF,YAAY,EAAE,GAAG,CAAC,EAAE;QAC1CA,YAAY,IAAI,GAAG;MACvB;MACA,OAAOA,YAAY;IACvB;IACA,OAAOZ,GAAG;EACd,CAAC;EACD;AACJ;AACA;EACID,SAAS,CAACS,SAAS,CAACQ,aAAa,GAAG,YAAY;IAC5C;IACA,IAAIC,UAAU;IACd,IAAI;MACAA,UAAU,GAAG,IAAI,CAACC,gBAAgB,EAAE;IACxC,CAAC,CACD,OAAOC,CAAC,EAAE;MACN,MAAMzB,wBAAwB,CAAC0B,mBAAmB,CAACD,CAAC,CAAC;IACzD;IACA;IACA,IAAI,CAACF,UAAU,CAACI,eAAe,IAAI,CAACJ,UAAU,CAACK,YAAY,EAAE;MACzD,MAAM5B,wBAAwB,CAAC0B,mBAAmB,CAAC,oBAAoB,GAAG,IAAI,CAACG,SAAS,CAAC;IAC7F;IACA;IACA,IAAI,CAACN,UAAU,CAACO,QAAQ,IAAIP,UAAU,CAACO,QAAQ,CAACX,WAAW,EAAE,KAAK,QAAQ,EAAE;MACxE,MAAMnB,wBAAwB,CAAC+B,+BAA+B,CAAC,IAAI,CAACF,SAAS,CAAC;IAClF;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIxB,SAAS,CAAC2B,iBAAiB,GAAG,UAAU1B,GAAG,EAAE2B,WAAW,EAAE;IACtD,IAAI/B,WAAW,CAACM,OAAO,CAACyB,WAAW,CAAC,EAAE;MAClC,OAAO3B,GAAG;IACd;IACA,OAAOA,GAAG,CAAC4B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG5B,GAAG,GAAG,GAAG,GAAG2B,WAAW,GAAG3B,GAAG,GAAG,GAAG,GAAG2B,WAAW;EACnF,CAAC;EACD;AACJ;AACA;AACA;EACI5B,SAAS,CAAC8B,iBAAiB,GAAG,UAAU7B,GAAG,EAAE;IACzC,OAAOD,SAAS,CAACM,eAAe,CAACL,GAAG,CAAC8B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI/B,SAAS,CAACS,SAAS,CAACuB,iBAAiB,GAAG,UAAUC,QAAQ,EAAE;IACxD,IAAIC,SAAS,GAAG,IAAI,CAACf,gBAAgB,EAAE;IACvC,IAAIgB,SAAS,GAAGD,SAAS,CAACX,YAAY;IACtC,IAAIU,QAAQ,IAAKE,SAAS,CAACC,MAAM,KAAK,CAAC,KAAKD,SAAS,CAAC,CAAC,CAAC,KAAKrC,qBAAqB,CAACuC,MAAM,IAAIF,SAAS,CAAC,CAAC,CAAC,KAAKrC,qBAAqB,CAACwC,aAAa,CAAE,EAAE;MACjJH,SAAS,CAAC,CAAC,CAAC,GAAGF,QAAQ;IAC3B;IACA,OAAOjC,SAAS,CAACuC,+BAA+B,CAACL,SAAS,CAAC;EAC/D,CAAC;EACD;AACJ;AACA;EACIlC,SAAS,CAACS,SAAS,CAACJ,OAAO,GAAG,YAAY;IACtC,OAAOL,SAAS,CAACwC,SAAS,CAAC,IAAI,CAAChB,SAAS,CAAC;EAC9C,CAAC;EACD;AACJ;AACA;AACA;EACIxB,SAAS,CAACS,SAAS,CAACU,gBAAgB,GAAG,YAAY;IAC/C;IACA,IAAIsB,KAAK,GAAGC,MAAM,CAAC,4DAA4D,CAAC;IAChF;IACA,IAAIC,KAAK,GAAG,IAAI,CAACnB,SAAS,CAACmB,KAAK,CAACF,KAAK,CAAC;IACvC,IAAI,CAACE,KAAK,EAAE;MACR,MAAMhD,wBAAwB,CAAC0B,mBAAmB,CAAC,oBAAoB,GAAG,IAAI,CAACG,SAAS,CAAC;IAC7F;IACA;IACA,IAAIoB,aAAa,GAAG;MAChBnB,QAAQ,EAAEkB,KAAK,CAAC,CAAC,CAAC;MAClBrB,eAAe,EAAEqB,KAAK,CAAC,CAAC,CAAC;MACzBE,YAAY,EAAEF,KAAK,CAAC,CAAC,CAAC;MACtBG,WAAW,EAAEH,KAAK,CAAC,CAAC;IACxB,CAAC;IACD,IAAII,YAAY,GAAGH,aAAa,CAACC,YAAY,CAACd,KAAK,CAAC,GAAG,CAAC;IACxDgB,YAAY,GAAGA,YAAY,CAACC,MAAM,CAAC,UAAUC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAIA,GAAG,CAACb,MAAM,GAAG,CAAC;IAAE,CAAC,CAAC,CAAC,CAAC;IACtFQ,aAAa,CAACrB,YAAY,GAAGwB,YAAY;IACzC,IAAI,CAAClD,WAAW,CAACM,OAAO,CAACyC,aAAa,CAACE,WAAW,CAAC,IAAIF,aAAa,CAACE,WAAW,CAAC/B,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC5F6B,aAAa,CAACE,WAAW,GAAGF,aAAa,CAACE,WAAW,CAACI,SAAS,CAAC,CAAC,EAAEN,aAAa,CAACE,WAAW,CAACV,MAAM,GAAG,CAAC,CAAC;IAC5G;IACA,OAAOQ,aAAa;EACxB,CAAC;EACD5C,SAAS,CAACmD,gBAAgB,GAAG,UAAUlD,GAAG,EAAE;IACxC,IAAIwC,KAAK,GAAGC,MAAM,CAAC,0BAA0B,CAAC;IAC9C,IAAIC,KAAK,GAAG1C,GAAG,CAAC0C,KAAK,CAACF,KAAK,CAAC;IAC5B,IAAI,CAACE,KAAK,EAAE;MACR,MAAMhD,wBAAwB,CAAC0B,mBAAmB,CAAC,oBAAoB,GAAGpB,GAAG,CAAC;IAClF;IACA,OAAO0C,KAAK,CAAC,CAAC,CAAC;EACnB,CAAC;EACD3C,SAAS,CAACoD,cAAc,GAAG,UAAUC,WAAW,EAAEC,OAAO,EAAE;IACvD,IAAID,WAAW,CAAC,CAAC,CAAC,KAAKtD,SAAS,CAACwD,aAAa,EAAE;MAC5C,IAAItD,GAAG,GAAG,IAAID,SAAS,CAACsD,OAAO,CAAC;MAChC,IAAIE,cAAc,GAAGvD,GAAG,CAACkB,gBAAgB,EAAE;MAC3C,OAAOqC,cAAc,CAAC/B,QAAQ,GAAG,IAAI,GAAG+B,cAAc,CAAClC,eAAe,GAAG+B,WAAW;IACxF;IACA,OAAOA,WAAW;EACtB,CAAC;EACD;AACJ;AACA;AACA;EACIrD,SAAS,CAACwC,SAAS,GAAG,UAAUiB,UAAU,EAAE;IACxC,IAAIC,UAAU,GAAGD,UAAU,CAAC5B,OAAO,CAAC,GAAG,CAAC;IACxC,IAAI8B,UAAU,GAAGF,UAAU,CAAC5B,OAAO,CAAC,IAAI,CAAC;IACzC,IAAI8B,UAAU,GAAG,CAAC,CAAC,EAAE;MACjB,OAAOF,UAAU,CAACP,SAAS,CAACS,UAAU,GAAG,CAAC,CAAC;IAC/C,CAAC,MACI,IAAID,UAAU,GAAG,CAAC,CAAC,EAAE;MACtB,OAAOD,UAAU,CAACP,SAAS,CAACQ,UAAU,GAAG,CAAC,CAAC;IAC/C;IACA,OAAO3D,SAAS,CAAC6D,YAAY;EACjC,CAAC;EACD;AACJ;AACA;AACA;EACI5D,SAAS,CAAC6D,gBAAgB,GAAG,UAAUjC,WAAW,EAAE;IAChD,IAAIkC,WAAW,GAAGlC,WAAW,CAACC,OAAO,CAAC,GAAG,CAAC;IAC1C,IAAIkC,WAAW,GAAGnC,WAAW,CAACC,OAAO,CAAC,IAAI,CAAC;IAC3C,IAAIkC,WAAW,GAAG,CAAC,CAAC,EAAE;MAClB,OAAOnC,WAAW,CAACsB,SAAS,CAACa,WAAW,GAAG,CAAC,CAAC;IACjD,CAAC,MACI,IAAID,WAAW,GAAG,CAAC,CAAC,EAAE;MACvB,OAAOlC,WAAW,CAACsB,SAAS,CAACY,WAAW,GAAG,CAAC,CAAC;IACjD;IACA,OAAO/D,SAAS,CAAC6D,YAAY;EACjC,CAAC;EACD5D,SAAS,CAACuC,+BAA+B,GAAG,UAAUL,SAAS,EAAE;IAC7D,OAAO,IAAIlC,SAAS,CAACkC,SAAS,CAACT,QAAQ,GAAG,IAAI,GAAGS,SAAS,CAACZ,eAAe,GAAG,GAAG,GAAGY,SAAS,CAACX,YAAY,CAACyC,IAAI,CAAC,GAAG,CAAC,CAAC;EACxH,CAAC;EACD;AACJ;AACA;EACIhE,SAAS,CAACiE,mBAAmB,GAAG,UAAUC,IAAI,EAAE;IAC5C;IACA,IAAIrE,WAAW,CAACM,OAAO,CAAC+D,IAAI,CAAC,EAAE;MAC3B,OAAO,CAAC,CAAC;IACb;IACA;IACA,IAAIC,UAAU,GAAGnE,SAAS,CAACwC,SAAS,CAAC0B,IAAI,CAAC;IAC1C;IACA,IAAIE,gBAAgB,GAAGvE,WAAW,CAACwE,mBAAmB,CAACxE,WAAW,CAACM,OAAO,CAACgE,UAAU,CAAC,GAAGD,IAAI,GAAGC,UAAU,CAAC;IAC3G;IACA,IAAI,CAACC,gBAAgB,EAAE;MACnB,MAAMxE,eAAe,CAAC0E,8BAA8B,CAACC,IAAI,CAACC,SAAS,CAACJ,gBAAgB,CAAC,CAAC;IAC1F;IACA,OAAOA,gBAAgB;EAC3B,CAAC;EACD;AACJ;AACA;EACIpE,SAAS,CAACyE,0BAA0B,GAAG,UAAUC,KAAK,EAAE;IACpD;IACA,IAAI7E,WAAW,CAACM,OAAO,CAACuE,KAAK,CAAC,EAAE;MAC5B,OAAO,CAAC,CAAC;IACb;IACA;IACA,IAAIC,iBAAiB,GAAG3E,SAAS,CAAC6D,gBAAgB,CAACa,KAAK,CAAC;IACzD;IACA,IAAIE,uBAAuB,GAAG/E,WAAW,CAACwE,mBAAmB,CAACxE,WAAW,CAACM,OAAO,CAACwE,iBAAiB,CAAC,GAAGD,KAAK,GAAGC,iBAAiB,CAAC;IACjI;IACA,IAAI,CAACC,uBAAuB,EAAE;MAC1B,MAAMhF,eAAe,CAAC0E,8BAA8B,CAACC,IAAI,CAACC,SAAS,CAACI,uBAAuB,CAAC,CAAC;IACjG;IACA,OAAOA,uBAAuB;EAClC,CAAC;EACD;AACJ;AACA;EACI5E,SAAS,CAAC6E,2BAA2B,GAAG,UAAUX,IAAI,EAAE;IACpD,IAAIrE,WAAW,CAACM,OAAO,CAAC+D,IAAI,CAAC,IAAIA,IAAI,CAACrC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MACpD;MACA,OAAO,KAAK;IAChB;IACA,IAAIiD,UAAU,GAAG9E,SAAS,CAACiE,mBAAmB,CAACC,IAAI,CAAC;IACpD,OAAO,CAAC,EAAEY,UAAU,CAACC,IAAI,IACrBD,UAAU,CAACE,iBAAiB,IAC5BF,UAAU,CAACG,KAAK,IAChBH,UAAU,CAACI,KAAK,CAAC;EACzB,CAAC;EACD,OAAOlF,SAAS;AACpB,CAAC,EAAG;AAEJ,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}