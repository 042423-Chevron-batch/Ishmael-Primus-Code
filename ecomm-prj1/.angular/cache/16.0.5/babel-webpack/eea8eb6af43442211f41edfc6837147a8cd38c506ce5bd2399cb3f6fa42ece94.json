{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants\";\nimport { getUserAgentValue } from \"../util/userAgent\";\nimport { logger } from \"../log\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n  const userAgent = getUserAgentValue(options.userAgentPrefix);\n  const tracingClient = tryCreateTracingClient();\n  return {\n    name: tracingPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        var _a, _b;\n        if (!tracingClient || !((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n          return next(request);\n        }\n        const {\n          span,\n          tracingContext\n        } = (_b = tryCreateSpan(tracingClient, request, userAgent)) !== null && _b !== void 0 ? _b : {};\n        if (!span || !tracingContext) {\n          return next(request);\n        }\n        try {\n          const response = yield tracingClient.withContext(tracingContext, next, request);\n          tryProcessResponse(span, response);\n          return response;\n        } catch (err) {\n          tryProcessError(span, err);\n          throw err;\n        }\n      })();\n    }\n  };\n}\nfunction tryCreateTracingClient() {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION\n    });\n  } catch (e) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryCreateSpan(tracingClient, request, userAgent) {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const {\n      span,\n      updatedOptions\n    } = tracingClient.startSpan(`HTTP ${request.method}`, {\n      tracingOptions: request.tracingOptions\n    }, {\n      spanKind: \"client\",\n      spanAttributes: {\n        \"http.method\": request.method,\n        \"http.url\": request.url,\n        requestId: request.requestId\n      }\n    });\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n    if (userAgent) {\n      span.setAttribute(\"http.user_agent\", userAgent);\n    }\n    // set headers\n    const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return {\n      span,\n      tracingContext: updatedOptions.tracingOptions.tracingContext\n    };\n  } catch (e) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\nfunction tryProcessError(span, error) {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\nfunction tryProcessResponse(span, response) {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    span.setStatus({\n      status: \"success\"\n    });\n    span.end();\n  } catch (e) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}","map":{"version":3,"names":["createTracingClient","SDK_VERSION","getUserAgentValue","logger","getErrorMessage","isError","isRestError","tracingPolicyName","tracingPolicy","options","userAgent","userAgentPrefix","tracingClient","tryCreateTracingClient","name","sendRequest","request","next","_asyncToGenerator","_a","_b","tracingOptions","tracingContext","span","tryCreateSpan","response","withContext","tryProcessResponse","err","tryProcessError","namespace","packageName","packageVersion","e","warning","undefined","updatedOptions","startSpan","method","spanKind","spanAttributes","url","requestId","isRecording","end","setAttribute","headers","createRequestHeaders","key","value","Object","entries","set","error","setStatus","status","statusCode","serviceRequestId","get"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/tracingPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingClient, } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants\";\nimport { getUserAgentValue } from \"../util/userAgent\";\nimport { logger } from \"../log\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError\";\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options = {}) {\n    const userAgent = getUserAgentValue(options.userAgentPrefix);\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            if (!tracingClient || !((_a = request.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext)) {\n                return next(request);\n            }\n            const { span, tracingContext } = (_b = tryCreateSpan(tracingClient, request, userAgent)) !== null && _b !== void 0 ? _b : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return createTracingClient({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: SDK_VERSION,\n        });\n    }\n    catch (e) {\n        logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, userAgent) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes: {\n                \"http.method\": request.method,\n                \"http.url\": request.url,\n                requestId: request.requestId,\n            },\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        if (userAgent) {\n            span.setAttribute(\"http.user_agent\", userAgent);\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: isError(error) ? error : undefined,\n        });\n        if (isRestError(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        span.setStatus({\n            status: \"success\",\n        });\n        span.end();\n    }\n    catch (e) {\n        logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n    }\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,mBAAmB,QAAS,qBAAqB;AAC1D,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,iBAAiB,QAAQ,mBAAmB;AACrD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,eAAe,EAAEC,OAAO,QAAQ,kBAAkB;AAC3D,SAASC,WAAW,QAAQ,cAAc;AAC1C;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACxC,MAAMC,SAAS,GAAGR,iBAAiB,CAACO,OAAO,CAACE,eAAe,CAAC;EAC5D,MAAMC,aAAa,GAAGC,sBAAsB,EAAE;EAC9C,OAAO;IACHC,IAAI,EAAEP,iBAAiB;IACjBQ,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;MAAA,OAAAC,iBAAA;QAC7B,IAAIC,EAAE,EAAEC,EAAE;QACV,IAAI,CAACR,aAAa,IAAI,EAAE,CAACO,EAAE,GAAGH,OAAO,CAACK,cAAc,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,cAAc,CAAC,EAAE;UAC3G,OAAOL,IAAI,CAACD,OAAO,CAAC;QACxB;QACA,MAAM;UAAEO,IAAI;UAAED;QAAe,CAAC,GAAG,CAACF,EAAE,GAAGI,aAAa,CAACZ,aAAa,EAAEI,OAAO,EAAEN,SAAS,CAAC,MAAM,IAAI,IAAIU,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;QAC5H,IAAI,CAACG,IAAI,IAAI,CAACD,cAAc,EAAE;UAC1B,OAAOL,IAAI,CAACD,OAAO,CAAC;QACxB;QACA,IAAI;UACA,MAAMS,QAAQ,SAASb,aAAa,CAACc,WAAW,CAACJ,cAAc,EAAEL,IAAI,EAAED,OAAO,CAAC;UAC/EW,kBAAkB,CAACJ,IAAI,EAAEE,QAAQ,CAAC;UAClC,OAAOA,QAAQ;QACnB,CAAC,CACD,OAAOG,GAAG,EAAE;UACRC,eAAe,CAACN,IAAI,EAAEK,GAAG,CAAC;UAC1B,MAAMA,GAAG;QACb;MAAC;IACL;EACJ,CAAC;AACL;AACA,SAASf,sBAAsBA,CAAA,EAAG;EAC9B,IAAI;IACA,OAAOb,mBAAmB,CAAC;MACvB8B,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,2BAA2B;MACxCC,cAAc,EAAE/B;IACpB,CAAC,CAAC;EACN,CAAC,CACD,OAAOgC,CAAC,EAAE;IACN9B,MAAM,CAAC+B,OAAO,CAAE,0CAAyC9B,eAAe,CAAC6B,CAAC,CAAE,EAAC,CAAC;IAC9E,OAAOE,SAAS;EACpB;AACJ;AACA,SAASX,aAAaA,CAACZ,aAAa,EAAEI,OAAO,EAAEN,SAAS,EAAE;EACtD,IAAI;IACA;IACA,MAAM;MAAEa,IAAI;MAAEa;IAAe,CAAC,GAAGxB,aAAa,CAACyB,SAAS,CAAE,QAAOrB,OAAO,CAACsB,MAAO,EAAC,EAAE;MAAEjB,cAAc,EAAEL,OAAO,CAACK;IAAe,CAAC,EAAE;MAC3HkB,QAAQ,EAAE,QAAQ;MAClBC,cAAc,EAAE;QACZ,aAAa,EAAExB,OAAO,CAACsB,MAAM;QAC7B,UAAU,EAAEtB,OAAO,CAACyB,GAAG;QACvBC,SAAS,EAAE1B,OAAO,CAAC0B;MACvB;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAACnB,IAAI,CAACoB,WAAW,EAAE,EAAE;MACrBpB,IAAI,CAACqB,GAAG,EAAE;MACV,OAAOT,SAAS;IACpB;IACA,IAAIzB,SAAS,EAAE;MACXa,IAAI,CAACsB,YAAY,CAAC,iBAAiB,EAAEnC,SAAS,CAAC;IACnD;IACA;IACA,MAAMoC,OAAO,GAAGlC,aAAa,CAACmC,oBAAoB,CAACX,cAAc,CAACf,cAAc,CAACC,cAAc,CAAC;IAChG,KAAK,MAAM,CAAC0B,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,OAAO,CAAC,EAAE;MAChD9B,OAAO,CAAC8B,OAAO,CAACM,GAAG,CAACJ,GAAG,EAAEC,KAAK,CAAC;IACnC;IACA,OAAO;MAAE1B,IAAI;MAAED,cAAc,EAAEc,cAAc,CAACf,cAAc,CAACC;IAAe,CAAC;EACjF,CAAC,CACD,OAAOW,CAAC,EAAE;IACN9B,MAAM,CAAC+B,OAAO,CAAE,qDAAoD9B,eAAe,CAAC6B,CAAC,CAAE,EAAC,CAAC;IACzF,OAAOE,SAAS;EACpB;AACJ;AACA,SAASN,eAAeA,CAACN,IAAI,EAAE8B,KAAK,EAAE;EAClC,IAAI;IACA9B,IAAI,CAAC+B,SAAS,CAAC;MACXC,MAAM,EAAE,OAAO;MACfF,KAAK,EAAEhD,OAAO,CAACgD,KAAK,CAAC,GAAGA,KAAK,GAAGlB;IACpC,CAAC,CAAC;IACF,IAAI7B,WAAW,CAAC+C,KAAK,CAAC,IAAIA,KAAK,CAACG,UAAU,EAAE;MACxCjC,IAAI,CAACsB,YAAY,CAAC,kBAAkB,EAAEQ,KAAK,CAACG,UAAU,CAAC;IAC3D;IACAjC,IAAI,CAACqB,GAAG,EAAE;EACd,CAAC,CACD,OAAOX,CAAC,EAAE;IACN9B,MAAM,CAAC+B,OAAO,CAAE,qDAAoD9B,eAAe,CAAC6B,CAAC,CAAE,EAAC,CAAC;EAC7F;AACJ;AACA,SAASN,kBAAkBA,CAACJ,IAAI,EAAEE,QAAQ,EAAE;EACxC,IAAI;IACAF,IAAI,CAACsB,YAAY,CAAC,kBAAkB,EAAEpB,QAAQ,CAAC8B,MAAM,CAAC;IACtD,MAAME,gBAAgB,GAAGhC,QAAQ,CAACqB,OAAO,CAACY,GAAG,CAAC,iBAAiB,CAAC;IAChE,IAAID,gBAAgB,EAAE;MAClBlC,IAAI,CAACsB,YAAY,CAAC,kBAAkB,EAAEY,gBAAgB,CAAC;IAC3D;IACAlC,IAAI,CAAC+B,SAAS,CAAC;MACXC,MAAM,EAAE;IACZ,CAAC,CAAC;IACFhC,IAAI,CAACqB,GAAG,EAAE;EACd,CAAC,CACD,OAAOX,CAAC,EAAE;IACN9B,MAAM,CAAC+B,OAAO,CAAE,qDAAoD9B,eAAe,CAAC6B,CAAC,CAAE,EAAC,CAAC;EAC7F;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}