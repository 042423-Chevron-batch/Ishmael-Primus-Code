{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 client credential grant\r\n */\nvar ClientCredentialClient = /** @class */function (_super) {\n  __extends(ClientCredentialClient, _super);\n  function ClientCredentialClient(configuration, appTokenProvider) {\n    var _this = _super.call(this, configuration) || this;\n    _this.appTokenProvider = appTokenProvider;\n    return _this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet(request.scopes || []);\n            if (!request.skipCache) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3 /*break*/, 4];\n            return [2 /*return*/, cachedAuthenticationResult];\n          case 4:\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 5:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2 /*return*/, null];\n            }\n            if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2 /*return*/, null];\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n          case 1:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   */\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: Constants.EMPTY_STRING,\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\n    };\n    var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.appTokenProvider) return [3 /*break*/, 2];\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            appTokenPropviderParameters = {\n              correlationId: request.correlationId,\n              tenantId: this.config.authOptions.authority.tenant,\n              scopes: request.scopes,\n              claims: request.claims\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.appTokenProvider(appTokenPropviderParameters)];\n          case 1:\n            appTokenProviderResult = _a.sent();\n            serverTokenResponse = {\n              access_token: appTokenProviderResult.accessToken,\n              expires_in: appTokenProviderResult.expiresInSeconds,\n              refresh_in: appTokenProviderResult.refreshInSeconds,\n              token_type: AuthenticationScheme.BEARER\n            };\n            return [3 /*break*/, 4];\n          case 2:\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n          case 3:\n            response = _a.sent();\n            serverTokenResponse = response.body;\n            _a.label = 4;\n          case 4:\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(serverTokenResponse);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\n          case 5:\n            tokenResponse = _a.sent();\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    // Use clientAssertion from request, fallback to client assertion in base configuration\n    var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n    if (clientAssertion) {\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return ClientCredentialClient;\n}(BaseClient);\nexport { ClientCredentialClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","RequestParameterBuilder","ScopeSet","Constants","CredentialType","GrantType","CacheOutcome","AuthenticationScheme","ResponseHandler","TimeUtils","StringUtils","ClientAuthError","UrlString","ClientCredentialClient","_super","configuration","appTokenProvider","_this","call","prototype","acquireToken","request","cachedAuthenticationResult","_a","label","scopeSet","scopes","skipCache","executeTokenRequest","authority","sent","getCachedAuthenticationResult","_b","cachedAccessToken","_c","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","NO_CACHED_ACCESS_TOKEN","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","accessTokenFilter","homeAccountId","EMPTY_STRING","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","createSearchScopes","asArray","accessTokens","cacheManager","getAccessTokensByFilter","length","createMultipleMatchingTokensInCacheError","serverTokenResponse","reqTimestamp","appTokenPropviderParameters","appTokenProviderResult","queryParametersString","endpoint","requestBody","headers","thumbprint","response","responseHandler","tokenResponse","logger","info","correlationId","tenantId","claims","nowSeconds","access_token","expires_in","expiresInSeconds","refresh_in","refreshInSeconds","token_type","BEARER","createTokenQueryParameters","appendQueryString","tokenEndpoint","createTokenRequestBody","createTokenRequestHeaders","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","body","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","parameterBuilder","addClientId","addScopes","addGrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","isEmptyObj","clientCapabilities","addClaims","createQueryString"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/client/ClientCredentialClient.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { Constants, CredentialType, GrantType, CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nvar ClientCredentialClient = /** @class */ (function (_super) {\r\n    __extends(ClientCredentialClient, _super);\r\n    function ClientCredentialClient(configuration, appTokenProvider) {\r\n        var _this = _super.call(this, configuration) || this;\r\n        _this.appTokenProvider = appTokenProvider;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAuthenticationResult;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.scopeSet = new ScopeSet(request.scopes || []);\r\n                        if (!request.skipCache) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2: return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\r\n                    case 3:\r\n                        cachedAuthenticationResult = _a.sent();\r\n                        if (!cachedAuthenticationResult) return [3 /*break*/, 4];\r\n                        return [2 /*return*/, cachedAuthenticationResult];\r\n                    case 4: return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\r\n                    case 5: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedAccessToken;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        cachedAccessToken = this.readAccessTokenFromCache();\r\n                        if (!cachedAccessToken) {\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\r\n                                account: null,\r\n                                idToken: null,\r\n                                accessToken: cachedAccessToken,\r\n                                refreshToken: null,\r\n                                appMetadata: null\r\n                            }, true, request)];\r\n                    case 1: return [2 /*return*/, _c.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Reads access token from the cache\r\n     */\r\n    ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\r\n        var accessTokenFilter = {\r\n            homeAccountId: Constants.EMPTY_STRING,\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: ScopeSet.createSearchScopes(this.scopeSet.asArray())\r\n        };\r\n        var accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        }\r\n        else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var serverTokenResponse, reqTimestamp, appTokenPropviderParameters, appTokenProviderResult, queryParametersString, endpoint, requestBody, headers, thumbprint, response, responseHandler, tokenResponse;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.appTokenProvider) return [3 /*break*/, 2];\r\n                        this.logger.info(\"Using appTokenProvider extensibility.\");\r\n                        appTokenPropviderParameters = {\r\n                            correlationId: request.correlationId,\r\n                            tenantId: this.config.authOptions.authority.tenant,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.appTokenProvider(appTokenPropviderParameters)];\r\n                    case 1:\r\n                        appTokenProviderResult = _a.sent();\r\n                        serverTokenResponse = {\r\n                            access_token: appTokenProviderResult.accessToken,\r\n                            expires_in: appTokenProviderResult.expiresInSeconds,\r\n                            refresh_in: appTokenProviderResult.refreshInSeconds,\r\n                            token_type: AuthenticationScheme.BEARER\r\n                        };\r\n                        return [3 /*break*/, 4];\r\n                    case 2:\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                        requestBody = this.createTokenRequestBody(request);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                    case 3:\r\n                        response = _a.sent();\r\n                        serverTokenResponse = response.body;\r\n                        _a.label = 4;\r\n                    case 4:\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        responseHandler.validateTokenResponse(serverTokenResponse);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request)];\r\n                    case 5:\r\n                        tokenResponse = _a.sent();\r\n                        return [2 /*return*/, tokenResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n        // Use clientAssertion from request, fallback to client assertion in base configuration\r\n        var clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\r\n        if (clientAssertion) {\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return ClientCredentialClient;\r\n}(BaseClient));\n\nexport { ClientCredentialClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}