{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\nvar AuthorizationCodeClient = /** @class */function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n  function AuthorizationCodeClient(configuration) {\n    var _this = _super.call(this, configuration) || this;\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\n          case 1:\n            queryString = _a.sent();\n            return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, requestId, responseHandler;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            if (!request || StringUtils.isEmpty(request.code)) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _b.sent();\n            requestId = (_a = response.headers) === null || _a === void 0 ? void 0 : _a[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId)];\n          case 2:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Deserialize hash fragment response parameters.\n    var hashUrlString = new UrlString(hashFragment);\n    // Deserialize hash fragment response parameters.\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    var queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            }\n            // Add scope array, parameter builder will add default scopes and dedupe\n            parameterBuilder.addScopes(request.scopes);\n            // add code: user set, not validated\n            parameterBuilder.addAuthorizationCode(request.code);\n            // Add library metadata\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            // add code_verifier if passed\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _b.label = 3;\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            ccsCred = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            }\n            // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            }\n            // Add hybrid spa parameters if not already provided\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_a = {}, _a[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _a));\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes);\n            // validate the redirectUri (to be a non null value)\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            // add response_mode. If not passed in it defaults to query.\n            parameterBuilder.addResponseMode(request.responseMode);\n            // add response_type = code\n            parameterBuilder.addResponseTypeCode();\n            // add library info parameters\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            // add client_info=1\n            parameterBuilder.addClientInfo();\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            }\n            // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n            if (!request.nativeBroker) return [3 /*break*/, 2];\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _a.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n  return AuthorizationCodeClient;\n}(BaseClient);\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","__spreadArrays","BaseClient","RequestParameterBuilder","Separators","AADServerParamKeys","AuthenticationScheme","GrantType","PromptValue","HeaderNames","ResponseHandler","StringUtils","ClientAuthError","UrlString","PopTokenGenerator","TimeUtils","buildClientInfo","buildClientInfoFromHomeAccountId","CcsCredentialType","ClientConfigurationError","RequestValidator","AuthorizationCodeClient","_super","configuration","_this","call","includeRedirectUri","prototype","getAuthCodeUrl","request","queryString","_a","label","createAuthCodeUrlQueryString","sent","appendQueryString","authority","authorizationEndpoint","acquireToken","authCodePayload","reqTimestamp","response","requestId","responseHandler","_b","logger","info","isEmpty","code","createTokenRequestCannotBeMadeError","nowSeconds","executeTokenRequest","headers","X_MS_REQUEST_ID","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","handleFragmentResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","getLogoutUri","logoutRequest","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","thumbprint","requestBody","queryParameters","ccsCredential","clientInfo","endpoint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","createTokenRequestBody","createTokenQueryParameters","credential","uid","CLIENT_INFO_SEPARATOR","utid","type","HOME_ACCOUNT_ID","e","verbose","createTokenRequestHeaders","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","clientAssertion","popTokenGenerator","reqCnfData","correlationId","ccsCred","addClientId","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","POP","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","enableSpaAuthorizationCode","RETURN_SPA_CODE","requestScopes","accountSid","accountLoginHintClaim","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","SELECT_ACCOUNT","sid","NONE","addSid","account","extractAccountSid","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","extraQueryParameters","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nvar AuthorizationCodeClient = /** @class */ (function (_super) {\r\n    __extends(AuthorizationCodeClient, _super);\r\n    function AuthorizationCodeClient(configuration) {\r\n        var _this = _super.call(this, configuration) || this;\r\n        // Flag to indicate if client is for hybrid spa auth code redemption\r\n        _this.includeRedirectUri = true;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\r\n                    case 1:\r\n                        queryString = _a.sent();\r\n                        return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var reqTimestamp, response, requestId, responseHandler;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.logger.info(\"in acquireToken call\");\r\n                        if (!request || StringUtils.isEmpty(request.code)) {\r\n                            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n                        }\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _b.sent();\r\n                        requestId = (_a = response.headers) === null || _a === void 0 ? void 0 : _a[HeaderNames.X_MS_REQUEST_ID];\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId)];\r\n                    case 2: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\r\n        // Handle responses.\r\n        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n        // Deserialize hash fragment response parameters.\r\n        var hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return __assign(__assign({}, serverParams), { \r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code });\r\n    };\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        var queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _a.sent();\r\n                        queryParameters = this.createTokenQueryParameters(request);\r\n                        ccsCredential = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCredential = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n                        endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\r\n            var _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        /*\r\n                         * For hybrid spa flow, there will be a code but no verifier\r\n                         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n                         */\r\n                        if (!this.includeRedirectUri) {\r\n                            // Just validate\r\n                            RequestValidator.validateRedirectUri(request.redirectUri);\r\n                        }\r\n                        else {\r\n                            // Validate and include redirect uri\r\n                            parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        }\r\n                        // Add scope array, parameter builder will add default scopes and dedupe\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        // add code: user set, not validated\r\n                        parameterBuilder.addAuthorizationCode(request.code);\r\n                        // Add library metadata\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        // add code_verifier if passed\r\n                        if (request.codeVerifier) {\r\n                            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n                        }\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        reqCnfData = _b.sent();\r\n                        // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n                        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n                            if (request.sshJwk) {\r\n                                parameterBuilder.addSshJwk(request.sshJwk);\r\n                            }\r\n                            else {\r\n                                throw ClientConfigurationError.createMissingSshJwkError();\r\n                            }\r\n                        }\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        ccsCred = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCred = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            ccsCred = request.ccsCredential;\r\n                        }\r\n                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n                            switch (ccsCred.type) {\r\n                                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        if (request.tokenBodyParameters) {\r\n                            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\r\n                        }\r\n                        // Add hybrid spa parameters if not already provided\r\n                        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\r\n                            parameterBuilder.addExtraQueryParameters((_a = {},\r\n                                _a[AADServerParamKeys.RETURN_SPA_CODE] = \"1\",\r\n                                _a));\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\r\n                        parameterBuilder.addScopes(requestScopes);\r\n                        // validate the redirectUri (to be a non null value)\r\n                        parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        // add response_mode. If not passed in it defaults to query.\r\n                        parameterBuilder.addResponseMode(request.responseMode);\r\n                        // add response_type = code\r\n                        parameterBuilder.addResponseTypeCode();\r\n                        // add library info parameters\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n                        // add client_info=1\r\n                        parameterBuilder.addClientInfo();\r\n                        if (request.codeChallenge && request.codeChallengeMethod) {\r\n                            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n                        }\r\n                        if (request.prompt) {\r\n                            parameterBuilder.addPrompt(request.prompt);\r\n                        }\r\n                        if (request.domainHint) {\r\n                            parameterBuilder.addDomainHint(request.domainHint);\r\n                        }\r\n                        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n                        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n                            // AAD will throw if prompt=select_account is passed with an account hint\r\n                            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                                // SessionID is only used in silent calls\r\n                                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                                parameterBuilder.addSid(request.sid);\r\n                            }\r\n                            else if (request.account) {\r\n                                accountSid = this.extractAccountSid(request.account);\r\n                                accountLoginHintClaim = this.extractLoginHint(request.account);\r\n                                // If login_hint claim is present, use it over sid/username\r\n                                if (accountLoginHintClaim) {\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                                    parameterBuilder.addLoginHint(accountLoginHintClaim);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                                else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                                    /*\r\n                                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                                     * SessionId is only used in silent calls\r\n                                     */\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                                    parameterBuilder.addSid(accountSid);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                                else if (request.loginHint) {\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                                    parameterBuilder.addLoginHint(request.loginHint);\r\n                                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                                }\r\n                                else if (request.account.username) {\r\n                                    // Fallback to account username if provided\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                                    parameterBuilder.addLoginHint(request.account.username);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (request.loginHint) {\r\n                                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                                parameterBuilder.addLoginHint(request.loginHint);\r\n                                parameterBuilder.addCcsUpn(request.loginHint);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n                        }\r\n                        if (request.nonce) {\r\n                            parameterBuilder.addNonce(request.nonce);\r\n                        }\r\n                        if (request.state) {\r\n                            parameterBuilder.addState(request.state);\r\n                        }\r\n                        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        if (request.extraQueryParameters) {\r\n                            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n                        }\r\n                        if (!request.nativeBroker) return [3 /*break*/, 2];\r\n                        // signal ests that this is a WAM call\r\n                        parameterBuilder.addNativeBroker();\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        reqCnfData = _a.sent();\r\n                        parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\r\n                        _a.label = 2;\r\n                    case 2: return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n        if (request.logoutHint) {\r\n            parameterBuilder.addLogoutHint(request.logoutHint);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\r\n        var _a;\r\n        return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\r\n    };\r\n    AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\r\n        var _a;\r\n        return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\r\n    };\r\n    return AuthorizationCodeClient;\r\n}(BaseClient));\n\nexport { AuthorizationCodeClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}