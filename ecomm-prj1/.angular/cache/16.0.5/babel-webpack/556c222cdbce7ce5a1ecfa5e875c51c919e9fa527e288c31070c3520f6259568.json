{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 Device code client\r\n */\nvar DeviceCodeClient = /** @class */function (_super) {\n  __extends(DeviceCodeClient, _super);\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getDeviceCode(request)];\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers,\n              proxyUrl: this.config.systemOptions.proxyUrl\n            })];\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2 /*return*/, {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError.createUserTimeoutReachedError();\n    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError.createDeviceCodeExpiredError();\n    }\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 8];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error)) return [3 /*break*/, 6];\n            if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\n            this.logger.info(\"Authorization pending. Continue polling.\");\n            return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\n          case 3:\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            // for any other error, throw\n            this.logger.info(\"Unexpected error in polling from the server\");\n            throw ServerError.createPostRequestFailed(response.body.error);\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2 /*return*/, response.body];\n          case 7:\n            return [3 /*break*/, 1];\n          case 8:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n    requestParameters.addThrottling();\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return requestParameters.createQueryString();\n  };\n  return DeviceCodeClient;\n}(BaseClient);\nexport { DeviceCodeClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","ClientAuthError","RequestParameterBuilder","GrantType","Constants","TimeUtils","ResponseHandler","StringUtils","ServerError","DeviceCodeClient","_super","configuration","call","prototype","acquireToken","request","deviceCodeResponse","reqTimestamp","response","responseHandler","_a","label","getDeviceCode","sent","deviceCodeCallback","nowSeconds","acquireTokenWithDeviceCode","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","authority","queryString","headers","thumbprint","createQueryString","createTokenRequestHeaders","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostRequestToDeviceCodeEndpoint","deviceCodeEndpoint","userCode","deviceCode","verificationUri","expiresIn","interval","message","_b","networkManager","sendPostRequest","body","proxyUrl","systemOptions","user_code","device_code","verification_uri","expires_in","parameterBuilder","addScopes","addClientId","isEmpty","clientCapabilities","length","addClaims","continuePolling","deviceCodeExpirationTime","userSpecifiedTimeout","userSpecifiedCancelFlag","error","createDeviceCodeCancelledError","createUserTimeoutReachedError","verbose","createDeviceCodeExpiredError","requestBody","pollingIntervalMilli","createTokenRequestBody","timeout","undefined","cancel","executePostToTokenEndpoint","tokenEndpoint","AUTHORIZATION_PENDING","info","delay","createPostRequestFailed","createDeviceCodeUnknownError","requestParameters","addGrantType","DEVICE_CODE_GRANT","addDeviceCode","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","isEmptyObj"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/client/DeviceCodeClient.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, Constants } from '../utils/Constants.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ServerError } from '../error/ServerError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nvar DeviceCodeClient = /** @class */ (function (_super) {\r\n    __extends(DeviceCodeClient, _super);\r\n    function DeviceCodeClient(configuration) {\r\n        return _super.call(this, configuration) || this;\r\n    }\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deviceCodeResponse, reqTimestamp, response, responseHandler;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getDeviceCode(request)];\r\n                    case 1:\r\n                        deviceCodeResponse = _a.sent();\r\n                        request.deviceCodeCallback(deviceCodeResponse);\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response);\r\n                        return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\r\n                    case 3: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    DeviceCodeClient.prototype.getDeviceCode = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString, headers, thumbprint;\r\n            return __generator(this, function (_a) {\r\n                queryString = this.createQueryString(request);\r\n                headers = this.createTokenRequestHeaders();\r\n                thumbprint = {\r\n                    clientId: this.config.authOptions.clientId,\r\n                    authority: request.authority,\r\n                    scopes: request.scopes,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\r\n                            body: queryString,\r\n                            headers: headers,\r\n                            proxyUrl: this.config.systemOptions.proxyUrl\r\n                        })];\r\n                    case 1:\r\n                        _a = (_b.sent()).body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\r\n                        return [2 /*return*/, {\r\n                                userCode: userCode,\r\n                                deviceCode: deviceCode,\r\n                                verificationUri: verificationUri,\r\n                                expiresIn: expiresIn,\r\n                                interval: interval,\r\n                                message: message\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    DeviceCodeClient.prototype.createQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        }\r\n        else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        }\r\n        else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\r\n            }\r\n            this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n                        headers = this.createTokenRequestHeaders();\r\n                        userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n                        deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n                        pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 8];\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        if (!(response.body && response.body.error)) return [3 /*break*/, 6];\r\n                        if (!(response.body.error === Constants.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\r\n                        this.logger.info(\"Authorization pending. Continue polling.\");\r\n                        return [4 /*yield*/, TimeUtils.delay(pollingIntervalMilli)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // for any other error, throw\r\n                        this.logger.info(\"Unexpected error in polling from the server\");\r\n                        throw ServerError.createPostRequestFailed(response.body.error);\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                        return [2 /*return*/, response.body];\r\n                    case 7: return [3 /*break*/, 1];\r\n                    case 8:\r\n                        /*\r\n                         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n                         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n                         */\r\n                        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n                        throw ClientAuthError.createDeviceCodeUnknownError();\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\r\n        var requestParameters = new RequestParameterBuilder();\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addApplicationTelemetry(this.config.telemetry.application);\r\n        requestParameters.addThrottling();\r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    };\r\n    return DeviceCodeClient;\r\n}(BaseClient));\n\nexport { DeviceCodeClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}