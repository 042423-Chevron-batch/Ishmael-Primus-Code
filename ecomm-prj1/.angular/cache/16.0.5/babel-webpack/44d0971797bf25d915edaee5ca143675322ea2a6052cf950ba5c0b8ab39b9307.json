{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { tracingClient } from \"../util/tracing\";\nconst logger = credentialLogger(\"ClientSecretCredential\");\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential {\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(tenantId, clientId, clientSecret, options) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes, options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return tracingClient.withSpan(`${_this.constructor.name}.getToken`, options, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (newOptions) {\n          const query = new URLSearchParams({\n            response_type: \"token\",\n            grant_type: \"client_credentials\",\n            client_id: _this.clientId,\n            client_secret: _this.clientSecret,\n            scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n          });\n          try {\n            const urlSuffix = getIdentityTokenEndpointSuffix(_this.tenantId);\n            const request = createPipelineRequest({\n              url: `${_this.identityClient.authorityHost}/${_this.tenantId}/${urlSuffix}`,\n              method: \"POST\",\n              body: query.toString(),\n              headers: createHttpHeaders({\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              }),\n              abortSignal: options && options.abortSignal,\n              tracingOptions: newOptions === null || newOptions === void 0 ? void 0 : newOptions.tracingOptions\n            });\n            const tokenResponse = yield _this.identityClient.sendTokenRequest(request);\n            logger.getToken.info(formatSuccess(scopes));\n            return tokenResponse && tokenResponse.accessToken || null;\n          } catch (err) {\n            logger.getToken.info(formatError(scopes, err));\n            throw err;\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n}","map":{"version":3,"names":["createHttpHeaders","createPipelineRequest","credentialLogger","formatError","formatSuccess","getIdentityTokenEndpointSuffix","IdentityClient","tracingClient","logger","ClientSecretCredential","constructor","tenantId","clientId","clientSecret","options","identityClient","getToken","scopes","_this","_asyncToGenerator","withSpan","name","_ref","newOptions","query","URLSearchParams","response_type","grant_type","client_id","client_secret","scope","join","urlSuffix","request","url","authorityHost","method","body","toString","headers","Accept","abortSignal","tracingOptions","tokenResponse","sendTokenRequest","info","accessToken","err","_x","apply","arguments"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/identity/dist-esm/src/credentials/clientSecretCredential.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { tracingClient } from \"../util/tracing\";\nconst logger = credentialLogger(\"ClientSecretCredential\");\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential {\n    /**\n     * Creates an instance of the ClientSecretCredential with the details\n     * needed to authenticate against Azure Active Directory with a client\n     * secret.\n     *\n     * @param tenantId - The Azure Active Directory tenant (directory) ID.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param clientSecret - A client secret that was generated for the App Registration.\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantId, clientId, clientSecret, options) {\n        this.identityClient = new IdentityClient(options);\n        this.tenantId = tenantId;\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if\n     * successful.  If authentication cannot be performed at this time, this method may\n     * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n     * containing failure details will be thrown.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options = {}) {\n        return tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions) => {\n            const query = new URLSearchParams({\n                response_type: \"token\",\n                grant_type: \"client_credentials\",\n                client_id: this.clientId,\n                client_secret: this.clientSecret,\n                scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n            });\n            try {\n                const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n                const request = createPipelineRequest({\n                    url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n                    method: \"POST\",\n                    body: query.toString(),\n                    headers: createHttpHeaders({\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/x-www-form-urlencoded\",\n                    }),\n                    abortSignal: options && options.abortSignal,\n                    tracingOptions: newOptions === null || newOptions === void 0 ? void 0 : newOptions.tracingOptions,\n                });\n                const tokenResponse = await this.identityClient.sendTokenRequest(request);\n                logger.getToken.info(formatSuccess(scopes));\n                return (tokenResponse && tokenResponse.accessToken) || null;\n            }\n            catch (err) {\n                logger.getToken.info(formatError(scopes, err));\n                throw err;\n            }\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}