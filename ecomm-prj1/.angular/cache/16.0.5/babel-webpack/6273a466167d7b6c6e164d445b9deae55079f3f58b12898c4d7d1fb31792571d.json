{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger } from \"@azure/logger\";\n/**\n * The AzureLogger used for all clients within the identity package\n */\nexport const logger = createClientLogger(\"identity\");\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nexport function processEnvVars(supportedEnvVars) {\n  return supportedEnvVars.reduce((acc, envVariable) => {\n    if (process.env[envVariable]) {\n      acc.assigned.push(envVariable);\n    } else {\n      acc.missing.push(envVariable);\n    }\n    return acc;\n  }, {\n    missing: [],\n    assigned: []\n  });\n}\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\nexport function logEnvVars(credentialName, supportedEnvVars) {\n  const {\n    assigned\n  } = processEnvVars(supportedEnvVars);\n  logger.info(`${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`);\n}\n/**\n * Formatting the success event on the credentials\n */\nexport function formatSuccess(scope) {\n  return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n/**\n * Formatting the success event on the credentials\n */\nexport function formatError(scope, error) {\n  let message = \"ERROR.\";\n  if (scope === null || scope === void 0 ? void 0 : scope.length) {\n    message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n  }\n  return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nexport function credentialLoggerInstance(title, parent, log = logger) {\n  const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n  function info(message) {\n    log.info(`${fullTitle} =>`, message);\n  }\n  function warning(message) {\n    log.warning(`${fullTitle} =>`, message);\n  }\n  return {\n    title,\n    fullTitle,\n    info,\n    warning\n  };\n}\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nexport function credentialLogger(title, log = logger) {\n  const credLogger = credentialLoggerInstance(title, undefined, log);\n  return Object.assign(Object.assign({}, credLogger), {\n    parent: log,\n    getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log)\n  });\n}","map":{"version":3,"names":["createClientLogger","logger","processEnvVars","supportedEnvVars","reduce","acc","envVariable","process","env","assigned","push","missing","logEnvVars","credentialName","info","join","formatSuccess","scope","Array","isArray","formatError","error","message","length","credentialLoggerInstance","title","parent","log","fullTitle","warning","credentialLogger","credLogger","undefined","Object","assign","getToken"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/identity/dist-esm/src/util/logging.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createClientLogger } from \"@azure/logger\";\n/**\n * The AzureLogger used for all clients within the identity package\n */\nexport const logger = createClientLogger(\"identity\");\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nexport function processEnvVars(supportedEnvVars) {\n    return supportedEnvVars.reduce((acc, envVariable) => {\n        if (process.env[envVariable]) {\n            acc.assigned.push(envVariable);\n        }\n        else {\n            acc.missing.push(envVariable);\n        }\n        return acc;\n    }, { missing: [], assigned: [] });\n}\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\nexport function logEnvVars(credentialName, supportedEnvVars) {\n    const { assigned } = processEnvVars(supportedEnvVars);\n    logger.info(`${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`);\n}\n/**\n * Formatting the success event on the credentials\n */\nexport function formatSuccess(scope) {\n    return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n/**\n * Formatting the success event on the credentials\n */\nexport function formatError(scope, error) {\n    let message = \"ERROR.\";\n    if (scope === null || scope === void 0 ? void 0 : scope.length) {\n        message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n    }\n    return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nexport function credentialLoggerInstance(title, parent, log = logger) {\n    const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n    function info(message) {\n        log.info(`${fullTitle} =>`, message);\n    }\n    function warning(message) {\n        log.warning(`${fullTitle} =>`, message);\n    }\n    return {\n        title,\n        fullTitle,\n        info,\n        warning,\n    };\n}\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nexport function credentialLogger(title, log = logger) {\n    const credLogger = credentialLoggerInstance(title, undefined, log);\n    return Object.assign(Object.assign({}, credLogger), { parent: log, getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log) });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}