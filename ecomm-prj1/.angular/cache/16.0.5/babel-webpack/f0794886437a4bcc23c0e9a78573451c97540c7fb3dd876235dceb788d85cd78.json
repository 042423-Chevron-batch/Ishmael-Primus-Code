{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _events = require(\"events\");\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\nvar _stream = require(\"stream\");\nvar _token = require(\"./token/token\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n};\n/**\n * @private\n */\n\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n\nconst rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\nconst textPointerAndTimestampBuffer = Buffer.from([\n// TextPointer length\n0x10,\n// TextPointer\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n// Timestamp\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\n\nclass RowTransform extends _stream.Transform {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.columnMetadataWritten = void 0;\n    this.bulkLoad = void 0;\n    this.mainOptions = void 0;\n    this.columns = void 0;\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n  /**\n   * @private\n   */\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n    this.push(rowTokenBuffer);\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\n      if (!this.bulkLoad.firstRowWritten) {\n        try {\n          value = c.type.validate(value, c.collation);\n        } catch (error) {\n          return callback(error);\n        }\n      }\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: value\n      };\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n        if (value == null) {\n          this.push(textPointerNullBuffer);\n          continue;\n        }\n        this.push(textPointerAndTimestampBuffer);\n      }\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n    process.nextTick(callback);\n  }\n  /**\n   * @private\n   */\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n}\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad, [\n *   { myInt: 7, myString: 'hello' },\n *   { myInt: 23, myString: 'world' }\n * ]);\n * ```\n */\n\nclass BulkLoad extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(table, collation, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false,\n    order = {}\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n    for (const [column, direction] of Object.entries(order)) {\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n    super();\n    this.error = void 0;\n    this.canceled = void 0;\n    this.executionStarted = void 0;\n    this.streamingMode = void 0;\n    this.table = void 0;\n    this.timeout = void 0;\n    this.options = void 0;\n    this.callback = void 0;\n    this.columns = void 0;\n    this.columnsByName = void 0;\n    this.firstRowWritten = void 0;\n    this.rowToPacketTransform = void 0;\n    this.bulkOptions = void 0;\n    this.connection = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.collation = void 0;\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.collation = collation;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable,\n      order\n    };\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable,\n      collation: this.collation\n    };\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n  /**\n   * @private\n   */\n\n  getOptionsSql() {\n    const addOptions = [];\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n    if (this.bulkOptions.order) {\n      const orderColumns = [];\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\n        orderColumns.push(`${column} ${direction}`);\n      }\n      if (orderColumns.length) {\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\n      }\n    }\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   * @private\n   */\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ', ';\n      }\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n    sql += '\\n)';\n    return sql;\n  }\n  /**\n   * @private\n   */\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n      let flags = FLAGS.updateableReadWrite;\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\n\n      if (c.type.hasTableName) {\n        tBuf.writeUsVarchar(this.table, 'ucs2');\n      } // ColName\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n    return tBuf.data;\n  }\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n  /**\n   * @private\n   */\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * @private\n   */\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n    this.canceled = true;\n    this.emit('cancel');\n  }\n}\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_events","require","_writableTrackingBuffer","_interopRequireDefault","_stream","_token","obj","__esModule","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","rowTokenBuffer","Buffer","from","TYPE","ROW","textPointerAndTimestampBuffer","textPointerNullBuffer","RowTransform","Transform","constructor","bulkLoad","writableObjectMode","columnMetadataWritten","mainOptions","columns","options","_transform","row","_encoding","callback","push","getColMetaData","i","length","c","Array","isArray","objName","firstRowWritten","type","validate","collation","error","parameter","scale","precision","name","generateParameterLength","chunk","generateParameterData","process","nextTick","_flush","createDoneToken","BulkLoad","EventEmitter","table","connectionOptions","checkConstraints","fireTriggers","keepNulls","lockTable","order","TypeError","column","direction","entries","canceled","executionStarted","streamingMode","timeout","columnsByName","rowToPacketTransform","bulkOptions","connection","rows","rst","rowCount","undefined","addColumn","output","Error","id","resolveLength","resolvePrecision","resolveScale","getOptionsSql","addOptions","orderColumns","join","getBulkInsertSql","sql","len","declaration","getTableCreationSql","tBuf","writeUInt8","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeBuffer","generateTypeInfo","hasTableName","writeUsVarchar","writeBVarchar","data","setTimeout","DONE","status","cancel","emit","_default","module"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/bulk-load.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = require(\"events\");\n\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\n\nvar _stream = require(\"stream\");\n\nvar _token = require(\"./token/token\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\n/**\n * @private\n */\n\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n\nconst rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\nconst textPointerAndTimestampBuffer = Buffer.from([// TextPointer length\n0x10, // TextPointer\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Timestamp\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\n\nclass RowTransform extends _stream.Transform {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.columnMetadataWritten = void 0;\n    this.bulkLoad = void 0;\n    this.mainOptions = void 0;\n    this.columns = void 0;\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n  /**\n   * @private\n   */\n\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    this.push(rowTokenBuffer);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\n\n      if (!this.bulkLoad.firstRowWritten) {\n        try {\n          value = c.type.validate(value, c.collation);\n        } catch (error) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: value\n      };\n\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n        if (value == null) {\n          this.push(textPointerNullBuffer);\n          continue;\n        }\n\n        this.push(textPointerAndTimestampBuffer);\n      }\n\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n  /**\n   * @private\n   */\n\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n\n}\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad, [\n *   { myInt: 7, myString: 'hello' },\n *   { myInt: 23, myString: 'world' }\n * ]);\n * ```\n */\n\n\nclass BulkLoad extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(table, collation, connectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false,\n    order = {}\n  }, callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n\n    for (const [column, direction] of Object.entries(order)) {\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n\n    super();\n    this.error = void 0;\n    this.canceled = void 0;\n    this.executionStarted = void 0;\n    this.streamingMode = void 0;\n    this.table = void 0;\n    this.timeout = void 0;\n    this.options = void 0;\n    this.callback = void 0;\n    this.columns = void 0;\n    this.columnsByName = void 0;\n    this.firstRowWritten = void 0;\n    this.rowToPacketTransform = void 0;\n    this.bulkOptions = void 0;\n    this.connection = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.collation = void 0;\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.collation = collation;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable,\n      order\n    };\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n\n\n  addColumn(name, type, {\n    output = false,\n    length,\n    precision,\n    scale,\n    objName = name,\n    nullable = true\n  }) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable,\n      collation: this.collation\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n  /**\n   * @private\n   */\n\n\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (this.bulkOptions.order) {\n      const orderColumns = [];\n\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\n        orderColumns.push(`${column} ${direction}`);\n      }\n\n      if (orderColumns.length) {\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\n      }\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ', ';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n\n    sql += '\\n)';\n    return sql;\n  }\n  /**\n   * @private\n   */\n\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n\n      let flags = FLAGS.updateableReadWrite;\n\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\n\n      if (c.type.hasTableName) {\n        tBuf.writeUsVarchar(this.table, 'ucs2');\n      } // ColName\n\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n  /**\n   * @private\n   */\n\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * @private\n   */\n\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n}\n\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}