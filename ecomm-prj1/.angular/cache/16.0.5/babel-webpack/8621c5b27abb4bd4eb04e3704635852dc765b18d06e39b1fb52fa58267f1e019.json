{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\nvar XhrClient = /** @class */function () {\n  function XhrClient() {}\n  /**\r\n   * XhrClient for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  XhrClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\n      });\n    });\n  };\n  /**\r\n   * XhrClient for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n  XhrClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\n      });\n    });\n  };\n  /**\r\n   * Helper for XhrClient requests.\r\n   * @param url\r\n   * @param method\r\n   * @param options\r\n   */\n  XhrClient.prototype.sendRequestAsync = function (url, method, options) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url, /* async: */true);\n      _this.setXhrHeaders(xhr, options);\n      xhr.onload = function () {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        }\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n          var networkResponse = {\n            headers: _this.getHeaderDict(xhr),\n            body: jsonResponse,\n            status: xhr.status\n          };\n          resolve(networkResponse);\n        } catch (e) {\n          reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n        }\n      };\n      xhr.onerror = function () {\n        if (window.navigator.onLine) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        } else {\n          reject(BrowserAuthError.createNoNetworkConnectivityError());\n        }\n      };\n      if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n        xhr.send(options.body);\n      } else if (method === HTTP_REQUEST_TYPE.GET) {\n        xhr.send();\n      } else {\n        throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n      }\n    });\n  };\n  /**\r\n   * Helper to set XHR headers for request.\r\n   * @param xhr\r\n   * @param options\r\n   */\n  XhrClient.prototype.setXhrHeaders = function (xhr, options) {\n    if (options && options.headers) {\n      var headers_1 = options.headers;\n      Object.keys(headers_1).forEach(function (key) {\n        xhr.setRequestHeader(key, headers_1[key]);\n      });\n    }\n  };\n  /**\r\n   * Gets a string map of the headers received in the response.\r\n   *\r\n   * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n   * @param xhr\r\n   */\n  XhrClient.prototype.getHeaderDict = function (xhr) {\n    var headerString = xhr.getAllResponseHeaders();\n    var headerArr = headerString.trim().split(/[\\r\\n]+/);\n    var headerDict = {};\n    headerArr.forEach(function (value) {\n      var parts = value.split(\": \");\n      var headerName = parts.shift();\n      var headerVal = parts.join(\": \");\n      if (headerName && headerVal) {\n        headerDict[headerName] = headerVal;\n      }\n    });\n    return headerDict;\n  };\n  return XhrClient;\n}();\nexport { XhrClient };","map":{"version":3,"names":["__awaiter","__generator","BrowserAuthError","HTTP_REQUEST_TYPE","XhrClient","prototype","sendGetRequestAsync","url","options","_a","sendRequestAsync","GET","sendPostRequestAsync","POST","method","_this","Promise","resolve","reject","xhr","XMLHttpRequest","open","setXhrHeaders","onload","status","createPostRequestFailedError","createGetRequestFailedError","jsonResponse","JSON","parse","responseText","networkResponse","headers","getHeaderDict","body","e","createFailedToParseNetworkResponseError","onerror","window","navigator","onLine","createNoNetworkConnectivityError","send","createHttpMethodNotImplementedError","headers_1","Object","keys","forEach","key","setRequestHeader","headerString","getAllResponseHeaders","headerArr","trim","split","headerDict","value","parts","headerName","shift","headerVal","join"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/network/XhrClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\r\nvar XhrClient = /** @class */ (function () {\r\n    function XhrClient() {\r\n    }\r\n    /**\r\n     * XhrClient for REST endpoints - Get request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */\r\n    XhrClient.prototype.sendGetRequestAsync = function (url, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * XhrClient for REST endpoints - Post request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */\r\n    XhrClient.prototype.sendPostRequestAsync = function (url, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper for XhrClient requests.\r\n     * @param url\r\n     * @param method\r\n     * @param options\r\n     */\r\n    XhrClient.prototype.sendRequestAsync = function (url, method, options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            _this.setXhrHeaders(xhr, options);\r\n            xhr.onload = function () {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                    else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                }\r\n                try {\r\n                    var jsonResponse = JSON.parse(xhr.responseText);\r\n                    var networkResponse = {\r\n                        headers: _this.getHeaderDict(xhr),\r\n                        body: jsonResponse,\r\n                        status: xhr.status\r\n                    };\r\n                    resolve(networkResponse);\r\n                }\r\n                catch (e) {\r\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\r\n                }\r\n            };\r\n            xhr.onerror = function () {\r\n                if (window.navigator.onLine) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                    else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\r\n                    }\r\n                }\r\n                else {\r\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\r\n                }\r\n            };\r\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\r\n                xhr.send(options.body);\r\n            }\r\n            else if (method === HTTP_REQUEST_TYPE.GET) {\r\n                xhr.send();\r\n            }\r\n            else {\r\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Helper to set XHR headers for request.\r\n     * @param xhr\r\n     * @param options\r\n     */\r\n    XhrClient.prototype.setXhrHeaders = function (xhr, options) {\r\n        if (options && options.headers) {\r\n            var headers_1 = options.headers;\r\n            Object.keys(headers_1).forEach(function (key) {\r\n                xhr.setRequestHeader(key, headers_1[key]);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Gets a string map of the headers received in the response.\r\n     *\r\n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n     * @param xhr\r\n     */\r\n    XhrClient.prototype.getHeaderDict = function (xhr) {\r\n        var headerString = xhr.getAllResponseHeaders();\r\n        var headerArr = headerString.trim().split(/[\\r\\n]+/);\r\n        var headerDict = {};\r\n        headerArr.forEach(function (value) {\r\n            var parts = value.split(\": \");\r\n            var headerName = parts.shift();\r\n            var headerVal = parts.join(\": \");\r\n            if (headerName && headerVal) {\r\n                headerDict[headerName] = headerVal;\r\n            }\r\n        });\r\n        return headerDict;\r\n    };\r\n    return XhrClient;\r\n}());\n\nexport { XhrClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}