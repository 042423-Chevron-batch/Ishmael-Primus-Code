{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n// Constant byte array length\nvar RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\nvar PkceGenerator = /** @class */function () {\n  function PkceGenerator(cryptoObj) {\n    this.base64Encode = new Base64Encode();\n    this.cryptoObj = cryptoObj;\n  }\n  /**\r\n   * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n   */\n  PkceGenerator.prototype.generateCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var codeVerifier, codeChallenge;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            codeVerifier = this.generateCodeVerifier();\n            return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];\n          case 1:\n            codeChallenge = _a.sent();\n            return [2 /*return*/, {\n              verifier: codeVerifier,\n              challenge: codeChallenge\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a random 32 byte buffer and returns the base64\r\n   * encoded string to be used as a PKCE Code Verifier\r\n   */\n  PkceGenerator.prototype.generateCodeVerifier = function () {\n    try {\n      // Generate random values as utf-8\n      var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n      this.cryptoObj.getRandomValues(buffer);\n      // encode verifier as base64\n      var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\n      return pkceCodeVerifierB64;\n    } catch (e) {\n      throw BrowserAuthError.createPkceNotGeneratedError(e);\n    }\n  };\n  /**\r\n   * Creates a base64 encoded PKCE Code Challenge string from the\r\n   * hash created from the PKCE Code Verifier supplied\r\n   */\n  PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pkceHashedCodeVerifier, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];\n          case 1:\n            pkceHashedCodeVerifier = _a.sent();\n            // encode hash as base64\n            return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];\n          case 2:\n            e_1 = _a.sent();\n            throw BrowserAuthError.createPkceNotGeneratedError(e_1);\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return PkceGenerator;\n}();\nexport { PkceGenerator };","map":{"version":3,"names":["__awaiter","__generator","BrowserAuthError","Base64Encode","RANDOM_BYTE_ARR_LENGTH","PkceGenerator","cryptoObj","base64Encode","prototype","generateCodes","codeVerifier","codeChallenge","_a","label","generateCodeVerifier","generateCodeChallengeFromVerifier","sent","verifier","challenge","buffer","Uint8Array","getRandomValues","pkceCodeVerifierB64","urlEncodeArr","e","createPkceNotGeneratedError","pkceCodeVerifier","pkceHashedCodeVerifier","e_1","trys","push","sha256Digest"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Constant byte array length\r\nvar RANDOM_BYTE_ARR_LENGTH = 32;\r\n/**\r\n * Class which exposes APIs to generate PKCE codes and code verifiers.\r\n */\r\nvar PkceGenerator = /** @class */ (function () {\r\n    function PkceGenerator(cryptoObj) {\r\n        this.base64Encode = new Base64Encode();\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n    /**\r\n     * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n     */\r\n    PkceGenerator.prototype.generateCodes = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var codeVerifier, codeChallenge;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        codeVerifier = this.generateCodeVerifier();\r\n                        return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];\r\n                    case 1:\r\n                        codeChallenge = _a.sent();\r\n                        return [2 /*return*/, {\r\n                                verifier: codeVerifier,\r\n                                challenge: codeChallenge\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a random 32 byte buffer and returns the base64\r\n     * encoded string to be used as a PKCE Code Verifier\r\n     */\r\n    PkceGenerator.prototype.generateCodeVerifier = function () {\r\n        try {\r\n            // Generate random values as utf-8\r\n            var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n            // encode verifier as base64\r\n            var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);\r\n            return pkceCodeVerifierB64;\r\n        }\r\n        catch (e) {\r\n            throw BrowserAuthError.createPkceNotGeneratedError(e);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a base64 encoded PKCE Code Challenge string from the\r\n     * hash created from the PKCE Code Verifier supplied\r\n     */\r\n    PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var pkceHashedCodeVerifier, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];\r\n                    case 1:\r\n                        pkceHashedCodeVerifier = _a.sent();\r\n                        // encode hash as base64\r\n                        return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        throw BrowserAuthError.createPkceNotGeneratedError(e_1);\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PkceGenerator;\r\n}());\n\nexport { PkceGenerator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}