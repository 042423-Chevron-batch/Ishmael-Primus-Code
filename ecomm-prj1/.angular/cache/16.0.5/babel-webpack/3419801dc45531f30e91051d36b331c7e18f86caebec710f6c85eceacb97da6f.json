{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RegionDiscovery = /** @class */function () {\n  function RegionDiscovery(networkInterface, performanceClient, correlationId) {\n    this.networkInterface = networkInterface;\n    this.performanceClient = performanceClient;\n    this.correlationId = correlationId;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3 /*break*/, 8];\n            options = RegionDiscovery.IMDS_OPTIONS;\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 6,, 7]);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\n          case 2:\n            localIMDSVersionResponse = _e.sent();\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            return [4 /*yield*/, this.getCurrentVersion(options)];\n          case 3:\n            currentIMDSVersion = _e.sent();\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2 /*return*/, null];\n            }\n            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n            return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\n          case 4:\n            currentIMDSVersionResponse = _e.sent();\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n            _e.label = 5;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            _e.sent();\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2 /*return*/, null];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _e.label = 9;\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n            return [2 /*return*/, autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n  RegionDiscovery.prototype.getCurrentVersion = function (options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\n          case 2:\n            response = _b.sent();\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2 /*return*/, response.body[\"newest-versions\"][0]];\n            }\n            return [2 /*return*/, null];\n          case 3:\n            _b.sent();\n            return [2 /*return*/, null];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Options for the IMDS endpoint request\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      Metadata: \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\nexport { RegionDiscovery };","map":{"version":3,"names":["__awaiter","__generator","RegionDiscoverySources","ResponseCodes","Constants","PerformanceEvents","RegionDiscovery","networkInterface","performanceClient","correlationId","prototype","detectRegion","environmentRegion","regionDiscoveryMetadata","_a","_b","_c","_d","autodetectedRegionName","options","localIMDSVersionResponse","currentIMDSVersion","currentIMDSVersionResponse","_e","label","addQueueMeasurement","RegionDiscoveryDetectRegion","IMDS_OPTIONS","trys","push","setPreQueueTime","RegionDiscoveryGetRegionFromIMDS","getRegionFromIMDS","IMDS_VERSION","sent","status","httpSuccess","body","region_source","IMDS","httpBadRequest","RegionDiscoveryGetCurrentVersion","getCurrentVersion","FAILED_AUTO_DETECTION","ENVIRONMENT_VARIABLE","version","sendGetRequestAsync","IMDS_ENDPOINT","IMDS_TIMEOUT","response","length","headers","Metadata"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/authority/RegionDiscovery.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants } from '../utils/Constants.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RegionDiscovery = /** @class */ (function () {\r\n    function RegionDiscovery(networkInterface, performanceClient, correlationId) {\r\n        this.networkInterface = networkInterface;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n                        autodetectedRegionName = environmentRegion;\r\n                        if (!!autodetectedRegionName) return [3 /*break*/, 8];\r\n                        options = RegionDiscovery.IMDS_OPTIONS;\r\n                        _e.label = 1;\r\n                    case 1:\r\n                        _e.trys.push([1, 6, , 7]);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];\r\n                    case 2:\r\n                        localIMDSVersionResponse = _e.sent();\r\n                        if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = localIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n                        return [4 /*yield*/, this.getCurrentVersion(options)];\r\n                    case 3:\r\n                        currentIMDSVersion = _e.sent();\r\n                        if (!currentIMDSVersion) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                        return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];\r\n                    case 4:\r\n                        currentIMDSVersionResponse = _e.sent();\r\n                        if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                            autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                        }\r\n                        _e.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        _e.sent();\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return [2 /*return*/, null];\r\n                    case 7: return [3 /*break*/, 9];\r\n                    case 8:\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n                        _e.label = 9;\r\n                    case 9:\r\n                        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n                        if (!autodetectedRegionName) {\r\n                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        }\r\n                        return [2 /*return*/, autodetectedRegionName || null];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_b) {\r\n                (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n                return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", options, Constants.IMDS_TIMEOUT)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    RegionDiscovery.prototype.getCurrentVersion = function (options) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + \"?format=json\", options)];\r\n                    case 2:\r\n                        response = _b.sent();\r\n                        // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n                        if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                            return [2 /*return*/, response.body[\"newest-versions\"][0]];\r\n                        }\r\n                        return [2 /*return*/, null];\r\n                    case 3:\r\n                        _b.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // Options for the IMDS endpoint request\r\n    RegionDiscovery.IMDS_OPTIONS = {\r\n        headers: {\r\n            Metadata: \"true\",\r\n        },\r\n    };\r\n    return RegionDiscovery;\r\n}());\n\nexport { RegionDiscovery };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}