{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debug from \"./debug\";\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n  }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level) {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n  }\n  azureLogLevel = level;\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n  return azureLogLevel;\n}\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace) {\n  const clientRootLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\")\n  };\n}\nfunction patchLogMethod(parent, child) {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\nfunction createLogger(parent, level) {\n  const logger = Object.assign(parent.extend(level), {\n    level\n  });\n  patchLogMethod(parent, logger);\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n  registeredLoggers.add(logger);\n  return logger;\n}\nfunction shouldEnable(logger) {\n  return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n  return AZURE_LOG_LEVELS.includes(logLevel);\n}","map":{"version":3,"names":["debug","registeredLoggers","Set","logLevelFromEnv","process","env","AZURE_LOG_LEVEL","undefined","azureLogLevel","AzureLogger","log","args","AZURE_LOG_LEVELS","isAzureLogLevel","setLogLevel","console","error","join","level","Error","enabledNamespaces","logger","shouldEnable","push","namespace","enable","getLogLevel","levelMap","verbose","info","warning","createClientLogger","clientRootLogger","extend","patchLogMethod","createLogger","parent","child","Object","assign","disable","add","Boolean","logLevel","includes"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/logger/dist-esm/src/index.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport debug from \"./debug\";\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n    debug.log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n    }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level) {\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n    }\n    azureLogLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n        if (shouldEnable(logger)) {\n            enabledNamespaces.push(logger.namespace);\n        }\n    }\n    debug.enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel() {\n    return azureLogLevel;\n}\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace) {\n    const clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\"),\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n        level,\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        const enabledNamespaces = debug.disable();\n        debug.enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}