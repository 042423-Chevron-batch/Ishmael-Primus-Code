{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\nvar AuthorizationCodeClient = /** @class */function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n  function AuthorizationCodeClient(configuration, performanceClient) {\n    var _this = _super.call(this, configuration, performanceClient) || this;\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n            return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\n          case 1:\n            queryString = _c.sent();\n            return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    var _a, _b, _c, _d, _e, _f;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, requestId, httpVerAuthority, responseHandler;\n      var _this = this;\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!request || !request.code) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in auth-code client\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _g.sent();\n            requestId = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_REQUEST_ID];\n            httpVerAuthority = (_e = response.headers) === null || _e === void 0 ? void 0 : _e[HeaderNames.X_MS_HTTP_VERSION];\n            if (httpVerAuthority) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerAuthority: httpVerAuthority\n              });\n            }\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\n            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Deserialize hash fragment response parameters.\n    var hashUrlString = new UrlString(hashFragment);\n    // Deserialize hash fragment response parameters.\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    var queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var queryParametersString, endpoint, requestBody, ccsCredential, clientInfo, headers, thumbprint;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n            queryParametersString = this.createTokenQueryParameters(request);\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _c.sent();\n            ccsCredential = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n      var _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            }\n            // Add scope array, parameter builder will add default scopes and dedupe\n            parameterBuilder.addScopes(request.scopes);\n            // add code: user set, not validated\n            parameterBuilder.addAuthorizationCode(request.code);\n            // Add library metadata\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            // add code_verifier if passed\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _d.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _d.label = 3;\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            ccsCred = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            }\n            // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            }\n            // Add hybrid spa parameters if not already provided\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_c = {}, _c[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _c));\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes);\n            // validate the redirectUri (to be a non null value)\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            // add response_mode. If not passed in it defaults to query.\n            parameterBuilder.addResponseMode(request.responseMode);\n            // add response_type = code\n            parameterBuilder.addResponseTypeCode();\n            // add library info parameters\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            // add client_info=1\n            parameterBuilder.addClientInfo();\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            }\n            // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n            if (!request.nativeBroker) return [3 /*break*/, 2];\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            _b.label = 2;\n          case 2:\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n  return AuthorizationCodeClient;\n}(BaseClient);\nexport { AuthorizationCodeClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","__spreadArrays","BaseClient","RequestParameterBuilder","Separators","AADServerParamKeys","AuthenticationScheme","GrantType","PromptValue","HeaderNames","ResponseHandler","StringUtils","ClientAuthError","UrlString","PopTokenGenerator","TimeUtils","buildClientInfo","buildClientInfoFromHomeAccountId","CcsCredentialType","ClientConfigurationError","RequestValidator","PerformanceEvents","AuthorizationCodeClient","_super","configuration","performanceClient","_this","call","includeRedirectUri","prototype","getAuthCodeUrl","request","_a","_b","queryString","_c","label","addQueueMeasurement","GetAuthCodeUrl","correlationId","setPreQueueTime","AuthClientCreateQueryString","createAuthCodeUrlQueryString","sent","appendQueryString","authority","authorizationEndpoint","acquireToken","authCodePayload","_d","_e","_f","atsMeasurement","reqTimestamp","response","requestId","httpVerAuthority","responseHandler","_g","code","createTokenRequestCannotBeMadeError","AuthClientAcquireToken","startMeasurement","logger","info","nowSeconds","AuthClientExecuteTokenRequest","executeTokenRequest","headers","X_MS_REQUEST_ID","X_MS_HTTP_VERSION","addStaticFields","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","HandleServerTokenResponse","handleServerTokenResponse","undefined","then","result","endMeasurement","success","catch","error","verbose","errorCode","subErrorCode","subError","handleFragmentResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","getLogoutUri","logoutRequest","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","queryParametersString","endpoint","requestBody","ccsCredential","clientInfo","thumbprint","AuthClientCreateTokenRequestBody","createTokenQueryParameters","tokenEndpoint","createTokenRequestBody","credential","uid","CLIENT_INFO_SEPARATOR","utid","type","HOME_ACCOUNT_ID","e","createTokenRequestHeaders","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","executePostToTokenEndpoint","parameterBuilder","clientAssertion","popTokenGenerator","reqCnfData","ccsCred","addClientId","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","POP","PopTokenGenerateCnf","generateCnf","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","addExtraQueryParameters","enableSpaAuthorizationCode","RETURN_SPA_CODE","createQueryString","requestScopes","accountSid","accountLoginHintClaim","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","SELECT_ACCOUNT","sid","NONE","addSid","account","extractAccountSid","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","isEmpty","extraQueryParameters","nativeBroker","addNativeBroker","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nvar AuthorizationCodeClient = /** @class */ (function (_super) {\r\n    __extends(AuthorizationCodeClient, _super);\r\n    function AuthorizationCodeClient(configuration, performanceClient) {\r\n        var _this = _super.call(this, configuration, performanceClient) || this;\r\n        // Flag to indicate if client is for hybrid spa auth code redemption\r\n        _this.includeRedirectUri = true;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryString;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\r\n                    case 1:\r\n                        queryString = _c.sent();\r\n                        return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var atsMeasurement, reqTimestamp, response, requestId, httpVerAuthority, responseHandler;\r\n            var _this = this;\r\n            return __generator(this, function (_g) {\r\n                switch (_g.label) {\r\n                    case 0:\r\n                        if (!request || !request.code) {\r\n                            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n                        }\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\r\n                        atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\r\n                        this.logger.info(\"in acquireToken call in auth-code client\");\r\n                        reqTimestamp = TimeUtils.nowSeconds();\r\n                        (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\r\n                    case 1:\r\n                        response = _g.sent();\r\n                        requestId = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_REQUEST_ID];\r\n                        httpVerAuthority = (_e = response.headers) === null || _e === void 0 ? void 0 : _e[HeaderNames.X_MS_HTTP_VERSION];\r\n                        if (httpVerAuthority) {\r\n                            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\r\n                                httpVerAuthority: httpVerAuthority\r\n                            });\r\n                        }\r\n                        responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\r\n                        // Validate response. This function throws a server error if an error is returned by the server.\r\n                        responseHandler.validateTokenResponse(response.body);\r\n                        (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);\r\n                        return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(function (result) {\r\n                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\r\n                                    success: true\r\n                                });\r\n                                return result;\r\n                            })\r\n                                .catch(function (error) {\r\n                                _this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\r\n                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\r\n                                    errorCode: error.errorCode,\r\n                                    subErrorCode: error.subError,\r\n                                    success: false\r\n                                });\r\n                                throw error;\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\r\n        // Handle responses.\r\n        var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n        // Deserialize hash fragment response parameters.\r\n        var hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return __assign(__assign({}, serverParams), { \r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code });\r\n    };\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        var queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    };\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var queryParametersString, endpoint, requestBody, ccsCredential, clientInfo, headers, thumbprint;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n                        queryParametersString = this.createTokenQueryParameters(request);\r\n                        endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n                        return [4 /*yield*/, this.createTokenRequestBody(request)];\r\n                    case 1:\r\n                        requestBody = _c.sent();\r\n                        ccsCredential = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCredential = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n                        thumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: authority.canonicalAuthority,\r\n                            scopes: request.scopes,\r\n                            claims: request.claims,\r\n                            authenticationScheme: request.authenticationScheme,\r\n                            resourceRequestMethod: request.resourceRequestMethod,\r\n                            resourceRequestUri: request.resourceRequestUri,\r\n                            shrClaims: request.shrClaims,\r\n                            sshKid: request.sshKid\r\n                        };\r\n                        return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\r\n            var _c;\r\n            return __generator(this, function (_d) {\r\n                switch (_d.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        /*\r\n                         * For hybrid spa flow, there will be a code but no verifier\r\n                         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n                         */\r\n                        if (!this.includeRedirectUri) {\r\n                            // Just validate\r\n                            RequestValidator.validateRedirectUri(request.redirectUri);\r\n                        }\r\n                        else {\r\n                            // Validate and include redirect uri\r\n                            parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        }\r\n                        // Add scope array, parameter builder will add default scopes and dedupe\r\n                        parameterBuilder.addScopes(request.scopes);\r\n                        // add code: user set, not validated\r\n                        parameterBuilder.addAuthorizationCode(request.code);\r\n                        // Add library metadata\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n                        parameterBuilder.addThrottling();\r\n                        if (this.serverTelemetryManager) {\r\n                            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n                        }\r\n                        // add code_verifier if passed\r\n                        if (request.codeVerifier) {\r\n                            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n                        }\r\n                        if (this.config.clientCredentials.clientSecret) {\r\n                            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n                        }\r\n                        if (this.config.clientCredentials.clientAssertion) {\r\n                            clientAssertion = this.config.clientCredentials.clientAssertion;\r\n                            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n                            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n                        }\r\n                        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n                        parameterBuilder.addClientInfo();\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n                        (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        reqCnfData = _d.sent();\r\n                        // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n                        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n                            if (request.sshJwk) {\r\n                                parameterBuilder.addSshJwk(request.sshJwk);\r\n                            }\r\n                            else {\r\n                                throw ClientConfigurationError.createMissingSshJwkError();\r\n                            }\r\n                        }\r\n                        _d.label = 3;\r\n                    case 3:\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        ccsCred = undefined;\r\n                        if (request.clientInfo) {\r\n                            try {\r\n                                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                                ccsCred = {\r\n                                    credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\r\n                                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                                };\r\n                            }\r\n                            catch (e) {\r\n                                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            ccsCred = request.ccsCredential;\r\n                        }\r\n                        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n                        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n                            switch (ccsCred.type) {\r\n                                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                                    }\r\n                                    break;\r\n                                case CcsCredentialType.UPN:\r\n                                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                                    break;\r\n                            }\r\n                        }\r\n                        if (request.tokenBodyParameters) {\r\n                            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\r\n                        }\r\n                        // Add hybrid spa parameters if not already provided\r\n                        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\r\n                            parameterBuilder.addExtraQueryParameters((_c = {},\r\n                                _c[AADServerParamKeys.RETURN_SPA_CODE] = \"1\",\r\n                                _c));\r\n                        }\r\n                        return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);\r\n                        parameterBuilder = new RequestParameterBuilder();\r\n                        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n                        requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\r\n                        parameterBuilder.addScopes(requestScopes);\r\n                        // validate the redirectUri (to be a non null value)\r\n                        parameterBuilder.addRedirectUri(request.redirectUri);\r\n                        correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n                        parameterBuilder.addCorrelationId(correlationId);\r\n                        // add response_mode. If not passed in it defaults to query.\r\n                        parameterBuilder.addResponseMode(request.responseMode);\r\n                        // add response_type = code\r\n                        parameterBuilder.addResponseTypeCode();\r\n                        // add library info parameters\r\n                        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n                        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n                        // add client_info=1\r\n                        parameterBuilder.addClientInfo();\r\n                        if (request.codeChallenge && request.codeChallengeMethod) {\r\n                            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n                        }\r\n                        if (request.prompt) {\r\n                            parameterBuilder.addPrompt(request.prompt);\r\n                        }\r\n                        if (request.domainHint) {\r\n                            parameterBuilder.addDomainHint(request.domainHint);\r\n                        }\r\n                        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n                        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n                            // AAD will throw if prompt=select_account is passed with an account hint\r\n                            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                                // SessionID is only used in silent calls\r\n                                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                                parameterBuilder.addSid(request.sid);\r\n                            }\r\n                            else if (request.account) {\r\n                                accountSid = this.extractAccountSid(request.account);\r\n                                accountLoginHintClaim = this.extractLoginHint(request.account);\r\n                                // If login_hint claim is present, use it over sid/username\r\n                                if (accountLoginHintClaim) {\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                                    parameterBuilder.addLoginHint(accountLoginHintClaim);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                                else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                                    /*\r\n                                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                                     * SessionId is only used in silent calls\r\n                                     */\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                                    parameterBuilder.addSid(accountSid);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                                else if (request.loginHint) {\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                                    parameterBuilder.addLoginHint(request.loginHint);\r\n                                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                                }\r\n                                else if (request.account.username) {\r\n                                    // Fallback to account username if provided\r\n                                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                                    parameterBuilder.addLoginHint(request.account.username);\r\n                                    try {\r\n                                        clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                                        parameterBuilder.addCcsOid(clientInfo);\r\n                                    }\r\n                                    catch (e) {\r\n                                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (request.loginHint) {\r\n                                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                                parameterBuilder.addLoginHint(request.loginHint);\r\n                                parameterBuilder.addCcsUpn(request.loginHint);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n                        }\r\n                        if (request.nonce) {\r\n                            parameterBuilder.addNonce(request.nonce);\r\n                        }\r\n                        if (request.state) {\r\n                            parameterBuilder.addState(request.state);\r\n                        }\r\n                        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n                            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n                        }\r\n                        if (request.extraQueryParameters) {\r\n                            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n                        }\r\n                        if (!request.nativeBroker) return [3 /*break*/, 2];\r\n                        // signal ests that this is a WAM call\r\n                        parameterBuilder.addNativeBroker();\r\n                        if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\r\n                        popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                        return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\r\n                    case 1:\r\n                        reqCnfData = _b.sent();\r\n                        parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n                        _b.label = 2;\r\n                    case 2: return [2 /*return*/, parameterBuilder.createQueryString()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n        if (request.logoutHint) {\r\n            parameterBuilder.addLogoutHint(request.logoutHint);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\r\n        var _a;\r\n        return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\r\n    };\r\n    AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\r\n        var _a;\r\n        return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\r\n    };\r\n    return AuthorizationCodeClient;\r\n}(BaseClient));\n\nexport { AuthorizationCodeClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}