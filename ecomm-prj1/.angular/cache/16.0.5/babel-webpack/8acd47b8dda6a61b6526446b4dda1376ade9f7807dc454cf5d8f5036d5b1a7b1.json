{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options = {}) {\n  var _a;\n  const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n  });\n  return {\n    name: logPolicyName,\n    sendRequest(request, next) {\n      return _asyncToGenerator(function* () {\n        if (!logger.enabled) {\n          return next(request);\n        }\n        logger(`Request: ${sanitizer.sanitize(request)}`);\n        const response = yield next(request);\n        logger(`Response status code: ${response.status}`);\n        logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n        return response;\n      })();\n    }\n  };\n}","map":{"version":3,"names":["logger","coreLogger","Sanitizer","logPolicyName","logPolicy","options","_a","info","sanitizer","additionalAllowedHeaderNames","additionalAllowedQueryParameters","name","sendRequest","request","next","_asyncToGenerator","enabled","sanitize","response","status","headers"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/logPolicy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options = {}) {\n    var _a;\n    const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n    const sanitizer = new Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger.enabled) {\n                return next(request);\n            }\n            logger(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger(`Response status code: ${response.status}`);\n            logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,MAAM,IAAIC,UAAU,QAAQ,QAAQ;AAC7C,SAASC,SAAS,QAAQ,mBAAmB;AAC7C;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,WAAW;AACxC;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACpC,IAAIC,EAAE;EACN,MAAMN,MAAM,GAAG,CAACM,EAAE,GAAGD,OAAO,CAACL,MAAM,MAAM,IAAI,IAAIM,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGL,UAAU,CAACM,IAAI;EACrF,MAAMC,SAAS,GAAG,IAAIN,SAAS,CAAC;IAC5BO,4BAA4B,EAAEJ,OAAO,CAACI,4BAA4B;IAClEC,gCAAgC,EAAEL,OAAO,CAACK;EAC9C,CAAC,CAAC;EACF,OAAO;IACHC,IAAI,EAAER,aAAa;IACbS,WAAWA,CAACC,OAAO,EAAEC,IAAI,EAAE;MAAA,OAAAC,iBAAA;QAC7B,IAAI,CAACf,MAAM,CAACgB,OAAO,EAAE;UACjB,OAAOF,IAAI,CAACD,OAAO,CAAC;QACxB;QACAb,MAAM,CAAE,YAAWQ,SAAS,CAACS,QAAQ,CAACJ,OAAO,CAAE,EAAC,CAAC;QACjD,MAAMK,QAAQ,SAASJ,IAAI,CAACD,OAAO,CAAC;QACpCb,MAAM,CAAE,yBAAwBkB,QAAQ,CAACC,MAAO,EAAC,CAAC;QAClDnB,MAAM,CAAE,YAAWQ,SAAS,CAACS,QAAQ,CAACC,QAAQ,CAACE,OAAO,CAAE,EAAC,CAAC;QAC1D,OAAOF,QAAQ;MAAC;IACpB;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}