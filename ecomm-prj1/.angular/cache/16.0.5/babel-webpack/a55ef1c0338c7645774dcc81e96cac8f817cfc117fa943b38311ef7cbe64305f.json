{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\n// RSA KeyGen Algorithm\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nvar S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nvar MODULUS_LENGTH = 2048;\n// Public Exponent\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\nvar BrowserCrypto = /** @class */function () {\n  function BrowserCrypto(logger, cryptoOptions) {\n    var _a, _b;\n    this.logger = logger;\n    this.cryptoOptions = cryptoOptions;\n    if (this.hasBrowserCrypto()) {\n      // Use standard modern web crypto if available\n      this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\n      this.subtleCrypto = new ModernBrowserCrypto();\n    } else if (this.hasIECrypto()) {\n      // For IE11, use msCrypto interface\n      this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\n      this.subtleCrypto = new MsBrowserCrypto();\n    } else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\n      // For other browsers, use MSR Crypto if found\n      this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\n      this.subtleCrypto = new MsrBrowserCrypto();\n    } else {\n      if (this.hasMsrCrypto()) {\n        this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\n      }\n      this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\n      throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\n    }\n    // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\n    if (this.subtleCrypto.initPrng) {\n      this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\n      if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\n        this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\n        throw BrowserConfigurationAuthError.createEntropyNotProvided();\n      }\n      this.logger.verbose(\"BrowserCrypto: Entropy provided\");\n      this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\n    }\n    this.keygenAlgorithmOptions = {\n      name: PKCS1_V15_KEYGEN_ALG,\n      hash: S256_HASH_ALG,\n      modulusLength: MODULUS_LENGTH,\n      publicExponent: PUBLIC_EXPONENT\n    };\n  }\n  /**\r\n   * Check whether IE crypto or other browser cryptography is available.\r\n   */\n  BrowserCrypto.prototype.hasIECrypto = function () {\n    return \"msCrypto\" in window;\n  };\n  /**\r\n   * Check whether browser crypto is available.\r\n   */\n  BrowserCrypto.prototype.hasBrowserCrypto = function () {\n    return \"crypto\" in window;\n  };\n  /**\r\n   * Check whether MSR crypto polyfill is available\r\n   */\n  BrowserCrypto.prototype.hasMsrCrypto = function () {\n    return \"msrCrypto\" in window;\n  };\n  /**\r\n   * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n   * @param dataString\r\n   */\n  BrowserCrypto.prototype.sha256Digest = function (dataString) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        data = BrowserStringUtils.stringToUtf8Arr(dataString);\n        // MSR Crypto wants object with name property, instead of string\n        return [2 /*return*/, this.subtleCrypto.digest({\n          name: S256_HASH_ALG\n        }, data)];\n      });\n    });\n  };\n  /**\r\n   * Populates buffer with cryptographically random values.\r\n   * @param dataBuffer\r\n   */\n  BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return this.subtleCrypto.getRandomValues(dataBuffer);\n  };\n  /**\r\n   * Generates a keypair based on current keygen algorithm config.\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Export key as Json Web Key (JWK)\r\n   * @param key\r\n   * @param format\r\n   */\n  BrowserCrypto.prototype.exportJwk = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.exportKey(key)];\n      });\n    });\n  };\n  /**\r\n   * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n   * @param key\r\n   * @param format\r\n   * @param extractable\r\n   * @param usages\r\n   */\n  BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\n      });\n    });\n  };\n  /**\r\n   * Signs given data with given key\r\n   * @param key\r\n   * @param data\r\n   */\n  BrowserCrypto.prototype.sign = function (key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\n      });\n    });\n  };\n  return BrowserCrypto;\n}();\nexport { BrowserCrypto };","map":{"version":3,"names":["__awaiter","__generator","BrowserStringUtils","BrowserAuthError","ModernBrowserCrypto","MsrBrowserCrypto","MsBrowserCrypto","BrowserConfigurationAuthError","PKCS1_V15_KEYGEN_ALG","S256_HASH_ALG","MODULUS_LENGTH","PUBLIC_EXPONENT","Uint8Array","BrowserCrypto","logger","cryptoOptions","_a","_b","hasBrowserCrypto","verbose","subtleCrypto","hasIECrypto","hasMsrCrypto","useMsrCrypto","info","error","createCryptoNotAvailableError","initPrng","entropy","createEntropyNotProvided","keygenAlgorithmOptions","name","hash","modulusLength","publicExponent","prototype","window","sha256Digest","dataString","data","stringToUtf8Arr","digest","getRandomValues","dataBuffer","generateKeyPair","extractable","usages","generateKey","exportJwk","key","exportKey","importJwk","importKey","sign"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { ModernBrowserCrypto } from './ModernBrowserCrypto.js';\nimport { MsrBrowserCrypto } from './MsrBrowserCrypto.js';\nimport { MsBrowserCrypto } from './MsBrowserCrypto.js';\nimport { BrowserConfigurationAuthError } from '../error/BrowserConfigurationAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */\r\n// RSA KeyGen Algorithm\r\nvar PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\r\n// SHA-256 hashing algorithm\r\nvar S256_HASH_ALG = \"SHA-256\";\r\n// MOD length for PoP tokens\r\nvar MODULUS_LENGTH = 2048;\r\n// Public Exponent\r\nvar PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);\r\n/**\r\n * This class implements functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */\r\nvar BrowserCrypto = /** @class */ (function () {\r\n    function BrowserCrypto(logger, cryptoOptions) {\r\n        var _a, _b;\r\n        this.logger = logger;\r\n        this.cryptoOptions = cryptoOptions;\r\n        if (this.hasBrowserCrypto()) {\r\n            // Use standard modern web crypto if available\r\n            this.logger.verbose(\"BrowserCrypto: modern crypto interface available\");\r\n            this.subtleCrypto = new ModernBrowserCrypto();\r\n        }\r\n        else if (this.hasIECrypto()) {\r\n            // For IE11, use msCrypto interface\r\n            this.logger.verbose(\"BrowserCrypto: MS crypto interface available\");\r\n            this.subtleCrypto = new MsBrowserCrypto();\r\n        }\r\n        else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {\r\n            // For other browsers, use MSR Crypto if found\r\n            this.logger.verbose(\"BrowserCrypto: MSR crypto interface available\");\r\n            this.subtleCrypto = new MsrBrowserCrypto();\r\n        }\r\n        else {\r\n            if (this.hasMsrCrypto()) {\r\n                this.logger.info(\"BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled\");\r\n            }\r\n            this.logger.error(\"BrowserCrypto: No crypto interfaces available.\");\r\n            throw BrowserAuthError.createCryptoNotAvailableError(\"Browser crypto, msCrypto, or msrCrypto interfaces not available.\");\r\n        }\r\n        // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng\r\n        if (this.subtleCrypto.initPrng) {\r\n            this.logger.verbose(\"BrowserCrypto: Interface requires entropy\");\r\n            if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {\r\n                this.logger.error(\"BrowserCrypto: Interface requires entropy but none provided.\");\r\n                throw BrowserConfigurationAuthError.createEntropyNotProvided();\r\n            }\r\n            this.logger.verbose(\"BrowserCrypto: Entropy provided\");\r\n            this.subtleCrypto.initPrng(this.cryptoOptions.entropy);\r\n        }\r\n        this.keygenAlgorithmOptions = {\r\n            name: PKCS1_V15_KEYGEN_ALG,\r\n            hash: S256_HASH_ALG,\r\n            modulusLength: MODULUS_LENGTH,\r\n            publicExponent: PUBLIC_EXPONENT\r\n        };\r\n    }\r\n    /**\r\n     * Check whether IE crypto or other browser cryptography is available.\r\n     */\r\n    BrowserCrypto.prototype.hasIECrypto = function () {\r\n        return \"msCrypto\" in window;\r\n    };\r\n    /**\r\n     * Check whether browser crypto is available.\r\n     */\r\n    BrowserCrypto.prototype.hasBrowserCrypto = function () {\r\n        return \"crypto\" in window;\r\n    };\r\n    /**\r\n     * Check whether MSR crypto polyfill is available\r\n     */\r\n    BrowserCrypto.prototype.hasMsrCrypto = function () {\r\n        return \"msrCrypto\" in window;\r\n    };\r\n    /**\r\n     * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n     * @param dataString\r\n     */\r\n    BrowserCrypto.prototype.sha256Digest = function (dataString) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var data;\r\n            return __generator(this, function (_a) {\r\n                data = BrowserStringUtils.stringToUtf8Arr(dataString);\r\n                // MSR Crypto wants object with name property, instead of string\r\n                return [2 /*return*/, this.subtleCrypto.digest({ name: S256_HASH_ALG }, data)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Populates buffer with cryptographically random values.\r\n     * @param dataBuffer\r\n     */\r\n    BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\r\n        return this.subtleCrypto.getRandomValues(dataBuffer);\r\n    };\r\n    /**\r\n     * Generates a keypair based on current keygen algorithm config.\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Export key as Json Web Key (JWK)\r\n     * @param key\r\n     * @param format\r\n     */\r\n    BrowserCrypto.prototype.exportJwk = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.exportKey(key)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n     * @param key\r\n     * @param format\r\n     * @param extractable\r\n     * @param usages\r\n     */\r\n    BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Signs given data with given key\r\n     * @param key\r\n     * @param data\r\n     */\r\n    BrowserCrypto.prototype.sign = function (key, data) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];\r\n            });\r\n        });\r\n    };\r\n    return BrowserCrypto;\r\n}());\n\nexport { BrowserCrypto };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}