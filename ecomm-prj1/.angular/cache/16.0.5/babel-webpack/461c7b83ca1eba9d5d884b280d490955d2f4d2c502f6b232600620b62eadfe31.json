{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.instanceLookup = instanceLookup;\nexports.parseBrowserResponse = parseBrowserResponse;\nvar _dns = _interopRequireDefault(require(\"dns\"));\nvar _abortError = _interopRequireDefault(require(\"./errors/abort-error\"));\nvar _sender = require(\"./sender\");\nvar _withTimeout = require(\"./utils/with-timeout\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst SQL_SERVER_BROWSER_PORT = 1434;\nconst TIMEOUT = 2 * 1000;\nconst RETRIES = 3; // There are three bytes at the start of the response, whose purpose is unknown.\n\nconst MYSTERY_HEADER_LENGTH = 3;\n\n// Most of the functionality has been determined from from jTDS's MSSqlServerInfo class.\nfunction instanceLookup(_x) {\n  return _instanceLookup.apply(this, arguments);\n}\nfunction _instanceLookup() {\n  _instanceLookup = _asyncToGenerator(function* (options) {\n    const server = options.server;\n    if (typeof server !== 'string') {\n      throw new TypeError('Invalid arguments: \"server\" must be a string');\n    }\n    const instanceName = options.instanceName;\n    if (typeof instanceName !== 'string') {\n      throw new TypeError('Invalid arguments: \"instanceName\" must be a string');\n    }\n    const timeout = options.timeout === undefined ? TIMEOUT : options.timeout;\n    if (typeof timeout !== 'number') {\n      throw new TypeError('Invalid arguments: \"timeout\" must be a number');\n    }\n    const retries = options.retries === undefined ? RETRIES : options.retries;\n    if (typeof retries !== 'number') {\n      throw new TypeError('Invalid arguments: \"retries\" must be a number');\n    }\n    if (options.lookup !== undefined && typeof options.lookup !== 'function') {\n      throw new TypeError('Invalid arguments: \"lookup\" must be a function');\n    }\n    const lookup = options.lookup ?? _dns.default.lookup;\n    if (options.port !== undefined && typeof options.port !== 'number') {\n      throw new TypeError('Invalid arguments: \"port\" must be a number');\n    }\n    const port = options.port ?? SQL_SERVER_BROWSER_PORT;\n    const signal = options.signal;\n    if (signal.aborted) {\n      throw new _abortError.default();\n    }\n    let response;\n    for (let i = 0; i <= retries; i++) {\n      try {\n        response = yield (0, _withTimeout.withTimeout)(timeout, /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (signal) {\n            const request = Buffer.from([0x02]);\n            return yield (0, _sender.sendMessage)(options.server, port, lookup, signal, request);\n          });\n          return function (_x2) {\n            return _ref.apply(this, arguments);\n          };\n        }(), signal);\n      } catch (err) {\n        // If the current attempt timed out, continue with the next\n        if (!signal.aborted && err instanceof Error && err.name === 'TimeoutError') {\n          continue;\n        }\n        throw err;\n      }\n    }\n    if (!response) {\n      throw new Error('Failed to get response from SQL Server Browser on ' + server);\n    }\n    const message = response.toString('ascii', MYSTERY_HEADER_LENGTH);\n    const foundPort = parseBrowserResponse(message, instanceName);\n    if (!foundPort) {\n      throw new Error('Port for ' + instanceName + ' not found in ' + options.server);\n    }\n    return foundPort;\n  });\n  return _instanceLookup.apply(this, arguments);\n}\nfunction parseBrowserResponse(response, instanceName) {\n  let getPort;\n  const instances = response.split(';;');\n  for (let i = 0, len = instances.length; i < len; i++) {\n    const instance = instances[i];\n    const parts = instance.split(';');\n    for (let p = 0, partsLen = parts.length; p < partsLen; p += 2) {\n      const name = parts[p];\n      const value = parts[p + 1];\n      if (name === 'tcp' && getPort) {\n        const port = parseInt(value, 10);\n        return port;\n      }\n      if (name === 'InstanceName') {\n        if (value.toUpperCase() === instanceName.toUpperCase()) {\n          getPort = true;\n        } else {\n          getPort = false;\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","require","default","Object","defineProperty","exports","value","instanceLookup","parseBrowserResponse","_dns","_interopRequireDefault","_abortError","_sender","_withTimeout","obj","__esModule","SQL_SERVER_BROWSER_PORT","TIMEOUT","RETRIES","MYSTERY_HEADER_LENGTH","_x","_instanceLookup","apply","arguments","options","server","TypeError","instanceName","timeout","undefined","retries","lookup","port","signal","aborted","response","i","withTimeout","_ref","request","Buffer","from","sendMessage","_x2","err","Error","name","message","toString","foundPort","getPort","instances","split","len","length","instance","parts","p","partsLen","parseInt","toUpperCase"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/instance-lookup.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.instanceLookup = instanceLookup;\nexports.parseBrowserResponse = parseBrowserResponse;\n\nvar _dns = _interopRequireDefault(require(\"dns\"));\n\nvar _abortError = _interopRequireDefault(require(\"./errors/abort-error\"));\n\nvar _sender = require(\"./sender\");\n\nvar _withTimeout = require(\"./utils/with-timeout\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst SQL_SERVER_BROWSER_PORT = 1434;\nconst TIMEOUT = 2 * 1000;\nconst RETRIES = 3; // There are three bytes at the start of the response, whose purpose is unknown.\n\nconst MYSTERY_HEADER_LENGTH = 3;\n\n// Most of the functionality has been determined from from jTDS's MSSqlServerInfo class.\nasync function instanceLookup(options) {\n  const server = options.server;\n\n  if (typeof server !== 'string') {\n    throw new TypeError('Invalid arguments: \"server\" must be a string');\n  }\n\n  const instanceName = options.instanceName;\n\n  if (typeof instanceName !== 'string') {\n    throw new TypeError('Invalid arguments: \"instanceName\" must be a string');\n  }\n\n  const timeout = options.timeout === undefined ? TIMEOUT : options.timeout;\n\n  if (typeof timeout !== 'number') {\n    throw new TypeError('Invalid arguments: \"timeout\" must be a number');\n  }\n\n  const retries = options.retries === undefined ? RETRIES : options.retries;\n\n  if (typeof retries !== 'number') {\n    throw new TypeError('Invalid arguments: \"retries\" must be a number');\n  }\n\n  if (options.lookup !== undefined && typeof options.lookup !== 'function') {\n    throw new TypeError('Invalid arguments: \"lookup\" must be a function');\n  }\n\n  const lookup = options.lookup ?? _dns.default.lookup;\n\n  if (options.port !== undefined && typeof options.port !== 'number') {\n    throw new TypeError('Invalid arguments: \"port\" must be a number');\n  }\n\n  const port = options.port ?? SQL_SERVER_BROWSER_PORT;\n  const signal = options.signal;\n\n  if (signal.aborted) {\n    throw new _abortError.default();\n  }\n\n  let response;\n\n  for (let i = 0; i <= retries; i++) {\n    try {\n      response = await (0, _withTimeout.withTimeout)(timeout, async signal => {\n        const request = Buffer.from([0x02]);\n        return await (0, _sender.sendMessage)(options.server, port, lookup, signal, request);\n      }, signal);\n    } catch (err) {\n      // If the current attempt timed out, continue with the next\n      if (!signal.aborted && err instanceof Error && err.name === 'TimeoutError') {\n        continue;\n      }\n\n      throw err;\n    }\n  }\n\n  if (!response) {\n    throw new Error('Failed to get response from SQL Server Browser on ' + server);\n  }\n\n  const message = response.toString('ascii', MYSTERY_HEADER_LENGTH);\n  const foundPort = parseBrowserResponse(message, instanceName);\n\n  if (!foundPort) {\n    throw new Error('Port for ' + instanceName + ' not found in ' + options.server);\n  }\n\n  return foundPort;\n}\n\nfunction parseBrowserResponse(response, instanceName) {\n  let getPort;\n  const instances = response.split(';;');\n\n  for (let i = 0, len = instances.length; i < len; i++) {\n    const instance = instances[i];\n    const parts = instance.split(';');\n\n    for (let p = 0, partsLen = parts.length; p < partsLen; p += 2) {\n      const name = parts[p];\n      const value = parts[p + 1];\n\n      if (name === 'tcp' && getPort) {\n        const port = parseInt(value, 10);\n        return port;\n      }\n\n      if (name === 'InstanceName') {\n        if (value.toUpperCase() === instanceName.toUpperCase()) {\n          getPort = true;\n        } else {\n          getPort = false;\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}