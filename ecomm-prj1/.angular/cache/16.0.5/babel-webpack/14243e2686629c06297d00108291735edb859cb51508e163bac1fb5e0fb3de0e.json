{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _metadataParser = require(\"./metadata-parser\");\nvar _dataType = require(\"./data-type\");\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\nvar _sprintfJs = require(\"sprintf-js\");\nvar _guidParser = require(\"./guid-parser\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst THREE_AND_A_THIRD = 3 + 1 / 3;\nconst MONEY_DIVISOR = 10000;\nconst PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst DEFAULT_ENCODING = 'utf8';\nfunction readTinyInt(parser, callback) {\n  parser.readUInt8(callback);\n}\nfunction readSmallInt(parser, callback) {\n  parser.readInt16LE(callback);\n}\nfunction readInt(parser, callback) {\n  parser.readInt32LE(callback);\n}\nfunction readBigInt(parser, callback) {\n  parser.readBigInt64LE(value => {\n    callback(value.toString());\n  });\n}\nfunction readReal(parser, callback) {\n  parser.readFloatLE(callback);\n}\nfunction readFloat(parser, callback) {\n  parser.readDoubleLE(callback);\n}\nfunction readSmallMoney(parser, callback) {\n  parser.readInt32LE(value => {\n    callback(value / MONEY_DIVISOR);\n  });\n}\nfunction readMoney(parser, callback) {\n  parser.readInt32LE(high => {\n    parser.readUInt32LE(low => {\n      callback((low + 0x100000000 * high) / MONEY_DIVISOR);\n    });\n  });\n}\nfunction readBit(parser, callback) {\n  parser.readUInt8(value => {\n    callback(!!value);\n  });\n}\nfunction valueParse(parser, metadata, options, callback) {\n  const type = metadata.type;\n  switch (type.name) {\n    case 'Null':\n      return callback(null);\n    case 'TinyInt':\n      return readTinyInt(parser, callback);\n    case 'SmallInt':\n      return readSmallInt(parser, callback);\n    case 'Int':\n      return readInt(parser, callback);\n    case 'BigInt':\n      return readBigInt(parser, callback);\n    case 'IntN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 1:\n            return readTinyInt(parser, callback);\n          case 2:\n            return readSmallInt(parser, callback);\n          case 4:\n            return readInt(parser, callback);\n          case 8:\n            return readBigInt(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');\n        }\n      });\n    case 'Real':\n      return readReal(parser, callback);\n    case 'Float':\n      return readFloat(parser, callback);\n    case 'FloatN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 4:\n            return readReal(parser, callback);\n          case 8:\n            return readFloat(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');\n        }\n      });\n    case 'SmallMoney':\n      return readSmallMoney(parser, callback);\n    case 'Money':\n      return readMoney(parser, callback);\n    case 'MoneyN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 4:\n            return readSmallMoney(parser, callback);\n          case 8:\n            return readMoney(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');\n        }\n      });\n    case 'Bit':\n      return readBit(parser, callback);\n    case 'BitN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 1:\n            return readBit(parser, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');\n        }\n      });\n    case 'VarChar':\n    case 'Char':\n      const codepage = metadata.collation.codepage;\n      if (metadata.dataLength === MAX) {\n        return readMaxChars(parser, codepage, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n          readChars(parser, dataLength, codepage, callback);\n        });\n      }\n    case 'NVarChar':\n    case 'NChar':\n      if (metadata.dataLength === MAX) {\n        return readMaxNChars(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n          readNChars(parser, dataLength, callback);\n        });\n      }\n    case 'VarBinary':\n    case 'Binary':\n      if (metadata.dataLength === MAX) {\n        return readMaxBinary(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n          readBinary(parser, dataLength, callback);\n        });\n      }\n    case 'Text':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readChars(parser, dataLength, metadata.collation.codepage, callback);\n            });\n          });\n        });\n      });\n    case 'NText':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n    case 'Image':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readBinary(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n    case 'Xml':\n      return readMaxNChars(parser, callback);\n    case 'SmallDateTime':\n      return readSmallDateTime(parser, options.useUTC, callback);\n    case 'DateTime':\n      return readDateTime(parser, options.useUTC, callback);\n    case 'DateTimeN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 4:\n            return readSmallDateTime(parser, options.useUTC, callback);\n          case 8:\n            return readDateTime(parser, options.useUTC, callback);\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');\n        }\n      });\n    case 'Time':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readTime(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n    case 'Date':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDate(parser, options.useUTC, callback);\n        }\n      });\n    case 'DateTime2':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTime2(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n    case 'DateTimeOffset':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTimeOffset(parser, dataLength, metadata.scale, callback);\n        }\n      });\n    case 'NumericN':\n    case 'DecimalN':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readNumeric(parser, dataLength, metadata.precision, metadata.scale, callback);\n        }\n      });\n    case 'UniqueIdentifier':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n          case 0x10:\n            return readUniqueIdentifier(parser, options, callback);\n          default:\n            throw new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1));\n        }\n      });\n    case 'UDT':\n      return readMaxBinary(parser, callback);\n    case 'Variant':\n      return parser.readUInt32LE(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        }\n        readVariant(parser, options, dataLength, callback);\n      });\n    default:\n      throw new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name));\n  }\n}\nfunction readUniqueIdentifier(parser, options, callback) {\n  parser.readBuffer(0x10, data => {\n    callback(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data));\n  });\n}\nfunction readNumeric(parser, dataLength, _precision, scale, callback) {\n  parser.readUInt8(sign => {\n    sign = sign === 1 ? 1 : -1;\n    let readValue;\n    if (dataLength === 5) {\n      readValue = parser.readUInt32LE;\n    } else if (dataLength === 9) {\n      readValue = parser.readUNumeric64LE;\n    } else if (dataLength === 13) {\n      readValue = parser.readUNumeric96LE;\n    } else if (dataLength === 17) {\n      readValue = parser.readUNumeric128LE;\n    } else {\n      throw new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength));\n    }\n    readValue.call(parser, value => {\n      callback(value * sign / Math.pow(10, scale));\n    });\n  });\n}\nfunction readVariant(parser, options, dataLength, callback) {\n  return parser.readUInt8(baseType => {\n    const type = _dataType.TYPE[baseType];\n    return parser.readUInt8(propBytes => {\n      dataLength = dataLength - propBytes - 2;\n      switch (type.name) {\n        case 'UniqueIdentifier':\n          return readUniqueIdentifier(parser, options, callback);\n        case 'Bit':\n          return readBit(parser, callback);\n        case 'TinyInt':\n          return readTinyInt(parser, callback);\n        case 'SmallInt':\n          return readSmallInt(parser, callback);\n        case 'Int':\n          return readInt(parser, callback);\n        case 'BigInt':\n          return readBigInt(parser, callback);\n        case 'SmallDateTime':\n          return readSmallDateTime(parser, options.useUTC, callback);\n        case 'DateTime':\n          return readDateTime(parser, options.useUTC, callback);\n        case 'Real':\n          return readReal(parser, callback);\n        case 'Float':\n          return readFloat(parser, callback);\n        case 'SmallMoney':\n          return readSmallMoney(parser, callback);\n        case 'Money':\n          return readMoney(parser, callback);\n        case 'Date':\n          return readDate(parser, options.useUTC, callback);\n        case 'Time':\n          return parser.readUInt8(scale => {\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\n          });\n        case 'DateTime2':\n          return parser.readUInt8(scale => {\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\n          });\n        case 'DateTimeOffset':\n          return parser.readUInt8(scale => {\n            return readDateTimeOffset(parser, dataLength, scale, callback);\n          });\n        case 'VarBinary':\n        case 'Binary':\n          return parser.readUInt16LE(_maxLength => {\n            readBinary(parser, dataLength, callback);\n          });\n        case 'NumericN':\n        case 'DecimalN':\n          return parser.readUInt8(precision => {\n            parser.readUInt8(scale => {\n              readNumeric(parser, dataLength, precision, scale, callback);\n            });\n          });\n        case 'VarChar':\n        case 'Char':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, collation => {\n              readChars(parser, dataLength, collation.codepage, callback);\n            });\n          });\n        case 'NVarChar':\n        case 'NChar':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, _collation => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        default:\n          throw new Error('Invalid type!');\n      }\n    });\n  });\n}\nfunction readBinary(parser, dataLength, callback) {\n  return parser.readBuffer(dataLength, callback);\n}\nfunction readChars(parser, dataLength, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n  return parser.readBuffer(dataLength, data => {\n    callback(_iconvLite.default.decode(data, codepage));\n  });\n}\nfunction readNChars(parser, dataLength, callback) {\n  parser.readBuffer(dataLength, data => {\n    callback(data.toString('ucs2'));\n  });\n}\nfunction readMaxBinary(parser, callback) {\n  return readMax(parser, callback);\n}\nfunction readMaxChars(parser, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n  readMax(parser, data => {\n    if (data) {\n      callback(_iconvLite.default.decode(data, codepage));\n    } else {\n      callback(null);\n    }\n  });\n}\nfunction readMaxNChars(parser, callback) {\n  readMax(parser, data => {\n    if (data) {\n      callback(data.toString('ucs2'));\n    } else {\n      callback(null);\n    }\n  });\n}\nfunction readMax(parser, callback) {\n  parser.readBuffer(8, type => {\n    if (type.equals(PLP_NULL)) {\n      return callback(null);\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\n      return readMaxUnknownLength(parser, callback);\n    } else {\n      const low = type.readUInt32LE(0);\n      const high = type.readUInt32LE(4);\n      if (high >= 2 << 53 - 32) {\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\n      }\n      const expectedLength = low + 0x100000000 * high;\n      return readMaxKnownLength(parser, expectedLength, callback);\n    }\n  });\n}\nfunction readMaxKnownLength(parser, totalLength, callback) {\n  const data = Buffer.alloc(totalLength, 0);\n  let offset = 0;\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n      parser.readBuffer(chunkLength, chunk => {\n        chunk.copy(data, offset);\n        offset += chunkLength;\n        next(done);\n      });\n    });\n  }\n  next(() => {\n    if (offset !== totalLength) {\n      throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes');\n    }\n    callback(data);\n  });\n}\nfunction readMaxUnknownLength(parser, callback) {\n  const chunks = [];\n  let length = 0;\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n      parser.readBuffer(chunkLength, chunk => {\n        chunks.push(chunk);\n        length += chunkLength;\n        next(done);\n      });\n    });\n  }\n  next(() => {\n    callback(Buffer.concat(chunks, length));\n  });\n}\nfunction readSmallDateTime(parser, useUTC, callback) {\n  parser.readUInt16LE(days => {\n    parser.readUInt16LE(minutes => {\n      let value;\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, minutes);\n      }\n      callback(value);\n    });\n  });\n}\nfunction readDateTime(parser, useUTC, callback) {\n  parser.readInt32LE(days => {\n    parser.readUInt32LE(threeHundredthsOfSecond => {\n      const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n      let value;\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n      }\n      callback(value);\n    });\n  });\n}\nfunction readTime(parser, dataLength, scale, useUTC, callback) {\n  let readValue;\n  switch (dataLength) {\n    case 3:\n      readValue = parser.readUInt24LE;\n      break;\n    case 4:\n      readValue = parser.readUInt32LE;\n      break;\n    case 5:\n      readValue = parser.readUInt40LE;\n  }\n  readValue.call(parser, value => {\n    if (scale < 7) {\n      for (let i = scale; i < 7; i++) {\n        value *= 10;\n      }\n    }\n    let date;\n    if (useUTC) {\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));\n    } else {\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);\n    }\n    Object.defineProperty(date, 'nanosecondsDelta', {\n      enumerable: false,\n      value: value % 10000 / Math.pow(10, 7)\n    });\n    callback(date);\n  });\n}\nfunction readDate(parser, useUTC, callback) {\n  parser.readUInt24LE(days => {\n    if (useUTC) {\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\n    } else {\n      callback(new Date(2000, 0, days - 730118));\n    }\n  });\n}\nfunction readDateTime2(parser, dataLength, scale, useUTC, callback) {\n  readTime(parser, dataLength - 3, scale, useUTC, time => {\n    // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\n    parser.readUInt24LE(days => {\n      let date;\n      if (useUTC) {\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n      } else {\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n      }\n      Object.defineProperty(date, 'nanosecondsDelta', {\n        enumerable: false,\n        value: time.nanosecondsDelta\n      });\n      callback(date);\n    });\n  });\n}\nfunction readDateTimeOffset(parser, dataLength, scale, callback) {\n  readTime(parser, dataLength - 5, scale, true, time => {\n    parser.readUInt24LE(days => {\n      // offset\n      parser.readInt16LE(() => {\n        const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n        Object.defineProperty(date, 'nanosecondsDelta', {\n          enumerable: false,\n          value: time.nanosecondsDelta\n        });\n        callback(date);\n      });\n    });\n  });\n}\nvar _default = valueParse;\nexports.default = _default;\nmodule.exports = valueParse;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_metadataParser","require","_dataType","_iconvLite","_interopRequireDefault","_sprintfJs","_guidParser","obj","__esModule","NULL","MAX","THREE_AND_A_THIRD","MONEY_DIVISOR","PLP_NULL","Buffer","from","UNKNOWN_PLP_LEN","DEFAULT_ENCODING","readTinyInt","parser","callback","readUInt8","readSmallInt","readInt16LE","readInt","readInt32LE","readBigInt","readBigInt64LE","toString","readReal","readFloatLE","readFloat","readDoubleLE","readSmallMoney","readMoney","high","readUInt32LE","low","readBit","valueParse","metadata","options","type","name","dataLength","Error","codepage","collation","readMaxChars","readUInt16LE","readChars","readMaxNChars","readNChars","readMaxBinary","readBinary","textPointerLength","readBuffer","_textPointer","_timestamp","readSmallDateTime","useUTC","readDateTime","readTime","scale","readDate","readDateTime2","readDateTimeOffset","readNumeric","precision","readUniqueIdentifier","sprintf","readVariant","data","lowerCaseGuids","bufferToLowerCaseGuid","bufferToUpperCaseGuid","_precision","sign","readValue","readUNumeric64LE","readUNumeric96LE","readUNumeric128LE","call","Math","pow","baseType","TYPE","propBytes","_maxLength","readCollation","_collation","decode","readMax","equals","readMaxUnknownLength","console","warn","expectedLength","readMaxKnownLength","totalLength","alloc","offset","next","done","chunkLength","chunk","copy","chunks","length","push","concat","days","minutes","Date","UTC","threeHundredthsOfSecond","milliseconds","round","readUInt24LE","readUInt40LE","i","date","enumerable","time","getHours","getMinutes","getSeconds","getMilliseconds","nanosecondsDelta","_default","module"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/value-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _metadataParser = require(\"./metadata-parser\");\n\nvar _dataType = require(\"./data-type\");\n\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\n\nvar _sprintfJs = require(\"sprintf-js\");\n\nvar _guidParser = require(\"./guid-parser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst THREE_AND_A_THIRD = 3 + 1 / 3;\nconst MONEY_DIVISOR = 10000;\nconst PLP_NULL = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst UNKNOWN_PLP_LEN = Buffer.from([0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst DEFAULT_ENCODING = 'utf8';\n\nfunction readTinyInt(parser, callback) {\n  parser.readUInt8(callback);\n}\n\nfunction readSmallInt(parser, callback) {\n  parser.readInt16LE(callback);\n}\n\nfunction readInt(parser, callback) {\n  parser.readInt32LE(callback);\n}\n\nfunction readBigInt(parser, callback) {\n  parser.readBigInt64LE(value => {\n    callback(value.toString());\n  });\n}\n\nfunction readReal(parser, callback) {\n  parser.readFloatLE(callback);\n}\n\nfunction readFloat(parser, callback) {\n  parser.readDoubleLE(callback);\n}\n\nfunction readSmallMoney(parser, callback) {\n  parser.readInt32LE(value => {\n    callback(value / MONEY_DIVISOR);\n  });\n}\n\nfunction readMoney(parser, callback) {\n  parser.readInt32LE(high => {\n    parser.readUInt32LE(low => {\n      callback((low + 0x100000000 * high) / MONEY_DIVISOR);\n    });\n  });\n}\n\nfunction readBit(parser, callback) {\n  parser.readUInt8(value => {\n    callback(!!value);\n  });\n}\n\nfunction valueParse(parser, metadata, options, callback) {\n  const type = metadata.type;\n\n  switch (type.name) {\n    case 'Null':\n      return callback(null);\n\n    case 'TinyInt':\n      return readTinyInt(parser, callback);\n\n    case 'SmallInt':\n      return readSmallInt(parser, callback);\n\n    case 'Int':\n      return readInt(parser, callback);\n\n    case 'BigInt':\n      return readBigInt(parser, callback);\n\n    case 'IntN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readTinyInt(parser, callback);\n\n          case 2:\n            return readSmallInt(parser, callback);\n\n          case 4:\n            return readInt(parser, callback);\n\n          case 8:\n            return readBigInt(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');\n        }\n      });\n\n    case 'Real':\n      return readReal(parser, callback);\n\n    case 'Float':\n      return readFloat(parser, callback);\n\n    case 'FloatN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readReal(parser, callback);\n\n          case 8:\n            return readFloat(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');\n        }\n      });\n\n    case 'SmallMoney':\n      return readSmallMoney(parser, callback);\n\n    case 'Money':\n      return readMoney(parser, callback);\n\n    case 'MoneyN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallMoney(parser, callback);\n\n          case 8:\n            return readMoney(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');\n        }\n      });\n\n    case 'Bit':\n      return readBit(parser, callback);\n\n    case 'BitN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 1:\n            return readBit(parser, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');\n        }\n      });\n\n    case 'VarChar':\n    case 'Char':\n      const codepage = metadata.collation.codepage;\n\n      if (metadata.dataLength === MAX) {\n        return readMaxChars(parser, codepage, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readChars(parser, dataLength, codepage, callback);\n        });\n      }\n\n    case 'NVarChar':\n    case 'NChar':\n      if (metadata.dataLength === MAX) {\n        return readMaxNChars(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readNChars(parser, dataLength, callback);\n        });\n      }\n\n    case 'VarBinary':\n    case 'Binary':\n      if (metadata.dataLength === MAX) {\n        return readMaxBinary(parser, callback);\n      } else {\n        return parser.readUInt16LE(dataLength => {\n          if (dataLength === NULL) {\n            return callback(null);\n          }\n\n          readBinary(parser, dataLength, callback);\n        });\n      }\n\n    case 'Text':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readChars(parser, dataLength, metadata.collation.codepage, callback);\n            });\n          });\n        });\n      });\n\n    case 'NText':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Image':\n      return parser.readUInt8(textPointerLength => {\n        if (textPointerLength === 0) {\n          return callback(null);\n        }\n\n        parser.readBuffer(textPointerLength, _textPointer => {\n          parser.readBuffer(8, _timestamp => {\n            parser.readUInt32LE(dataLength => {\n              readBinary(parser, dataLength, callback);\n            });\n          });\n        });\n      });\n\n    case 'Xml':\n      return readMaxNChars(parser, callback);\n\n    case 'SmallDateTime':\n      return readSmallDateTime(parser, options.useUTC, callback);\n\n    case 'DateTime':\n      return readDateTime(parser, options.useUTC, callback);\n\n    case 'DateTimeN':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 4:\n            return readSmallDateTime(parser, options.useUTC, callback);\n\n          case 8:\n            return readDateTime(parser, options.useUTC, callback);\n\n          default:\n            throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');\n        }\n      });\n\n    case 'Time':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readTime(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'Date':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDate(parser, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTime2':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTime2(parser, dataLength, metadata.scale, options.useUTC, callback);\n        }\n      });\n\n    case 'DateTimeOffset':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readDateTimeOffset(parser, dataLength, metadata.scale, callback);\n        }\n      });\n\n    case 'NumericN':\n    case 'DecimalN':\n      return parser.readUInt8(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        } else {\n          return readNumeric(parser, dataLength, metadata.precision, metadata.scale, callback);\n        }\n      });\n\n    case 'UniqueIdentifier':\n      return parser.readUInt8(dataLength => {\n        switch (dataLength) {\n          case 0:\n            return callback(null);\n\n          case 0x10:\n            return readUniqueIdentifier(parser, options, callback);\n\n          default:\n            throw new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1));\n        }\n      });\n\n    case 'UDT':\n      return readMaxBinary(parser, callback);\n\n    case 'Variant':\n      return parser.readUInt32LE(dataLength => {\n        if (dataLength === 0) {\n          return callback(null);\n        }\n\n        readVariant(parser, options, dataLength, callback);\n      });\n\n    default:\n      throw new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name));\n  }\n}\n\nfunction readUniqueIdentifier(parser, options, callback) {\n  parser.readBuffer(0x10, data => {\n    callback(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data));\n  });\n}\n\nfunction readNumeric(parser, dataLength, _precision, scale, callback) {\n  parser.readUInt8(sign => {\n    sign = sign === 1 ? 1 : -1;\n    let readValue;\n\n    if (dataLength === 5) {\n      readValue = parser.readUInt32LE;\n    } else if (dataLength === 9) {\n      readValue = parser.readUNumeric64LE;\n    } else if (dataLength === 13) {\n      readValue = parser.readUNumeric96LE;\n    } else if (dataLength === 17) {\n      readValue = parser.readUNumeric128LE;\n    } else {\n      throw new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength));\n    }\n\n    readValue.call(parser, value => {\n      callback(value * sign / Math.pow(10, scale));\n    });\n  });\n}\n\nfunction readVariant(parser, options, dataLength, callback) {\n  return parser.readUInt8(baseType => {\n    const type = _dataType.TYPE[baseType];\n    return parser.readUInt8(propBytes => {\n      dataLength = dataLength - propBytes - 2;\n\n      switch (type.name) {\n        case 'UniqueIdentifier':\n          return readUniqueIdentifier(parser, options, callback);\n\n        case 'Bit':\n          return readBit(parser, callback);\n\n        case 'TinyInt':\n          return readTinyInt(parser, callback);\n\n        case 'SmallInt':\n          return readSmallInt(parser, callback);\n\n        case 'Int':\n          return readInt(parser, callback);\n\n        case 'BigInt':\n          return readBigInt(parser, callback);\n\n        case 'SmallDateTime':\n          return readSmallDateTime(parser, options.useUTC, callback);\n\n        case 'DateTime':\n          return readDateTime(parser, options.useUTC, callback);\n\n        case 'Real':\n          return readReal(parser, callback);\n\n        case 'Float':\n          return readFloat(parser, callback);\n\n        case 'SmallMoney':\n          return readSmallMoney(parser, callback);\n\n        case 'Money':\n          return readMoney(parser, callback);\n\n        case 'Date':\n          return readDate(parser, options.useUTC, callback);\n\n        case 'Time':\n          return parser.readUInt8(scale => {\n            return readTime(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTime2':\n          return parser.readUInt8(scale => {\n            return readDateTime2(parser, dataLength, scale, options.useUTC, callback);\n          });\n\n        case 'DateTimeOffset':\n          return parser.readUInt8(scale => {\n            return readDateTimeOffset(parser, dataLength, scale, callback);\n          });\n\n        case 'VarBinary':\n        case 'Binary':\n          return parser.readUInt16LE(_maxLength => {\n            readBinary(parser, dataLength, callback);\n          });\n\n        case 'NumericN':\n        case 'DecimalN':\n          return parser.readUInt8(precision => {\n            parser.readUInt8(scale => {\n              readNumeric(parser, dataLength, precision, scale, callback);\n            });\n          });\n\n        case 'VarChar':\n        case 'Char':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, collation => {\n              readChars(parser, dataLength, collation.codepage, callback);\n            });\n          });\n\n        case 'NVarChar':\n        case 'NChar':\n          return parser.readUInt16LE(_maxLength => {\n            (0, _metadataParser.readCollation)(parser, _collation => {\n              readNChars(parser, dataLength, callback);\n            });\n          });\n\n        default:\n          throw new Error('Invalid type!');\n      }\n    });\n  });\n}\n\nfunction readBinary(parser, dataLength, callback) {\n  return parser.readBuffer(dataLength, callback);\n}\n\nfunction readChars(parser, dataLength, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  return parser.readBuffer(dataLength, data => {\n    callback(_iconvLite.default.decode(data, codepage));\n  });\n}\n\nfunction readNChars(parser, dataLength, callback) {\n  parser.readBuffer(dataLength, data => {\n    callback(data.toString('ucs2'));\n  });\n}\n\nfunction readMaxBinary(parser, callback) {\n  return readMax(parser, callback);\n}\n\nfunction readMaxChars(parser, codepage, callback) {\n  if (codepage == null) {\n    codepage = DEFAULT_ENCODING;\n  }\n\n  readMax(parser, data => {\n    if (data) {\n      callback(_iconvLite.default.decode(data, codepage));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMaxNChars(parser, callback) {\n  readMax(parser, data => {\n    if (data) {\n      callback(data.toString('ucs2'));\n    } else {\n      callback(null);\n    }\n  });\n}\n\nfunction readMax(parser, callback) {\n  parser.readBuffer(8, type => {\n    if (type.equals(PLP_NULL)) {\n      return callback(null);\n    } else if (type.equals(UNKNOWN_PLP_LEN)) {\n      return readMaxUnknownLength(parser, callback);\n    } else {\n      const low = type.readUInt32LE(0);\n      const high = type.readUInt32LE(4);\n\n      if (high >= 2 << 53 - 32) {\n        console.warn('Read UInt64LE > 53 bits : high=' + high + ', low=' + low);\n      }\n\n      const expectedLength = low + 0x100000000 * high;\n      return readMaxKnownLength(parser, expectedLength, callback);\n    }\n  });\n}\n\nfunction readMaxKnownLength(parser, totalLength, callback) {\n  const data = Buffer.alloc(totalLength, 0);\n  let offset = 0;\n\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, chunk => {\n        chunk.copy(data, offset);\n        offset += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    if (offset !== totalLength) {\n      throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + totalLength + ', but got ' + offset + ' bytes');\n    }\n\n    callback(data);\n  });\n}\n\nfunction readMaxUnknownLength(parser, callback) {\n  const chunks = [];\n  let length = 0;\n\n  function next(done) {\n    parser.readUInt32LE(chunkLength => {\n      if (!chunkLength) {\n        return done();\n      }\n\n      parser.readBuffer(chunkLength, chunk => {\n        chunks.push(chunk);\n        length += chunkLength;\n        next(done);\n      });\n    });\n  }\n\n  next(() => {\n    callback(Buffer.concat(chunks, length));\n  });\n}\n\nfunction readSmallDateTime(parser, useUTC, callback) {\n  parser.readUInt16LE(days => {\n    parser.readUInt16LE(minutes => {\n      let value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, minutes);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readDateTime(parser, useUTC, callback) {\n  parser.readInt32LE(days => {\n    parser.readUInt32LE(threeHundredthsOfSecond => {\n      const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n      let value;\n\n      if (useUTC) {\n        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n      } else {\n        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n      }\n\n      callback(value);\n    });\n  });\n}\n\nfunction readTime(parser, dataLength, scale, useUTC, callback) {\n  let readValue;\n\n  switch (dataLength) {\n    case 3:\n      readValue = parser.readUInt24LE;\n      break;\n\n    case 4:\n      readValue = parser.readUInt32LE;\n      break;\n\n    case 5:\n      readValue = parser.readUInt40LE;\n  }\n\n  readValue.call(parser, value => {\n    if (scale < 7) {\n      for (let i = scale; i < 7; i++) {\n        value *= 10;\n      }\n    }\n\n    let date;\n\n    if (useUTC) {\n      date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));\n    } else {\n      date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);\n    }\n\n    Object.defineProperty(date, 'nanosecondsDelta', {\n      enumerable: false,\n      value: value % 10000 / Math.pow(10, 7)\n    });\n    callback(date);\n  });\n}\n\nfunction readDate(parser, useUTC, callback) {\n  parser.readUInt24LE(days => {\n    if (useUTC) {\n      callback(new Date(Date.UTC(2000, 0, days - 730118)));\n    } else {\n      callback(new Date(2000, 0, days - 730118));\n    }\n  });\n}\n\nfunction readDateTime2(parser, dataLength, scale, useUTC, callback) {\n  readTime(parser, dataLength - 3, scale, useUTC, time => {\n    // TODO: 'input' is 'time', but TypeScript cannot find \"time.nanosecondsDelta\";\n    parser.readUInt24LE(days => {\n      let date;\n\n      if (useUTC) {\n        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n      } else {\n        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n      }\n\n      Object.defineProperty(date, 'nanosecondsDelta', {\n        enumerable: false,\n        value: time.nanosecondsDelta\n      });\n      callback(date);\n    });\n  });\n}\n\nfunction readDateTimeOffset(parser, dataLength, scale, callback) {\n  readTime(parser, dataLength - 5, scale, true, time => {\n    parser.readUInt24LE(days => {\n      // offset\n      parser.readInt16LE(() => {\n        const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));\n        Object.defineProperty(date, 'nanosecondsDelta', {\n          enumerable: false,\n          value: time.nanosecondsDelta\n        });\n        callback(date);\n      });\n    });\n  });\n}\n\nvar _default = valueParse;\nexports.default = _default;\nmodule.exports = valueParse;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}