{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\nvar RequestValidator = /** @class */function () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils.isEmpty(redirectUri)) {\n      throw ClientConfigurationError.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    }\n    // Remove any query parameters already included in SSO params\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    // remove empty string parameters\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return Object.fromEntries(Object.entries(eQParams).filter(function (_a) {\n      var value = _a[1];\n      return value !== \"\";\n    }));\n  };\n  return RequestValidator;\n}();\nexport { RequestValidator };","map":{"version":3,"names":["StringUtils","ClientConfigurationError","CodeChallengeMethodValues","PromptValue","RequestValidator","validateRedirectUri","redirectUri","isEmpty","createRedirectUriEmptyError","validatePrompt","prompt","promptValues","value","push","indexOf","createInvalidPromptError","validateClaims","claims","JSON","parse","e","createInvalidClaimsRequestError","validateCodeChallengeParams","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","PLAIN","S256","createInvalidCodeChallengeMethodError","sanitizeEQParams","eQParams","queryParams","forEach","key","Object","fromEntries","entries","filter","_a"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/request/RequestValidator.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nvar RequestValidator = /** @class */ (function () {\r\n    function RequestValidator() {\r\n    }\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    RequestValidator.validateRedirectUri = function (redirectUri) {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    RequestValidator.validatePrompt = function (prompt) {\r\n        var promptValues = [];\r\n        for (var value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    };\r\n    RequestValidator.validateClaims = function (claims) {\r\n        try {\r\n            JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n        else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    };\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\r\n        if ([\r\n            CodeChallengeMethodValues.PLAIN,\r\n            CodeChallengeMethodValues.S256\r\n        ].indexOf(codeChallengeMethod) < 0) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    };\r\n    /**\r\n     * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach(function (value, key) {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n        // remove empty string parameters\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        return Object.fromEntries(Object.entries(eQParams).filter(function (_a) {\r\n            var value = _a[1];\r\n            return value !== \"\";\r\n        }));\r\n    };\r\n    return RequestValidator;\r\n}());\n\nexport { RequestValidator };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,WAAW,QAAQ,yBAAyB;AACrD,SAASC,wBAAwB,QAAQ,sCAAsC;AAC/E,SAASC,yBAAyB,EAAEC,WAAW,QAAQ,uBAAuB;;AAE9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgBA,CAAA,EAAG,CAC5B;EACA;AACJ;AACA;AACA;EACIA,gBAAgB,CAACC,mBAAmB,GAAG,UAAUC,WAAW,EAAE;IAC1D,IAAIN,WAAW,CAACO,OAAO,CAACD,WAAW,CAAC,EAAE;MAClC,MAAML,wBAAwB,CAACO,2BAA2B,EAAE;IAChE;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIJ,gBAAgB,CAACK,cAAc,GAAG,UAAUC,MAAM,EAAE;IAChD,IAAIC,YAAY,GAAG,EAAE;IACrB,KAAK,IAAIC,KAAK,IAAIT,WAAW,EAAE;MAC3BQ,YAAY,CAACE,IAAI,CAACV,WAAW,CAACS,KAAK,CAAC,CAAC;IACzC;IACA,IAAID,YAAY,CAACG,OAAO,CAACJ,MAAM,CAAC,GAAG,CAAC,EAAE;MAClC,MAAMT,wBAAwB,CAACc,wBAAwB,CAACL,MAAM,CAAC;IACnE;EACJ,CAAC;EACDN,gBAAgB,CAACY,cAAc,GAAG,UAAUC,MAAM,EAAE;IAChD,IAAI;MACAC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;IACtB,CAAC,CACD,OAAOG,CAAC,EAAE;MACN,MAAMnB,wBAAwB,CAACoB,+BAA+B,EAAE;IACpE;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjB,gBAAgB,CAACkB,2BAA2B,GAAG,UAAUC,aAAa,EAAEC,mBAAmB,EAAE;IACzF,IAAIxB,WAAW,CAACO,OAAO,CAACgB,aAAa,CAAC,IAAIvB,WAAW,CAACO,OAAO,CAACiB,mBAAmB,CAAC,EAAE;MAChF,MAAMvB,wBAAwB,CAACwB,qCAAqC,EAAE;IAC1E,CAAC,MACI;MACD,IAAI,CAACC,2BAA2B,CAACF,mBAAmB,CAAC;IACzD;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIpB,gBAAgB,CAACsB,2BAA2B,GAAG,UAAUF,mBAAmB,EAAE;IAC1E,IAAI,CACAtB,yBAAyB,CAACyB,KAAK,EAC/BzB,yBAAyB,CAAC0B,IAAI,CACjC,CAACd,OAAO,CAACU,mBAAmB,CAAC,GAAG,CAAC,EAAE;MAChC,MAAMvB,wBAAwB,CAAC4B,qCAAqC,EAAE;IAC1E;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIzB,gBAAgB,CAAC0B,gBAAgB,GAAG,UAAUC,QAAQ,EAAEC,WAAW,EAAE;IACjE,IAAI,CAACD,QAAQ,EAAE;MACX,OAAO,CAAC,CAAC;IACb;IACA;IACAC,WAAW,CAACC,OAAO,CAAC,UAAUrB,KAAK,EAAEsB,GAAG,EAAE;MACtC,IAAIH,QAAQ,CAACG,GAAG,CAAC,EAAE;QACf,OAAOH,QAAQ,CAACG,GAAG,CAAC;MACxB;IACJ,CAAC,CAAC;IACF;IACA;IACA,OAAOC,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACN,QAAQ,CAAC,CAACO,MAAM,CAAC,UAAUC,EAAE,EAAE;MACpE,IAAI3B,KAAK,GAAG2B,EAAE,CAAC,CAAC,CAAC;MACjB,OAAO3B,KAAK,KAAK,EAAE;IACvB,CAAC,CAAC,CAAC;EACP,CAAC;EACD,OAAOR,gBAAgB;AAC3B,CAAC,EAAG;AAEJ,SAASA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}