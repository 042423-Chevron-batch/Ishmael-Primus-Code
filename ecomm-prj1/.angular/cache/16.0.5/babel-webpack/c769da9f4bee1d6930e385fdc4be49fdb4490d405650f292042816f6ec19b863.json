{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doneInProcParser = doneInProcParser;\nexports.doneParser = doneParser;\nexports.doneProcParser = doneProcParser;\nvar _token = require(\"./token\");\n\n// s2.2.7.5/6/7\nconst STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\nfunction parseToken(parser, options, callback) {\n  parser.readUInt16LE(status => {\n    const more = !!(status & STATUS.MORE);\n    const sqlError = !!(status & STATUS.ERROR);\n    const rowCountValid = !!(status & STATUS.COUNT);\n    const attention = !!(status & STATUS.ATTN);\n    const serverError = !!(status & STATUS.SRVERROR);\n    parser.readUInt16LE(curCmd => {\n      const next = rowCount => {\n        callback({\n          more: more,\n          sqlError: sqlError,\n          attention: attention,\n          serverError: serverError,\n          rowCount: rowCountValid ? rowCount : undefined,\n          curCmd: curCmd\n        });\n      };\n      if (options.tdsVersion < '7_2') {\n        parser.readUInt32LE(next);\n      } else {\n        parser.readBigUInt64LE(rowCount => {\n          next(Number(rowCount));\n        });\n      }\n    });\n  });\n}\nfunction doneParser(parser, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneToken(data));\n  });\n}\nfunction doneInProcParser(parser, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneInProcToken(data));\n  });\n}\nfunction doneProcParser(parser, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneProcToken(data));\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","doneInProcParser","doneParser","doneProcParser","_token","require","STATUS","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","parseToken","parser","options","callback","readUInt16LE","status","more","sqlError","rowCountValid","attention","serverError","curCmd","next","rowCount","undefined","tdsVersion","readUInt32LE","readBigUInt64LE","Number","data","DoneToken","DoneInProcToken","DoneProcToken"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/token/done-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doneInProcParser = doneInProcParser;\nexports.doneParser = doneParser;\nexports.doneProcParser = doneProcParser;\n\nvar _token = require(\"./token\");\n\n// s2.2.7.5/6/7\nconst STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\n\nfunction parseToken(parser, options, callback) {\n  parser.readUInt16LE(status => {\n    const more = !!(status & STATUS.MORE);\n    const sqlError = !!(status & STATUS.ERROR);\n    const rowCountValid = !!(status & STATUS.COUNT);\n    const attention = !!(status & STATUS.ATTN);\n    const serverError = !!(status & STATUS.SRVERROR);\n    parser.readUInt16LE(curCmd => {\n      const next = rowCount => {\n        callback({\n          more: more,\n          sqlError: sqlError,\n          attention: attention,\n          serverError: serverError,\n          rowCount: rowCountValid ? rowCount : undefined,\n          curCmd: curCmd\n        });\n      };\n\n      if (options.tdsVersion < '7_2') {\n        parser.readUInt32LE(next);\n      } else {\n        parser.readBigUInt64LE(rowCount => {\n          next(Number(rowCount));\n        });\n      }\n    });\n  });\n}\n\nfunction doneParser(parser, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneToken(data));\n  });\n}\n\nfunction doneInProcParser(parser, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneInProcToken(data));\n  });\n}\n\nfunction doneProcParser(parser, options, callback) {\n  parseToken(parser, options, data => {\n    callback(new _token.DoneProcToken(data));\n  });\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB;AAC3CF,OAAO,CAACG,UAAU,GAAGA,UAAU;AAC/BH,OAAO,CAACI,cAAc,GAAGA,cAAc;AAEvC,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE/B;AACA,MAAMC,MAAM,GAAG;EACbC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,MAAM;EACb;EACAC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,MAAM;EACbC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE;AACZ,CAAC;AAED,SAASC,UAAUA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC7CF,MAAM,CAACG,YAAY,CAACC,MAAM,IAAI;IAC5B,MAAMC,IAAI,GAAG,CAAC,EAAED,MAAM,GAAGZ,MAAM,CAACC,IAAI,CAAC;IACrC,MAAMa,QAAQ,GAAG,CAAC,EAAEF,MAAM,GAAGZ,MAAM,CAACE,KAAK,CAAC;IAC1C,MAAMa,aAAa,GAAG,CAAC,EAAEH,MAAM,GAAGZ,MAAM,CAACI,KAAK,CAAC;IAC/C,MAAMY,SAAS,GAAG,CAAC,EAAEJ,MAAM,GAAGZ,MAAM,CAACK,IAAI,CAAC;IAC1C,MAAMY,WAAW,GAAG,CAAC,EAAEL,MAAM,GAAGZ,MAAM,CAACM,QAAQ,CAAC;IAChDE,MAAM,CAACG,YAAY,CAACO,MAAM,IAAI;MAC5B,MAAMC,IAAI,GAAGC,QAAQ,IAAI;QACvBV,QAAQ,CAAC;UACPG,IAAI,EAAEA,IAAI;UACVC,QAAQ,EAAEA,QAAQ;UAClBE,SAAS,EAAEA,SAAS;UACpBC,WAAW,EAAEA,WAAW;UACxBG,QAAQ,EAAEL,aAAa,GAAGK,QAAQ,GAAGC,SAAS;UAC9CH,MAAM,EAAEA;QACV,CAAC,CAAC;MACJ,CAAC;MAED,IAAIT,OAAO,CAACa,UAAU,GAAG,KAAK,EAAE;QAC9Bd,MAAM,CAACe,YAAY,CAACJ,IAAI,CAAC;MAC3B,CAAC,MAAM;QACLX,MAAM,CAACgB,eAAe,CAACJ,QAAQ,IAAI;UACjCD,IAAI,CAACM,MAAM,CAACL,QAAQ,CAAC,CAAC;QACxB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASxB,UAAUA,CAACY,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC7CH,UAAU,CAACC,MAAM,EAAEC,OAAO,EAAEiB,IAAI,IAAI;IAClChB,QAAQ,CAAC,IAAIZ,MAAM,CAAC6B,SAAS,CAACD,IAAI,CAAC,CAAC;EACtC,CAAC,CAAC;AACJ;AAEA,SAAS/B,gBAAgBA,CAACa,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACnDH,UAAU,CAACC,MAAM,EAAEC,OAAO,EAAEiB,IAAI,IAAI;IAClChB,QAAQ,CAAC,IAAIZ,MAAM,CAAC8B,eAAe,CAACF,IAAI,CAAC,CAAC;EAC5C,CAAC,CAAC;AACJ;AAEA,SAAS7B,cAAcA,CAACW,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACjDH,UAAU,CAACC,MAAM,EAAEC,OAAO,EAAEiB,IAAI,IAAI;IAClChB,QAAQ,CAAC,IAAIZ,MAAM,CAAC+B,aAAa,CAACH,IAAI,CAAC,CAAC;EAC1C,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}