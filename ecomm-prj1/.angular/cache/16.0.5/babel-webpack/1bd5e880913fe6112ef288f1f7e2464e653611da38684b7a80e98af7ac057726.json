{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy\";\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(options = {}) {\n  var _a, _b;\n  const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n  let retryAfterInMs = retryInterval;\n  return {\n    name: \"exponentialRetryStrategy\",\n    retry({\n      retryCount,\n      response,\n      responseError\n    }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return {\n          skipStrategy: true\n        };\n      }\n      if (responseError && !matchedSystemError && !isExponential) {\n        return {\n          errorToThrow: responseError\n        };\n      }\n      // Exponentially increase the delay each time\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n      // Don't let the delay exceed the maximum\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n      // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n      retryAfterInMs = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return {\n        retryAfterInMs\n      };\n    }\n  };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response) {\n  return Boolean(response && response.status !== undefined && (response.status >= 500 || response.status === 408) && response.status !== 501 && response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err) {\n  if (!err) {\n    return false;\n  }\n  return err.code === \"ETIMEDOUT\" || err.code === \"ESOCKETTIMEDOUT\" || err.code === \"ECONNREFUSED\" || err.code === \"ECONNRESET\" || err.code === \"ENOENT\";\n}","map":{"version":3,"names":["getRandomIntegerInclusive","isThrottlingRetryResponse","DEFAULT_CLIENT_RETRY_INTERVAL","DEFAULT_CLIENT_MAX_RETRY_INTERVAL","exponentialRetryStrategy","options","_a","_b","retryInterval","retryDelayInMs","maxRetryInterval","maxRetryDelayInMs","retryAfterInMs","name","retry","retryCount","response","responseError","matchedSystemError","isSystemError","ignoreSystemErrors","isExponential","isExponentialRetryResponse","ignoreExponentialResponse","ignoreHttpStatusCodes","unknownResponse","skipStrategy","errorToThrow","exponentialDelay","Math","pow","clampedExponentialDelay","min","Boolean","status","undefined","err","code"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-rest-pipeline/dist-esm/src/retryStrategies/exponentialRetryStrategy.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy\";\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(options = {}) {\n    var _a, _b;\n    const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    let retryAfterInMs = retryInterval;\n    return {\n        name: \"exponentialRetryStrategy\",\n        retry({ retryCount, response, responseError }) {\n            const matchedSystemError = isSystemError(responseError);\n            const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n            const isExponential = isExponentialRetryResponse(response);\n            const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n            const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n            if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n                return { skipStrategy: true };\n            }\n            if (responseError && !matchedSystemError && !isExponential) {\n                return { errorToThrow: responseError };\n            }\n            // Exponentially increase the delay each time\n            const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n            // Don't let the delay exceed the maximum\n            const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n            // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n            // that retries across multiple clients don't occur simultaneously.\n            retryAfterInMs =\n                clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n            return { retryAfterInMs };\n        },\n    };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response) {\n    return Boolean(response &&\n        response.status !== undefined &&\n        (response.status >= 500 || response.status === 408) &&\n        response.status !== 501 &&\n        response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\");\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,yBAAyB,QAAQ,kBAAkB;AAC5D,SAASC,yBAAyB,QAAQ,2BAA2B;AACrE;AACA,MAAMC,6BAA6B,GAAG,IAAI;AAC1C,MAAMC,iCAAiC,GAAG,IAAI,GAAG,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACnD,IAAIC,EAAE,EAAEC,EAAE;EACV,MAAMC,aAAa,GAAG,CAACF,EAAE,GAAGD,OAAO,CAACI,cAAc,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGJ,6BAA6B;EAClH,MAAMQ,gBAAgB,GAAG,CAACH,EAAE,GAAGF,OAAO,CAACM,iBAAiB,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGJ,iCAAiC;EAC5H,IAAIS,cAAc,GAAGJ,aAAa;EAClC,OAAO;IACHK,IAAI,EAAE,0BAA0B;IAChCC,KAAKA,CAAC;MAAEC,UAAU;MAAEC,QAAQ;MAAEC;IAAc,CAAC,EAAE;MAC3C,MAAMC,kBAAkB,GAAGC,aAAa,CAACF,aAAa,CAAC;MACvD,MAAMG,kBAAkB,GAAGF,kBAAkB,IAAIb,OAAO,CAACe,kBAAkB;MAC3E,MAAMC,aAAa,GAAGC,0BAA0B,CAACN,QAAQ,CAAC;MAC1D,MAAMO,yBAAyB,GAAGF,aAAa,IAAIhB,OAAO,CAACmB,qBAAqB;MAChF,MAAMC,eAAe,GAAGT,QAAQ,KAAKf,yBAAyB,CAACe,QAAQ,CAAC,IAAI,CAACK,aAAa,CAAC;MAC3F,IAAII,eAAe,IAAIF,yBAAyB,IAAIH,kBAAkB,EAAE;QACpE,OAAO;UAAEM,YAAY,EAAE;QAAK,CAAC;MACjC;MACA,IAAIT,aAAa,IAAI,CAACC,kBAAkB,IAAI,CAACG,aAAa,EAAE;QACxD,OAAO;UAAEM,YAAY,EAAEV;QAAc,CAAC;MAC1C;MACA;MACA,MAAMW,gBAAgB,GAAGhB,cAAc,GAAGiB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEf,UAAU,CAAC;MACjE;MACA,MAAMgB,uBAAuB,GAAGF,IAAI,CAACG,GAAG,CAACtB,gBAAgB,EAAEkB,gBAAgB,CAAC;MAC5E;MACA;MACAhB,cAAc,GACVmB,uBAAuB,GAAG,CAAC,GAAG/B,yBAAyB,CAAC,CAAC,EAAE+B,uBAAuB,GAAG,CAAC,CAAC;MAC3F,OAAO;QAAEnB;MAAe,CAAC;IAC7B;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,0BAA0BA,CAACN,QAAQ,EAAE;EACjD,OAAOiB,OAAO,CAACjB,QAAQ,IACnBA,QAAQ,CAACkB,MAAM,KAAKC,SAAS,KAC5BnB,QAAQ,CAACkB,MAAM,IAAI,GAAG,IAAIlB,QAAQ,CAACkB,MAAM,KAAK,GAAG,CAAC,IACnDlB,QAAQ,CAACkB,MAAM,KAAK,GAAG,IACvBlB,QAAQ,CAACkB,MAAM,KAAK,GAAG,CAAC;AAChC;AACA;AACA;AACA;AACA,OAAO,SAASf,aAAaA,CAACiB,GAAG,EAAE;EAC/B,IAAI,CAACA,GAAG,EAAE;IACN,OAAO,KAAK;EAChB;EACA,OAAQA,GAAG,CAACC,IAAI,KAAK,WAAW,IAC5BD,GAAG,CAACC,IAAI,KAAK,iBAAiB,IAC9BD,GAAG,CAACC,IAAI,KAAK,cAAc,IAC3BD,GAAG,CAACC,IAAI,KAAK,YAAY,IACzBD,GAAG,CAACC,IAAI,KAAK,QAAQ;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}