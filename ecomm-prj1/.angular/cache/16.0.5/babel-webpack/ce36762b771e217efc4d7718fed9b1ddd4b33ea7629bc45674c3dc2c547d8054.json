{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, Constants, PerformanceEvents, AuthorizationCodeClient, Authority, AuthorityFactory, ResponseMode, StringUtils, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { version } from '../packageMetadata.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\nvar StandardInteractionClient = /** @class */function (_super) {\n  __extends(StandardInteractionClient, _super);\n  function StandardInteractionClient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Generates an auth code request tied to the url request.\r\n   * @param request\r\n   */\n  StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var generatedPkceParams, authCodeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\n            return [4 /*yield*/, this.browserCrypto.generatePkceCodes()];\n          case 1:\n            generatedPkceParams = _a.sent();\n            authCodeRequest = __assign(__assign({}, request), {\n              redirectUri: request.redirectUri,\n              code: Constants.EMPTY_STRING,\n              codeVerifier: generatedPkceParams.verifier\n            });\n            request.codeChallenge = generatedPkceParams.challenge;\n            request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\n            return [2 /*return*/, authCodeRequest];\n        }\n      });\n    });\n  };\n  /**\r\n   * Initializer for the logout request.\r\n   * @param logoutRequest\r\n   */\n  StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {\n    this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);\n    var validLogoutRequest = __assign({\n      correlationId: this.correlationId || this.browserCrypto.createNewGuid()\n    }, logoutRequest);\n    /**\r\n     * Set logout_hint to be login_hint from ID Token Claims if present\r\n     * and logoutHint attribute wasn't manually set in logout request\r\n     */\n    if (logoutRequest) {\n      // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n      if (!logoutRequest.logoutHint) {\n        if (logoutRequest.account) {\n          var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n          if (logoutHint) {\n            this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n            validLogoutRequest.logoutHint = logoutHint;\n          }\n        } else {\n          this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n        }\n      } else {\n        this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n      }\n    } else {\n      this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n    }\n    /*\r\n     * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n     * Otherwise, use passed uri, config, or current page.\r\n     */\n    if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n      if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else if (this.config.auth.postLogoutRedirectUri === null) {\n        this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n      } else if (this.config.auth.postLogoutRedirectUri) {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\n      } else {\n        this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n        validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\n      }\n    } else {\n      this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n    }\n    return validLogoutRequest;\n  };\n  /**\r\n   * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n   * logout_hint in end session request.\r\n   * @param account\r\n   */\n  StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {\n    var idTokenClaims = account.idTokenClaims;\n    if (idTokenClaims) {\n      if (idTokenClaims.login_hint) {\n        return idTokenClaims.login_hint;\n      } else {\n        this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n      }\n    } else {\n      this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n    }\n    return null;\n  };\n  /**\r\n   * Creates an Authorization Code Client with the given authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param authorityUrl\r\n   */\n  StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\n            // Create auth module.\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];\n          case 1:\n            clientConfig = _a.sent();\n            return [2 /*return*/, new AuthorizationCodeClient(clientConfig, this.performanceClient)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates a Client Configuration object with the given request authority, or the default authority.\r\n   * @param serverTelemetryManager\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n  StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var discoveredAuthority, logger;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n            this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            return [4 /*yield*/, this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];\n          case 1:\n            discoveredAuthority = _a.sent();\n            logger = this.config.system.loggerOptions;\n            return [2 /*return*/, {\n              authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities\n              },\n              systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n              },\n              loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId\n              },\n              cryptoInterface: this.browserCrypto,\n              networkInterface: this.networkClient,\n              storageInterface: this.browserStorage,\n              serverTelemetryManager: serverTelemetryManager,\n              libraryInfo: {\n                sku: BrowserConstants.MSAL_SKU,\n                version: version,\n                cpu: Constants.EMPTY_STRING,\n                os: Constants.EMPTY_STRING\n              },\n              telemetry: this.config.telemetry\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * @param hash\r\n   * @param interactionType\r\n   */\n  StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (serverParams, interactionType, requestCorrelationId) {\n    this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\n    if (!serverParams.state) {\n      throw BrowserAuthError.createHashDoesNotContainStateError();\n    }\n    var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\n    if (!platformStateObj) {\n      throw BrowserAuthError.createUnableToParseStateError();\n    }\n    if (platformStateObj.interactionType !== interactionType) {\n      throw BrowserAuthError.createStateInteractionTypeMismatchError();\n    }\n    this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\n    return serverParams.state;\n  };\n  /**\r\n   * Used to get a discovered version of the default authority.\r\n   * @param requestAuthority\r\n   * @param requestCorrelationId\r\n   */\n  StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var getAuthorityMeasurement, authorityOptions, userAuthority, builtAuthority;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\n            getAuthorityMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n            authorityOptions = {\n              protocolMode: this.config.auth.protocolMode,\n              knownAuthorities: this.config.auth.knownAuthorities,\n              cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n              authorityMetadata: this.config.auth.authorityMetadata,\n              skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n            };\n            userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\n            builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n            this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId).then(function (result) {\n              getAuthorityMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              getAuthorityMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n   * @param request\r\n   * @param interactionType\r\n   */\n  StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {\n    return __awaiter(this, void 0, void 0, function () {\n      var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n            this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\n            redirectUri = this.getRedirectUri(request.redirectUri);\n            browserState = {\n              interactionType: interactionType\n            };\n            state = ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || Constants.EMPTY_STRING, browserState);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\n            _a = [{}];\n            return [4 /*yield*/, this.initializeBaseRequest(request)];\n          case 1:\n            validatedRequest = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), {\n              redirectUri: redirectUri,\n              state: state,\n              nonce: request.nonce || this.browserCrypto.createNewGuid(),\n              responseMode: ResponseMode.FRAGMENT\n            }]);\n            account = request.account || this.browserStorage.getActiveAccount();\n            if (account) {\n              this.logger.verbose(\"Setting validated request account\", this.correlationId);\n              this.logger.verbosePii(\"Setting validated request account: \" + account.homeAccountId, this.correlationId);\n              validatedRequest.account = account;\n            }\n            // Check for ADAL/MSAL v1 SSO\n            if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\n              legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n              if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n              }\n            }\n            return [2 /*return*/, validatedRequest];\n        }\n      });\n    });\n  };\n  return StandardInteractionClient;\n}(BaseInteractionClient);\nexport { StandardInteractionClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","UrlString","Constants","PerformanceEvents","AuthorizationCodeClient","Authority","AuthorityFactory","ResponseMode","StringUtils","ProtocolUtils","BaseInteractionClient","BrowserConstants","version","BrowserAuthError","BrowserProtocolUtils","BrowserUtils","StandardInteractionClient","_super","apply","arguments","prototype","initializeAuthorizationCodeRequest","request","generatedPkceParams","authCodeRequest","_a","label","performanceClient","addQueueMeasurement","StandardInteractionClientInitializeAuthorizationCodeRequest","correlationId","logger","verbose","browserCrypto","generatePkceCodes","sent","redirectUri","code","EMPTY_STRING","codeVerifier","verifier","codeChallenge","challenge","codeChallengeMethod","S256_CODE_CHALLENGE_METHOD","initializeLogoutRequest","logoutRequest","validLogoutRequest","createNewGuid","logoutHint","account","getLogoutHintFromIdTokenClaims","postLogoutRedirectUri","getAbsoluteUrl","getCurrentUri","config","auth","idTokenClaims","login_hint","createAuthCodeClient","serverTelemetryManager","authorityUrl","requestAzureCloudOptions","clientConfig","StandardInteractionClientCreateAuthCodeClient","setPreQueueTime","StandardInteractionClientGetClientConfiguration","getClientConfiguration","requestAuthority","discoveredAuthority","StandardInteractionClientGetDiscoveredAuthority","getDiscoveredAuthority","system","loggerOptions","authOptions","clientId","authority","clientCapabilities","systemOptions","tokenRenewalOffsetSeconds","preventCorsPreflight","loggerCallback","piiLoggingEnabled","logLevel","cryptoInterface","networkInterface","networkClient","storageInterface","browserStorage","libraryInfo","sku","MSAL_SKU","cpu","os","telemetry","validateAndExtractStateFromHash","serverParams","interactionType","requestCorrelationId","state","createHashDoesNotContainStateError","platformStateObj","extractBrowserRequestState","createUnableToParseStateError","createStateInteractionTypeMismatchError","getAuthorityMeasurement","authorityOptions","userAuthority","builtAuthority","_b","startMeasurement","protocolMode","knownAuthorities","cloudDiscoveryMetadata","authorityMetadata","skipAuthorityMetadataCache","generateAuthority","azureCloudOptions","AuthorityFactoryCreateDiscoveredInstance","createDiscoveredInstance","then","result","endMeasurement","success","catch","error","errorCode","subErrorCode","subError","initializeAuthorizationRequest","browserState","validatedRequest","legacyLoginHint","StandardInteractionClientInitializeAuthorizationRequest","getRedirectUri","setRequestState","InitializeBaseRequest","initializeBaseRequest","concat","nonce","responseMode","FRAGMENT","getActiveAccount","verbosePii","homeAccountId","isEmpty","loginHint","getLegacyLoginHint"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, Constants, PerformanceEvents, AuthorizationCodeClient, Authority, AuthorityFactory, ResponseMode, StringUtils, ProtocolUtils } from '@azure/msal-common';\nimport { BaseInteractionClient } from './BaseInteractionClient.js';\nimport { BrowserConstants } from '../utils/BrowserConstants.js';\nimport { version } from '../packageMetadata.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */\r\nvar StandardInteractionClient = /** @class */ (function (_super) {\r\n    __extends(StandardInteractionClient, _super);\r\n    function StandardInteractionClient() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Generates an auth code request tied to the url request.\r\n     * @param request\r\n     */\r\n    StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var generatedPkceParams, authCodeRequest;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n                        this.logger.verbose(\"initializeAuthorizationRequest called\", request.correlationId);\r\n                        return [4 /*yield*/, this.browserCrypto.generatePkceCodes()];\r\n                    case 1:\r\n                        generatedPkceParams = _a.sent();\r\n                        authCodeRequest = __assign(__assign({}, request), { redirectUri: request.redirectUri, code: Constants.EMPTY_STRING, codeVerifier: generatedPkceParams.verifier });\r\n                        request.codeChallenge = generatedPkceParams.challenge;\r\n                        request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;\r\n                        return [2 /*return*/, authCodeRequest];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Initializer for the logout request.\r\n     * @param logoutRequest\r\n     */\r\n    StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {\r\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);\r\n        var validLogoutRequest = __assign({ correlationId: this.correlationId || this.browserCrypto.createNewGuid() }, logoutRequest);\r\n        /**\r\n         * Set logout_hint to be login_hint from ID Token Claims if present\r\n         * and logoutHint attribute wasn't manually set in logout request\r\n         */\r\n        if (logoutRequest) {\r\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\r\n            if (!logoutRequest.logoutHint) {\r\n                if (logoutRequest.account) {\r\n                    var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\r\n                    if (logoutHint) {\r\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\r\n                        validLogoutRequest.logoutHint = logoutHint;\r\n                    }\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\r\n                }\r\n            }\r\n            else {\r\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\r\n        }\r\n        /*\r\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n         * Otherwise, use passed uri, config, or current page.\r\n         */\r\n        if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\r\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            }\r\n            else if (this.config.auth.postLogoutRedirectUri === null) {\r\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\r\n            }\r\n            else if (this.config.auth.postLogoutRedirectUri) {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());\r\n            }\r\n            else {\r\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\r\n                validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\r\n        }\r\n        return validLogoutRequest;\r\n    };\r\n    /**\r\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n     * logout_hint in end session request.\r\n     * @param account\r\n     */\r\n    StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {\r\n        var idTokenClaims = account.idTokenClaims;\r\n        if (idTokenClaims) {\r\n            if (idTokenClaims.login_hint) {\r\n                return idTokenClaims.login_hint;\r\n            }\r\n            else {\r\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\r\n            }\r\n        }\r\n        else {\r\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Creates an Authorization Code Client with the given authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param authorityUrl\r\n     */\r\n    StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var clientConfig;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\r\n                        // Create auth module.\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n                        return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];\r\n                    case 1:\r\n                        clientConfig = _a.sent();\r\n                        return [2 /*return*/, new AuthorizationCodeClient(clientConfig, this.performanceClient)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates a Client Configuration object with the given request authority, or the default authority.\r\n     * @param serverTelemetryManager\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var discoveredAuthority, logger;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\r\n                        this.logger.verbose(\"getClientConfiguration called\", this.correlationId);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n                        return [4 /*yield*/, this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];\r\n                    case 1:\r\n                        discoveredAuthority = _a.sent();\r\n                        logger = this.config.system.loggerOptions;\r\n                        return [2 /*return*/, {\r\n                                authOptions: {\r\n                                    clientId: this.config.auth.clientId,\r\n                                    authority: discoveredAuthority,\r\n                                    clientCapabilities: this.config.auth.clientCapabilities\r\n                                },\r\n                                systemOptions: {\r\n                                    tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\r\n                                    preventCorsPreflight: true\r\n                                },\r\n                                loggerOptions: {\r\n                                    loggerCallback: logger.loggerCallback,\r\n                                    piiLoggingEnabled: logger.piiLoggingEnabled,\r\n                                    logLevel: logger.logLevel,\r\n                                    correlationId: this.correlationId\r\n                                },\r\n                                cryptoInterface: this.browserCrypto,\r\n                                networkInterface: this.networkClient,\r\n                                storageInterface: this.browserStorage,\r\n                                serverTelemetryManager: serverTelemetryManager,\r\n                                libraryInfo: {\r\n                                    sku: BrowserConstants.MSAL_SKU,\r\n                                    version: version,\r\n                                    cpu: Constants.EMPTY_STRING,\r\n                                    os: Constants.EMPTY_STRING\r\n                                },\r\n                                telemetry: this.config.telemetry\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param hash\r\n     * @param interactionType\r\n     */\r\n    StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (serverParams, interactionType, requestCorrelationId) {\r\n        this.logger.verbose(\"validateAndExtractStateFromHash called\", requestCorrelationId);\r\n        if (!serverParams.state) {\r\n            throw BrowserAuthError.createHashDoesNotContainStateError();\r\n        }\r\n        var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);\r\n        if (!platformStateObj) {\r\n            throw BrowserAuthError.createUnableToParseStateError();\r\n        }\r\n        if (platformStateObj.interactionType !== interactionType) {\r\n            throw BrowserAuthError.createStateInteractionTypeMismatchError();\r\n        }\r\n        this.logger.verbose(\"Returning state from hash\", requestCorrelationId);\r\n        return serverParams.state;\r\n    };\r\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param requestAuthority\r\n     * @param requestCorrelationId\r\n     */\r\n    StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getAuthorityMeasurement, authorityOptions, userAuthority, builtAuthority;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n                        this.logger.verbose(\"getDiscoveredAuthority called\", this.correlationId);\r\n                        getAuthorityMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\r\n                        authorityOptions = {\r\n                            protocolMode: this.config.auth.protocolMode,\r\n                            knownAuthorities: this.config.auth.knownAuthorities,\r\n                            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\r\n                            authorityMetadata: this.config.auth.authorityMetadata,\r\n                            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\r\n                        };\r\n                        userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;\r\n                        builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);\r\n                        this.logger.verbose(\"Creating discovered authority with configured authority\", this.correlationId);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);\r\n                        return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId)\r\n                                .then(function (result) {\r\n                                getAuthorityMeasurement.endMeasurement({\r\n                                    success: true,\r\n                                });\r\n                                return result;\r\n                            })\r\n                                .catch(function (error) {\r\n                                getAuthorityMeasurement.endMeasurement({\r\n                                    errorCode: error.errorCode,\r\n                                    subErrorCode: error.subError,\r\n                                    success: false\r\n                                });\r\n                                throw error;\r\n                            })];\r\n                    case 1: return [2 /*return*/, _b.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n     * @param request\r\n     * @param interactionType\r\n     */\r\n    StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\r\n                        this.logger.verbose(\"initializeAuthorizationRequest called\", this.correlationId);\r\n                        redirectUri = this.getRedirectUri(request.redirectUri);\r\n                        browserState = {\r\n                            interactionType: interactionType\r\n                        };\r\n                        state = ProtocolUtils.setRequestState(this.browserCrypto, (request && request.state) || Constants.EMPTY_STRING, browserState);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);\r\n                        _a = [{}];\r\n                        return [4 /*yield*/, this.initializeBaseRequest(request)];\r\n                    case 1:\r\n                        validatedRequest = __assign.apply(void 0, [__assign.apply(void 0, _a.concat([_b.sent()])), { redirectUri: redirectUri, state: state, nonce: request.nonce || this.browserCrypto.createNewGuid(), responseMode: ResponseMode.FRAGMENT }]);\r\n                        account = request.account || this.browserStorage.getActiveAccount();\r\n                        if (account) {\r\n                            this.logger.verbose(\"Setting validated request account\", this.correlationId);\r\n                            this.logger.verbosePii(\"Setting validated request account: \" + account.homeAccountId, this.correlationId);\r\n                            validatedRequest.account = account;\r\n                        }\r\n                        // Check for ADAL/MSAL v1 SSO\r\n                        if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {\r\n                            legacyLoginHint = this.browserStorage.getLegacyLoginHint();\r\n                            if (legacyLoginHint) {\r\n                                validatedRequest.loginHint = legacyLoginHint;\r\n                            }\r\n                        }\r\n                        return [2 /*return*/, validatedRequest];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return StandardInteractionClient;\r\n}(BaseInteractionClient));\n\nexport { StandardInteractionClient };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,SAAS,EAAEC,SAAS,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,uBAAuB;AACnF,SAASC,SAAS,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,WAAW,EAAEC,aAAa,QAAQ,oBAAoB;AAC5K,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,oBAAoB,QAAQ,kCAAkC;AACvE,SAASC,YAAY,QAAQ,0BAA0B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,yBAAyB,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC7DpB,SAAS,CAACmB,yBAAyB,EAAEC,MAAM,CAAC;EAC5C,SAASD,yBAAyBA,CAAA,EAAG;IACjC,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACA;AACJ;AACA;AACA;EACIH,yBAAyB,CAACI,SAAS,CAACC,kCAAkC,GAAG,UAAUC,OAAO,EAAE;IACxF,OAAOxB,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIyB,mBAAmB,EAAEC,eAAe;MACxC,OAAOzB,WAAW,CAAC,IAAI,EAAE,UAAU0B,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACF,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CAACzB,iBAAiB,CAAC0B,2DAA2D,EAAEP,OAAO,CAACQ,aAAa,CAAC;YAChJ,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,uCAAuC,EAAEV,OAAO,CAACQ,aAAa,CAAC;YACnF,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACG,aAAa,CAACC,iBAAiB,EAAE,CAAC;UAChE,KAAK,CAAC;YACFX,mBAAmB,GAAGE,EAAE,CAACU,IAAI,EAAE;YAC/BX,eAAe,GAAGxB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEsB,OAAO,CAAC,EAAE;cAAEc,WAAW,EAAEd,OAAO,CAACc,WAAW;cAAEC,IAAI,EAAEnC,SAAS,CAACoC,YAAY;cAAEC,YAAY,EAAEhB,mBAAmB,CAACiB;YAAS,CAAC,CAAC;YACjKlB,OAAO,CAACmB,aAAa,GAAGlB,mBAAmB,CAACmB,SAAS;YACrDpB,OAAO,CAACqB,mBAAmB,GAAGzC,SAAS,CAAC0C,0BAA0B;YAClE,OAAO,CAAC,CAAC,CAAC,YAAYpB,eAAe,CAAC;QAAC;MAEnD,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIR,yBAAyB,CAACI,SAAS,CAACyB,uBAAuB,GAAG,UAAUC,aAAa,EAAE;IACnF,IAAI,CAACf,MAAM,CAACC,OAAO,CAAC,gCAAgC,EAAEc,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAAChB,aAAa,CAAC;IAChJ,IAAIiB,kBAAkB,GAAG/C,QAAQ,CAAC;MAAE8B,aAAa,EAAE,IAAI,CAACA,aAAa,IAAI,IAAI,CAACG,aAAa,CAACe,aAAa;IAAG,CAAC,EAAEF,aAAa,CAAC;IAC7H;AACR;AACA;AACA;IACQ,IAAIA,aAAa,EAAE;MACf;MACA,IAAI,CAACA,aAAa,CAACG,UAAU,EAAE;QAC3B,IAAIH,aAAa,CAACI,OAAO,EAAE;UACvB,IAAID,UAAU,GAAG,IAAI,CAACE,8BAA8B,CAACL,aAAa,CAACI,OAAO,CAAC;UAC3E,IAAID,UAAU,EAAE;YACZ,IAAI,CAAClB,MAAM,CAACC,OAAO,CAAC,gFAAgF,CAAC;YACrGe,kBAAkB,CAACE,UAAU,GAAGA,UAAU;UAC9C;QACJ,CAAC,MACI;UACD,IAAI,CAAClB,MAAM,CAACC,OAAO,CAAC,mGAAmG,CAAC;QAC5H;MACJ,CAAC,MACI;QACD,IAAI,CAACD,MAAM,CAACC,OAAO,CAAC,kDAAkD,CAAC;MAC3E;IACJ,CAAC,MACI;MACD,IAAI,CAACD,MAAM,CAACC,OAAO,CAAC,mEAAmE,CAAC;IAC5F;IACA;AACR;AACA;AACA;IACQ,IAAI,CAACc,aAAa,IAAIA,aAAa,CAACM,qBAAqB,KAAK,IAAI,EAAE;MAChE,IAAIN,aAAa,IAAIA,aAAa,CAACM,qBAAqB,EAAE;QACtD,IAAI,CAACrB,MAAM,CAACC,OAAO,CAAC,4DAA4D,EAAEe,kBAAkB,CAACjB,aAAa,CAAC;QACnHiB,kBAAkB,CAACK,qBAAqB,GAAGnD,SAAS,CAACoD,cAAc,CAACP,aAAa,CAACM,qBAAqB,EAAErC,YAAY,CAACuC,aAAa,EAAE,CAAC;MAC1I,CAAC,MACI,IAAI,IAAI,CAACC,MAAM,CAACC,IAAI,CAACJ,qBAAqB,KAAK,IAAI,EAAE;QACtD,IAAI,CAACrB,MAAM,CAACC,OAAO,CAAC,sGAAsG,EAAEe,kBAAkB,CAACjB,aAAa,CAAC;MACjK,CAAC,MACI,IAAI,IAAI,CAACyB,MAAM,CAACC,IAAI,CAACJ,qBAAqB,EAAE;QAC7C,IAAI,CAACrB,MAAM,CAACC,OAAO,CAAC,iDAAiD,EAAEe,kBAAkB,CAACjB,aAAa,CAAC;QACxGiB,kBAAkB,CAACK,qBAAqB,GAAGnD,SAAS,CAACoD,cAAc,CAAC,IAAI,CAACE,MAAM,CAACC,IAAI,CAACJ,qBAAqB,EAAErC,YAAY,CAACuC,aAAa,EAAE,CAAC;MAC7I,CAAC,MACI;QACD,IAAI,CAACvB,MAAM,CAACC,OAAO,CAAC,+CAA+C,EAAEe,kBAAkB,CAACjB,aAAa,CAAC;QACtGiB,kBAAkB,CAACK,qBAAqB,GAAGnD,SAAS,CAACoD,cAAc,CAACtC,YAAY,CAACuC,aAAa,EAAE,EAAEvC,YAAY,CAACuC,aAAa,EAAE,CAAC;MACnI;IACJ,CAAC,MACI;MACD,IAAI,CAACvB,MAAM,CAACC,OAAO,CAAC,4EAA4E,EAAEe,kBAAkB,CAACjB,aAAa,CAAC;IACvI;IACA,OAAOiB,kBAAkB;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI/B,yBAAyB,CAACI,SAAS,CAAC+B,8BAA8B,GAAG,UAAUD,OAAO,EAAE;IACpF,IAAIO,aAAa,GAAGP,OAAO,CAACO,aAAa;IACzC,IAAIA,aAAa,EAAE;MACf,IAAIA,aAAa,CAACC,UAAU,EAAE;QAC1B,OAAOD,aAAa,CAACC,UAAU;MACnC,CAAC,MACI;QACD,IAAI,CAAC3B,MAAM,CAACC,OAAO,CAAC,oIAAoI,CAAC;MAC7J;IACJ,CAAC,MACI;MACD,IAAI,CAACD,MAAM,CAACC,OAAO,CAAC,uGAAuG,CAAC;IAChI;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIhB,yBAAyB,CAACI,SAAS,CAACuC,oBAAoB,GAAG,UAAUC,sBAAsB,EAAEC,YAAY,EAAEC,wBAAwB,EAAE;IACjI,OAAOhE,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIiE,YAAY;MAChB,OAAOhE,WAAW,CAAC,IAAI,EAAE,UAAU0B,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACF,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CAACzB,iBAAiB,CAAC6D,6CAA6C,EAAE,IAAI,CAAClC,aAAa,CAAC;YAC/H;YACA,IAAI,CAACH,iBAAiB,CAACsC,eAAe,CAAC9D,iBAAiB,CAAC+D,+CAA+C,EAAE,IAAI,CAACpC,aAAa,CAAC;YAC7H,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACqC,sBAAsB,CAACP,sBAAsB,EAAEC,YAAY,EAAEC,wBAAwB,CAAC,CAAC;UACrH,KAAK,CAAC;YACFC,YAAY,GAAGtC,EAAE,CAACU,IAAI,EAAE;YACxB,OAAO,CAAC,CAAC,CAAC,YAAY,IAAI/B,uBAAuB,CAAC2D,YAAY,EAAE,IAAI,CAACpC,iBAAiB,CAAC,CAAC;QAAC;MAErG,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIX,yBAAyB,CAACI,SAAS,CAAC+C,sBAAsB,GAAG,UAAUP,sBAAsB,EAAEQ,gBAAgB,EAAEN,wBAAwB,EAAE;IACvI,OAAOhE,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIuE,mBAAmB,EAAEtC,MAAM;MAC/B,OAAOhC,WAAW,CAAC,IAAI,EAAE,UAAU0B,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACF,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CAACzB,iBAAiB,CAAC+D,+CAA+C,EAAE,IAAI,CAACpC,aAAa,CAAC;YACjI,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,+BAA+B,EAAE,IAAI,CAACF,aAAa,CAAC;YACxE,IAAI,CAACH,iBAAiB,CAACsC,eAAe,CAAC9D,iBAAiB,CAACmE,+CAA+C,EAAE,IAAI,CAACxC,aAAa,CAAC;YAC7H,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACyC,sBAAsB,CAACH,gBAAgB,EAAEN,wBAAwB,CAAC,CAAC;UACjG,KAAK,CAAC;YACFO,mBAAmB,GAAG5C,EAAE,CAACU,IAAI,EAAE;YAC/BJ,MAAM,GAAG,IAAI,CAACwB,MAAM,CAACiB,MAAM,CAACC,aAAa;YACzC,OAAO,CAAC,CAAC,CAAC,YAAY;cACdC,WAAW,EAAE;gBACTC,QAAQ,EAAE,IAAI,CAACpB,MAAM,CAACC,IAAI,CAACmB,QAAQ;gBACnCC,SAAS,EAAEP,mBAAmB;gBAC9BQ,kBAAkB,EAAE,IAAI,CAACtB,MAAM,CAACC,IAAI,CAACqB;cACzC,CAAC;cACDC,aAAa,EAAE;gBACXC,yBAAyB,EAAE,IAAI,CAACxB,MAAM,CAACiB,MAAM,CAACO,yBAAyB;gBACvEC,oBAAoB,EAAE;cAC1B,CAAC;cACDP,aAAa,EAAE;gBACXQ,cAAc,EAAElD,MAAM,CAACkD,cAAc;gBACrCC,iBAAiB,EAAEnD,MAAM,CAACmD,iBAAiB;gBAC3CC,QAAQ,EAAEpD,MAAM,CAACoD,QAAQ;gBACzBrD,aAAa,EAAE,IAAI,CAACA;cACxB,CAAC;cACDsD,eAAe,EAAE,IAAI,CAACnD,aAAa;cACnCoD,gBAAgB,EAAE,IAAI,CAACC,aAAa;cACpCC,gBAAgB,EAAE,IAAI,CAACC,cAAc;cACrC5B,sBAAsB,EAAEA,sBAAsB;cAC9C6B,WAAW,EAAE;gBACTC,GAAG,EAAE/E,gBAAgB,CAACgF,QAAQ;gBAC9B/E,OAAO,EAAEA,OAAO;gBAChBgF,GAAG,EAAE1F,SAAS,CAACoC,YAAY;gBAC3BuD,EAAE,EAAE3F,SAAS,CAACoC;cAClB,CAAC;cACDwD,SAAS,EAAE,IAAI,CAACvC,MAAM,CAACuC;YAC3B,CAAC,CAAC;QAAC;MAEnB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACI9E,yBAAyB,CAACI,SAAS,CAAC2E,+BAA+B,GAAG,UAAUC,YAAY,EAAEC,eAAe,EAAEC,oBAAoB,EAAE;IACjI,IAAI,CAACnE,MAAM,CAACC,OAAO,CAAC,wCAAwC,EAAEkE,oBAAoB,CAAC;IACnF,IAAI,CAACF,YAAY,CAACG,KAAK,EAAE;MACrB,MAAMtF,gBAAgB,CAACuF,kCAAkC,EAAE;IAC/D;IACA,IAAIC,gBAAgB,GAAGvF,oBAAoB,CAACwF,0BAA0B,CAAC,IAAI,CAACrE,aAAa,EAAE+D,YAAY,CAACG,KAAK,CAAC;IAC9G,IAAI,CAACE,gBAAgB,EAAE;MACnB,MAAMxF,gBAAgB,CAAC0F,6BAA6B,EAAE;IAC1D;IACA,IAAIF,gBAAgB,CAACJ,eAAe,KAAKA,eAAe,EAAE;MACtD,MAAMpF,gBAAgB,CAAC2F,uCAAuC,EAAE;IACpE;IACA,IAAI,CAACzE,MAAM,CAACC,OAAO,CAAC,2BAA2B,EAAEkE,oBAAoB,CAAC;IACtE,OAAOF,YAAY,CAACG,KAAK;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;EACInF,yBAAyB,CAACI,SAAS,CAACmD,sBAAsB,GAAG,UAAUH,gBAAgB,EAAEN,wBAAwB,EAAE;IAC/G,IAAIrC,EAAE;IACN,OAAO3B,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI2G,uBAAuB,EAAEC,gBAAgB,EAAEC,aAAa,EAAEC,cAAc;MAC5E,OAAO7G,WAAW,CAAC,IAAI,EAAE,UAAU8G,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACnF,KAAK;UACZ,KAAK,CAAC;YACF,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CAACzB,iBAAiB,CAACmE,+CAA+C,EAAE,IAAI,CAACxC,aAAa,CAAC;YACjI,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,+BAA+B,EAAE,IAAI,CAACF,aAAa,CAAC;YACxE2E,uBAAuB,GAAG,CAAChF,EAAE,GAAG,IAAI,CAACE,iBAAiB,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACqF,gBAAgB,CAAC3G,iBAAiB,CAACmE,+CAA+C,EAAE,IAAI,CAACxC,aAAa,CAAC;YACvM4E,gBAAgB,GAAG;cACfK,YAAY,EAAE,IAAI,CAACxD,MAAM,CAACC,IAAI,CAACuD,YAAY;cAC3CC,gBAAgB,EAAE,IAAI,CAACzD,MAAM,CAACC,IAAI,CAACwD,gBAAgB;cACnDC,sBAAsB,EAAE,IAAI,CAAC1D,MAAM,CAACC,IAAI,CAACyD,sBAAsB;cAC/DC,iBAAiB,EAAE,IAAI,CAAC3D,MAAM,CAACC,IAAI,CAAC0D,iBAAiB;cACrDC,0BAA0B,EAAE,IAAI,CAAC5D,MAAM,CAACC,IAAI,CAAC2D;YACjD,CAAC;YACDR,aAAa,GAAGvC,gBAAgB,GAAGA,gBAAgB,GAAG,IAAI,CAACb,MAAM,CAACC,IAAI,CAACoB,SAAS;YAChFgC,cAAc,GAAGvG,SAAS,CAAC+G,iBAAiB,CAACT,aAAa,EAAE7C,wBAAwB,IAAI,IAAI,CAACP,MAAM,CAACC,IAAI,CAAC6D,iBAAiB,CAAC;YAC3H,IAAI,CAACtF,MAAM,CAACC,OAAO,CAAC,yDAAyD,EAAE,IAAI,CAACF,aAAa,CAAC;YAClG,IAAI,CAACH,iBAAiB,CAACsC,eAAe,CAAC9D,iBAAiB,CAACmH,wCAAwC,EAAE,IAAI,CAACxF,aAAa,CAAC;YACtH,OAAO,CAAC,CAAC,CAAC,WAAWxB,gBAAgB,CAACiH,wBAAwB,CAACX,cAAc,EAAE,IAAI,CAACrD,MAAM,CAACiB,MAAM,CAACc,aAAa,EAAE,IAAI,CAACE,cAAc,EAAEkB,gBAAgB,EAAE,IAAI,CAAC3E,MAAM,EAAE,IAAI,CAACJ,iBAAiB,EAAE,IAAI,CAACG,aAAa,CAAC,CACvM0F,IAAI,CAAC,UAAUC,MAAM,EAAE;cACxBhB,uBAAuB,CAACiB,cAAc,CAAC;gBACnCC,OAAO,EAAE;cACb,CAAC,CAAC;cACF,OAAOF,MAAM;YACjB,CAAC,CAAC,CACGG,KAAK,CAAC,UAAUC,KAAK,EAAE;cACxBpB,uBAAuB,CAACiB,cAAc,CAAC;gBACnCI,SAAS,EAAED,KAAK,CAACC,SAAS;gBAC1BC,YAAY,EAAEF,KAAK,CAACG,QAAQ;gBAC5BL,OAAO,EAAE;cACb,CAAC,CAAC;cACF,MAAME,KAAK;YACf,CAAC,CAAC,CAAC;UACX,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,YAAYhB,EAAE,CAAC1E,IAAI,EAAE,CAAC;QAAC;MAEjD,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;EACInB,yBAAyB,CAACI,SAAS,CAAC6G,8BAA8B,GAAG,UAAU3G,OAAO,EAAE2E,eAAe,EAAE;IACrG,OAAOnG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAIsC,WAAW,EAAE8F,YAAY,EAAE/B,KAAK,EAAEgC,gBAAgB,EAAE1G,EAAE,EAAEyB,OAAO,EAAEkF,eAAe;MACpF,OAAOrI,WAAW,CAAC,IAAI,EAAE,UAAU8G,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACnF,KAAK;UACZ,KAAK,CAAC;YACF,IAAI,CAACC,iBAAiB,CAACC,mBAAmB,CAACzB,iBAAiB,CAACkI,uDAAuD,EAAE,IAAI,CAACvG,aAAa,CAAC;YACzI,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,uCAAuC,EAAE,IAAI,CAACF,aAAa,CAAC;YAChFM,WAAW,GAAG,IAAI,CAACkG,cAAc,CAAChH,OAAO,CAACc,WAAW,CAAC;YACtD8F,YAAY,GAAG;cACXjC,eAAe,EAAEA;YACrB,CAAC;YACDE,KAAK,GAAG1F,aAAa,CAAC8H,eAAe,CAAC,IAAI,CAACtG,aAAa,EAAGX,OAAO,IAAIA,OAAO,CAAC6E,KAAK,IAAKjG,SAAS,CAACoC,YAAY,EAAE4F,YAAY,CAAC;YAC7H,IAAI,CAACvG,iBAAiB,CAACsC,eAAe,CAAC9D,iBAAiB,CAACqI,qBAAqB,EAAE,IAAI,CAAC1G,aAAa,CAAC;YACnGL,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACT,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACgH,qBAAqB,CAACnH,OAAO,CAAC,CAAC;UAC7D,KAAK,CAAC;YACF6G,gBAAgB,GAAGnI,QAAQ,CAACkB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAClB,QAAQ,CAACkB,KAAK,CAAC,KAAK,CAAC,EAAEO,EAAE,CAACiH,MAAM,CAAC,CAAC7B,EAAE,CAAC1E,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;cAAEC,WAAW,EAAEA,WAAW;cAAE+D,KAAK,EAAEA,KAAK;cAAEwC,KAAK,EAAErH,OAAO,CAACqH,KAAK,IAAI,IAAI,CAAC1G,aAAa,CAACe,aAAa,EAAE;cAAE4F,YAAY,EAAErI,YAAY,CAACsI;YAAS,CAAC,CAAC,CAAC;YACxO3F,OAAO,GAAG5B,OAAO,CAAC4B,OAAO,IAAI,IAAI,CAACsC,cAAc,CAACsD,gBAAgB,EAAE;YACnE,IAAI5F,OAAO,EAAE;cACT,IAAI,CAACnB,MAAM,CAACC,OAAO,CAAC,mCAAmC,EAAE,IAAI,CAACF,aAAa,CAAC;cAC5E,IAAI,CAACC,MAAM,CAACgH,UAAU,CAAC,qCAAqC,GAAG7F,OAAO,CAAC8F,aAAa,EAAE,IAAI,CAAClH,aAAa,CAAC;cACzGqG,gBAAgB,CAACjF,OAAO,GAAGA,OAAO;YACtC;YACA;YACA,IAAI1C,WAAW,CAACyI,OAAO,CAACd,gBAAgB,CAACe,SAAS,CAAC,IAAI,CAAChG,OAAO,EAAE;cAC7DkF,eAAe,GAAG,IAAI,CAAC5C,cAAc,CAAC2D,kBAAkB,EAAE;cAC1D,IAAIf,eAAe,EAAE;gBACjBD,gBAAgB,CAACe,SAAS,GAAGd,eAAe;cAChD;YACJ;YACA,OAAO,CAAC,CAAC,CAAC,YAAYD,gBAAgB,CAAC;QAAC;MAEpD,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD,OAAOnH,yBAAyB;AACpC,CAAC,CAACN,qBAAqB,CAAE;AAEzB,SAASM,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}