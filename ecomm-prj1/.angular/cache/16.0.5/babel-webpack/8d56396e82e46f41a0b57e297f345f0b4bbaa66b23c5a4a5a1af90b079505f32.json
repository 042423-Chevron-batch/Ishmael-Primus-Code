{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\nvar BaseClient = /** @class */function () {\n  function BaseClient(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set the NetworkManager\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n  BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\n    var headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\n          break;\n      }\n    }\n    return headers;\n  };\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n  BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n          case 1:\n            response = _a.sent();\n            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n              // Telemetry data successfully logged by server, clear Telemetry cache\n              this.config.serverTelemetryManager.clearTelemetryCache();\n            }\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n  BaseClient.prototype.updateAuthority = function (updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n    this.authority = updatedAuthority;\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  BaseClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return BaseClient;\n}();\nexport { BaseClient };","map":{"version":3,"names":["__awaiter","__generator","buildClientConfiguration","NetworkManager","Logger","HeaderNames","Constants","name","version","ClientAuthError","CcsCredentialType","buildClientInfoFromHomeAccountId","RequestParameterBuilder","BaseClient","configuration","performanceClient","config","logger","loggerOptions","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","networkManager","serverTelemetryManager","authority","authOptions","prototype","createTokenRequestHeaders","ccsCred","headers","CONTENT_TYPE","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","HOME_ACCOUNT_ID","clientInfo","credential","CCS_HEADER","uid","utid","e","verbose","UPN","executePostToTokenEndpoint","tokenEndpoint","queryString","thumbprint","response","_a","label","sendPostRequest","body","sent","status","clearTelemetryCache","updateAuthority","updatedAuthority","discoveryComplete","createEndpointDiscoveryIncompleteError","createTokenQueryParameters","request","parameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/client/BaseClient.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\r\nvar BaseClient = /** @class */ (function () {\r\n    function BaseClient(configuration, performanceClient) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n        // Set the NetworkManager\r\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n        // set performance telemetry client\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\r\n        var headers = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\r\n                            // Telemetry data successfully logged by server, clear Telemetry cache\r\n                            this.config.serverTelemetryManager.clearTelemetryCache();\r\n                        }\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    BaseClient.prototype.updateAuthority = function (updatedAuthority) {\r\n        if (!updatedAuthority.discoveryComplete()) {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\r\n        }\r\n        this.authority = updatedAuthority;\r\n    };\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    BaseClient.prototype.createTokenQueryParameters = function (request) {\r\n        var parameterBuilder = new RequestParameterBuilder();\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n        return parameterBuilder.createQueryString();\r\n    };\r\n    return BaseClient;\r\n}());\n\nexport { BaseClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}