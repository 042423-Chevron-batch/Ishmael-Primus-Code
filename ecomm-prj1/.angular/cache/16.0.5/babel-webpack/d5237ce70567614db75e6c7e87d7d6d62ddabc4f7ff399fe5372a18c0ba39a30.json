{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, PerformanceEvents, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RedirectClient = /** @class */function (_super) {\n  __extends(RedirectClient, _super);\n  function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\n    _this.nativeStorage = nativeStorageImpl;\n    return _this;\n  }\n  /**\r\n   * Redirects the page to the /authorize endpoint of the IDP\r\n   * @param request\r\n   */\n  RedirectClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\n          case 1:\n            validRequest = _a.sent();\n            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\n            handleBackButton = function (event) {\n              // Clear temporary cache if the back button is clicked during the redirect flow.\n              if (event.persisted) {\n                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n                _this.browserStorage.cleanRequestByState(validRequest.state);\n                _this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\n              }\n            };\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 7,, 8]);\n            // Create auth code request and generate PKCE params\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\n            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];\n          case 3:\n            authCodeRequest = _a.sent();\n            // Initialize the client\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\n          case 4:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), {\n              nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            }))];\n          case 5:\n            navigateUrl = _a.sent();\n            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage);\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n            return [4 /*yield*/, interactionHandler.initiateAuthRequest(navigateUrl, {\n              navigationClient: this.navigationClient,\n              redirectTimeout: this.config.system.redirectNavigationTimeout,\n              redirectStartPage: redirectStartPage,\n              onRedirectNavigate: request.onRedirectNavigate\n            })];\n          case 6:\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return [2 /*return*/, _a.sent()];\n          case 7:\n            e_1 = _a.sent();\n            if (e_1 instanceof AuthError) {\n              e_1.setCorrelationId(this.correlationId);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            serverTelemetryManager.cacheFailedRequest(e_1);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e_1;\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Checks if navigateToLoginRequestUrl is set, and:\r\n   * - if true, performs logic to cache and navigate\r\n   * - if false, handles hash string and parses response\r\n   * @param hash\r\n   */\n  RedirectClient.prototype.handleRedirectPromise = function (hash) {\n    return __awaiter(this, void 0, void 0, function () {\n      var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n              this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n              return [2 /*return*/, null];\n            }\n            responseHash = this.getRedirectResponseHash(hash || window.location.hash);\n            if (!responseHash) {\n              // Not a recognized server response hash or hash not associated with a redirect request\n              this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2 /*return*/, null];\n            }\n            state = void 0;\n            try {\n              serverParams = UrlString.getDeserializedHash(responseHash);\n              state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\n              this.logger.verbose(\"State extracted from hash\");\n            } catch (e) {\n              this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\n              this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n              return [2 /*return*/, null];\n            }\n            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\n            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\n            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\n            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 3];\n            // We are on the page we need to navigate to - handle hash\n            this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\n            return [4 /*yield*/, this.handleHash(responseHash, state, serverTelemetryManager)];\n          case 2:\n            handleHashResult = _a.sent();\n            if (loginRequestUrl.indexOf(\"#\") > -1) {\n              // Replace current hash with non-msal hash, if present\n              BrowserUtils.replaceHash(loginRequestUrl);\n            }\n            return [2 /*return*/, handleHashResult];\n          case 3:\n            if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 4];\n            this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\n            return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\n          case 4:\n            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3 /*break*/, 9];\n            /*\r\n             * Returned from authority using redirect - need to perform navigation before processing response\r\n             * Cache the hash to be retrieved after the next redirect\r\n             */\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\n            navigationOptions = {\n              apiId: ApiId.handleRedirectPromise,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: true\n            };\n            processHashOnRedirect = true;\n            if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3 /*break*/, 6];\n            homepage = BrowserUtils.getHomepage();\n            // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n            this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n            return [4 /*yield*/, this.navigationClient.navigateInternal(homepage, navigationOptions)];\n          case 5:\n            processHashOnRedirect = _a.sent();\n            return [3 /*break*/, 8];\n          case 6:\n            // Navigate to page that initiated the redirect request\n            this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\n            return [4 /*yield*/, this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\n          case 7:\n            processHashOnRedirect = _a.sent();\n            _a.label = 8;\n          case 8:\n            // If navigateInternal implementation returns false, handle the hash now\n            if (!processHashOnRedirect) {\n              return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\n            }\n            _a.label = 9;\n          case 9:\n            return [2 /*return*/, null];\n          case 10:\n            e_2 = _a.sent();\n            if (e_2 instanceof AuthError) {\n              e_2.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_2);\n            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\n            throw e_2;\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets the response hash for a redirect request\r\n   * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n   * @param hash\r\n   */\n  RedirectClient.prototype.getRedirectResponseHash = function (hash) {\n    this.logger.verbose(\"getRedirectResponseHash called\");\n    // Get current location hash from window or cache.\n    var isResponseHash = UrlString.hashContainsKnownProperties(hash);\n    if (isResponseHash) {\n      BrowserUtils.clearHash(window);\n      this.logger.verbose(\"Hash contains known properties, returning response hash\");\n      return hash;\n    }\n    var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n    return cachedHash;\n  };\n  /**\r\n   * Checks if hash exists and handles in window.\r\n   * @param hash\r\n   * @param state\r\n   */\n  RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\n            this.logger.verbose(\"handleHash called, retrieved cached request\");\n            serverParams = UrlString.getDeserializedHash(hash);\n            if (serverParams.accountId) {\n              this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n              if (!this.nativeMessageHandler) {\n                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\n              }\n              nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\n              userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\n              return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), {\n                state: userRequestState,\n                prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\n              })).finally(function () {\n                _this.browserStorage.cleanRequestByState(state);\n              })];\n            }\n            currentAuthority = this.browserStorage.getCachedAuthority(state);\n            if (!currentAuthority) {\n              throw BrowserAuthError.createNoCachedAuthorityError();\n            }\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\n          case 1:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\n            return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param logoutRequest\r\n   */\n  RedirectClient.prototype.logout = function (logoutRequest) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.verbose(\"logoutRedirect called\");\n            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 10,, 11]);\n            this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\n            // Clear cache on logout\n            return [4 /*yield*/, this.clearCacheOnLogout(validLogoutRequest.account)];\n          case 2:\n            // Clear cache on logout\n            _a.sent();\n            navigationOptions = {\n              apiId: ApiId.logout,\n              timeout: this.config.system.redirectNavigationTimeout,\n              noHistory: false\n            };\n            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\n            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\n          case 3:\n            authClient = _a.sent();\n            this.logger.verbose(\"Auth code client created\");\n            logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\n            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3 /*break*/, 7];\n            navigate = logoutRequest.onRedirectNavigate(logoutUri);\n            if (!(navigate !== false)) return [3 /*break*/, 5];\n            this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n            return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n          case 4:\n            _a.sent();\n            return [2 /*return*/];\n          case 5:\n            // Ensure interaction is not in progress\n            this.browserStorage.setInteractionInProgress(false);\n            this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            // Ensure interaction is in progress\n            if (!this.browserStorage.getInteractionInProgress()) {\n              this.browserStorage.setInteractionInProgress(true);\n            }\n            return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\n          case 8:\n            _a.sent();\n            return [2 /*return*/];\n          case 9:\n            return [3 /*break*/, 11];\n          case 10:\n            e_3 = _a.sent();\n            if (e_3 instanceof AuthError) {\n              e_3.setCorrelationId(this.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            throw e_3;\n          case 11:\n            this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Use to get the redirectStartPage either from request or use current window\r\n   * @param requestStartPage\r\n   */\n  RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\n    var redirectStartPage = requestStartPage || window.location.href;\n    return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\n  };\n  return RedirectClient;\n}(StandardInteractionClient);\nexport { RedirectClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","UrlString","AuthError","PerformanceEvents","Constants","ThrottlingUtils","ProtocolUtils","StandardInteractionClient","TemporaryCacheKeys","ApiId","InteractionType","RedirectHandler","BrowserUtils","EventType","BrowserAuthError","NativeInteractionClient","NativeMessageHandler","RedirectClient","_super","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","_this","call","nativeStorage","prototype","acquireToken","request","validRequest","serverTelemetryManager","handleBackButton","authCodeRequest","authClient","interactionHandler","navigateUrl","redirectStartPage","e_1","_a","label","setPreQueueTime","StandardInteractionClientInitializeAuthorizationRequest","initializeAuthorizationRequest","Redirect","sent","browserStorage","updateCacheEntries","state","nonce","authority","loginHint","EMPTY_STRING","account","initializeServerTelemetryManager","acquireTokenRedirect","event","persisted","verbose","cleanRequestByState","emitEvent","RESTORE_FROM_BFCACHE","trys","push","StandardInteractionClientInitializeAuthorizationCodeRequest","initializeAuthorizationCodeRequest","StandardInteractionClientCreateAuthCodeClient","createAuthCodeClient","azureCloudOptions","getAuthCodeUrl","nativeBroker","isNativeAvailable","authenticationScheme","getRedirectStartPage","verbosePii","window","addEventListener","initiateAuthRequest","redirectTimeout","system","redirectNavigationTimeout","onRedirectNavigate","setCorrelationId","removeEventListener","cacheFailedRequest","handleRedirectPromise","hash","responseHash","serverParams","loginRequestUrl","loginRequestUrlNormalized","currentUrlNormalized","handleHashResult","navigationOptions","processHashOnRedirect","homepage","e_2","isInteractionInProgress","info","getRedirectResponseHash","location","cleanRequestByInteractionType","getDeserializedHash","validateAndExtractStateFromHash","e","getTemporaryCache","ORIGIN_URI","removeHashFromUrl","href","auth","navigateToLoginRequestUrl","handleHash","indexOf","replaceHash","isInIframe","allowRedirectInIframe","setTemporaryCache","URL_HASH","apiId","timeout","noHistory","getHomepage","warning","navigateInternal","isResponseHash","hashContainsKnownProperties","clearHash","cachedHash","removeItem","generateCacheKey","cachedRequest","nativeInteractionClient","userRequestState","currentAuthority","getCachedRequest","accountId","createNativeConnectionNotEstablishedError","acquireTokenPopup","parseRequestState","prompt","undefined","finally","getCachedAuthority","createNoCachedAuthorityError","removeThrottle","clientId","handleCodeResponseFromHash","networkClient","logout","logoutRequest","validLogoutRequest","logoutUri","navigate","e_3","initializeLogoutRequest","LOGOUT_START","clearCacheOnLogout","getLogoutUri","LOGOUT_SUCCESS","getInteractionInProgress","setInteractionInProgress","navigateExternal","LOGOUT_FAILURE","LOGOUT_END","requestStartPage","getAbsoluteUrl","getCurrentUri"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { UrlString, AuthError, PerformanceEvents, Constants, ThrottlingUtils, ProtocolUtils } from '@azure/msal-common';\nimport { StandardInteractionClient } from './StandardInteractionClient.js';\nimport { TemporaryCacheKeys, ApiId, InteractionType } from '../utils/BrowserConstants.js';\nimport { RedirectHandler } from '../interaction_handler/RedirectHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeInteractionClient } from './NativeInteractionClient.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar RedirectClient = /** @class */ (function (_super) {\r\n    __extends(RedirectClient, _super);\r\n    function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\r\n        var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;\r\n        _this.nativeStorage = nativeStorageImpl;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Redirects the page to the /authorize endpoint of the IDP\r\n     * @param request\r\n     */\r\n    RedirectClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.initializeAuthorizationRequest(request, InteractionType.Redirect)];\r\n                    case 1:\r\n                        validRequest = _a.sent();\r\n                        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenRedirect);\r\n                        handleBackButton = function (event) {\r\n                            // Clear temporary cache if the back button is clicked during the redirect flow.\r\n                            if (event.persisted) {\r\n                                _this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\r\n                                _this.browserStorage.cleanRequestByState(validRequest.state);\r\n                                _this.eventHandler.emitEvent(EventType.RESTORE_FROM_BFCACHE, InteractionType.Redirect);\r\n                            }\r\n                        };\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 7, , 8]);\r\n                        // Create auth code request and generate PKCE params\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);\r\n                        return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];\r\n                    case 3:\r\n                        authCodeRequest = _a.sent();\r\n                        // Initialize the client\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];\r\n                    case 4:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n                        return [4 /*yield*/, authClient.getAuthCodeUrl(__assign(__assign({}, validRequest), { nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme) }))];\r\n                    case 5:\r\n                        navigateUrl = _a.sent();\r\n                        redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\r\n                        this.logger.verbosePii(\"Redirect start page: \" + redirectStartPage);\r\n                        // Clear temporary cache if the back button is clicked during the redirect flow.\r\n                        window.addEventListener(\"pageshow\", handleBackButton);\r\n                        return [4 /*yield*/, interactionHandler.initiateAuthRequest(navigateUrl, {\r\n                                navigationClient: this.navigationClient,\r\n                                redirectTimeout: this.config.system.redirectNavigationTimeout,\r\n                                redirectStartPage: redirectStartPage,\r\n                                onRedirectNavigate: request.onRedirectNavigate\r\n                            })];\r\n                    case 6: \r\n                    // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\r\n                    return [2 /*return*/, _a.sent()];\r\n                    case 7:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof AuthError) {\r\n                            e_1.setCorrelationId(this.correlationId);\r\n                        }\r\n                        window.removeEventListener(\"pageshow\", handleBackButton);\r\n                        serverTelemetryManager.cacheFailedRequest(e_1);\r\n                        this.browserStorage.cleanRequestByState(validRequest.state);\r\n                        throw e_1;\r\n                    case 8: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks if navigateToLoginRequestUrl is set, and:\r\n     * - if true, performs logic to cache and navigate\r\n     * - if false, handles hash string and parses response\r\n     * @param hash\r\n     */\r\n    RedirectClient.prototype.handleRedirectPromise = function (hash) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.handleRedirectPromise);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 10, , 11]);\r\n                        if (!this.browserStorage.isInteractionInProgress(true)) {\r\n                            this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        responseHash = this.getRedirectResponseHash(hash || window.location.hash);\r\n                        if (!responseHash) {\r\n                            // Not a recognized server response hash or hash not associated with a redirect request\r\n                            this.logger.info(\"handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.\");\r\n                            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        state = void 0;\r\n                        try {\r\n                            serverParams = UrlString.getDeserializedHash(responseHash);\r\n                            state = this.validateAndExtractStateFromHash(serverParams, InteractionType.Redirect);\r\n                            this.logger.verbose(\"State extracted from hash\");\r\n                        }\r\n                        catch (e) {\r\n                            this.logger.info(\"handleRedirectPromise was unable to extract state due to: \" + e);\r\n                            this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;\r\n                        loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);\r\n                        currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);\r\n                        if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 3];\r\n                        // We are on the page we need to navigate to - handle hash\r\n                        this.logger.verbose(\"Current page is loginRequestUrl, handling hash\");\r\n                        return [4 /*yield*/, this.handleHash(responseHash, state, serverTelemetryManager)];\r\n                    case 2:\r\n                        handleHashResult = _a.sent();\r\n                        if (loginRequestUrl.indexOf(\"#\") > -1) {\r\n                            // Replace current hash with non-msal hash, if present\r\n                            BrowserUtils.replaceHash(loginRequestUrl);\r\n                        }\r\n                        return [2 /*return*/, handleHashResult];\r\n                    case 3:\r\n                        if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 4];\r\n                        this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling hash\");\r\n                        return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\r\n                    case 4:\r\n                        if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3 /*break*/, 9];\r\n                        /*\r\n                         * Returned from authority using redirect - need to perform navigation before processing response\r\n                         * Cache the hash to be retrieved after the next redirect\r\n                         */\r\n                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);\r\n                        navigationOptions = {\r\n                            apiId: ApiId.handleRedirectPromise,\r\n                            timeout: this.config.system.redirectNavigationTimeout,\r\n                            noHistory: true\r\n                        };\r\n                        processHashOnRedirect = true;\r\n                        if (!(!loginRequestUrl || loginRequestUrl === \"null\")) return [3 /*break*/, 6];\r\n                        homepage = BrowserUtils.getHomepage();\r\n                        // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\r\n                        this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);\r\n                        this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\r\n                        return [4 /*yield*/, this.navigationClient.navigateInternal(homepage, navigationOptions)];\r\n                    case 5:\r\n                        processHashOnRedirect = _a.sent();\r\n                        return [3 /*break*/, 8];\r\n                    case 6:\r\n                        // Navigate to page that initiated the redirect request\r\n                        this.logger.verbose(\"Navigating to loginRequestUrl: \" + loginRequestUrl);\r\n                        return [4 /*yield*/, this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];\r\n                    case 7:\r\n                        processHashOnRedirect = _a.sent();\r\n                        _a.label = 8;\r\n                    case 8:\r\n                        // If navigateInternal implementation returns false, handle the hash now\r\n                        if (!processHashOnRedirect) {\r\n                            return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];\r\n                        }\r\n                        _a.label = 9;\r\n                    case 9: return [2 /*return*/, null];\r\n                    case 10:\r\n                        e_2 = _a.sent();\r\n                        if (e_2 instanceof AuthError) {\r\n                            e_2.setCorrelationId(this.correlationId);\r\n                        }\r\n                        serverTelemetryManager.cacheFailedRequest(e_2);\r\n                        this.browserStorage.cleanRequestByInteractionType(InteractionType.Redirect);\r\n                        throw e_2;\r\n                    case 11: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Gets the response hash for a redirect request\r\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n     * @param hash\r\n     */\r\n    RedirectClient.prototype.getRedirectResponseHash = function (hash) {\r\n        this.logger.verbose(\"getRedirectResponseHash called\");\r\n        // Get current location hash from window or cache.\r\n        var isResponseHash = UrlString.hashContainsKnownProperties(hash);\r\n        if (isResponseHash) {\r\n            BrowserUtils.clearHash(window);\r\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\r\n            return hash;\r\n        }\r\n        var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n        this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\r\n        return cachedHash;\r\n    };\r\n    /**\r\n     * Checks if hash exists and handles in window.\r\n     * @param hash\r\n     * @param state\r\n     */\r\n    RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);\r\n                        this.logger.verbose(\"handleHash called, retrieved cached request\");\r\n                        serverParams = UrlString.getDeserializedHash(hash);\r\n                        if (serverParams.accountId) {\r\n                            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\r\n                            if (!this.nativeMessageHandler) {\r\n                                throw BrowserAuthError.createNativeConnectionNotEstablishedError();\r\n                            }\r\n                            nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\r\n                            userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;\r\n                            return [2 /*return*/, nativeInteractionClient.acquireToken(__assign(__assign({}, cachedRequest), { state: userRequestState, prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently\r\n                                 })).finally(function () {\r\n                                    _this.browserStorage.cleanRequestByState(state);\r\n                                })];\r\n                        }\r\n                        currentAuthority = this.browserStorage.getCachedAuthority(state);\r\n                        if (!currentAuthority) {\r\n                            throw BrowserAuthError.createNoCachedAuthorityError();\r\n                        }\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];\r\n                    case 1:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\r\n                        interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);\r\n                        return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];\r\n                    case 2: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */\r\n    RedirectClient.prototype.logout = function (logoutRequest) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.logger.verbose(\"logoutRedirect called\");\r\n                        validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\r\n                        serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.logout);\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 10, , 11]);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_START, InteractionType.Redirect, logoutRequest);\r\n                        // Clear cache on logout\r\n                        return [4 /*yield*/, this.clearCacheOnLogout(validLogoutRequest.account)];\r\n                    case 2:\r\n                        // Clear cache on logout\r\n                        _a.sent();\r\n                        navigationOptions = {\r\n                            apiId: ApiId.logout,\r\n                            timeout: this.config.system.redirectNavigationTimeout,\r\n                            noHistory: false\r\n                        };\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);\r\n                        return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];\r\n                    case 3:\r\n                        authClient = _a.sent();\r\n                        this.logger.verbose(\"Auth code client created\");\r\n                        logoutUri = authClient.getLogoutUri(validLogoutRequest);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_SUCCESS, InteractionType.Redirect, validLogoutRequest);\r\n                        if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\")) return [3 /*break*/, 7];\r\n                        navigate = logoutRequest.onRedirectNavigate(logoutUri);\r\n                        if (!(navigate !== false)) return [3 /*break*/, 5];\r\n                        this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\r\n                        // Ensure interaction is in progress\r\n                        if (!this.browserStorage.getInteractionInProgress()) {\r\n                            this.browserStorage.setInteractionInProgress(true);\r\n                        }\r\n                        return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 5:\r\n                        // Ensure interaction is not in progress\r\n                        this.browserStorage.setInteractionInProgress(false);\r\n                        this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\r\n                        _a.label = 6;\r\n                    case 6: return [3 /*break*/, 9];\r\n                    case 7:\r\n                        // Ensure interaction is in progress\r\n                        if (!this.browserStorage.getInteractionInProgress()) {\r\n                            this.browserStorage.setInteractionInProgress(true);\r\n                        }\r\n                        return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];\r\n                    case 8:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 9: return [3 /*break*/, 11];\r\n                    case 10:\r\n                        e_3 = _a.sent();\r\n                        if (e_3 instanceof AuthError) {\r\n                            e_3.setCorrelationId(this.correlationId);\r\n                        }\r\n                        serverTelemetryManager.cacheFailedRequest(e_3);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_FAILURE, InteractionType.Redirect, null, e_3);\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n                        throw e_3;\r\n                    case 11:\r\n                        this.eventHandler.emitEvent(EventType.LOGOUT_END, InteractionType.Redirect);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use to get the redirectStartPage either from request or use current window\r\n     * @param requestStartPage\r\n     */\r\n    RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {\r\n        var redirectStartPage = requestStartPage || window.location.href;\r\n        return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());\r\n    };\r\n    return RedirectClient;\r\n}(StandardInteractionClient));\n\nexport { RedirectClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}