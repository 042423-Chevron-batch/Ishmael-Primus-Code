{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from './AuthorityMetadata.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { AzureCloudInstance } from './AuthorityOptions.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\nvar Authority = /** @class */function () {\n  function Authority(authority, networkInterface, cacheManager, authorityOptions, proxyUrl) {\n    this.canonicalAuthority = authority;\n    this._canonicalAuthority.validateAsUri();\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscovery = new RegionDiscovery(networkInterface);\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n    this.proxyUrl = proxyUrl || Constants.EMPTY_STRING;\n  }\n  Object.defineProperty(Authority.prototype, \"authorityType\", {\n    // See above for AuthorityType\n    get: function () {\n      var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n      if (pathSegments.length) {\n        switch (pathSegments[0].toLowerCase()) {\n          case Constants.ADFS:\n            return AuthorityType.Adfs;\n          case Constants.DSTS:\n            return AuthorityType.Dsts;\n        }\n      }\n      return AuthorityType.Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"protocolMode\", {\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\n    get: function () {\n      return this.authorityOptions.protocolMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"options\", {\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\n    get: function () {\n      return this.authorityOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this._canonicalAuthority.urlString;\n    },\n    /**\r\n     * Sets canonical authority.\r\n     */\n    set: function (url) {\n      this._canonicalAuthority = new UrlString(url);\n      this._canonicalAuthority.validateAsUri();\n      this._canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\n    /**\r\n     * Get authority components.\r\n     */\n    get: function () {\n      if (!this._canonicalAuthorityUrlComponents) {\n        this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n      }\n      return this._canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tenant\", {\n    /**\r\n     * Get tenant for authority.\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.authorization_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        // ROPC policies may not have end_session_endpoint set\n        if (!this.metadata.end_session_endpoint) {\n          throw ClientAuthError.createLogoutNotSupportedError();\n        }\n        var endpoint = this.replacePath(this.metadata.end_session_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\n    /**\r\n     * OAuth issuer for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.issuer);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"jwksUri\", {\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.jwks_uri);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n  Authority.prototype.replaceTenant = function (urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  };\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n  Authority.prototype.replacePath = function (urlString) {\n    var endpoint = urlString;\n    var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\n    var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach(function (currentPart, index) {\n      var cachedPart = cachedAuthorityParts[index];\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\n      }\n    });\n    return endpoint;\n  };\n  Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\n    get: function () {\n      if (this.authorityType === AuthorityType.Adfs || this.authorityType === AuthorityType.Dsts || this.protocolMode === ProtocolMode.OIDC) {\n        return this.canonicalAuthority + \".well-known/openid-configuration\";\n      }\n      return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Boolean that returns whethr or not tenant discovery has been completed.\r\n   */\n  Authority.prototype.discoveryComplete = function () {\n    return !!this.metadata;\n  };\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n  Authority.prototype.resolveEndpointsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n            if (!metadataEntity) {\n              metadataEntity = new AuthorityMetadataEntity();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n            return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];\n          case 1:\n            cloudDiscoverySource = _a.sent();\n            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n            return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];\n          case 2:\n            endpointSource = _a.sent();\n            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n              // Reset the expiration time unless both values came from a successful cache lookup\n              metadataEntity.resetExpiresAt();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n            this.metadata = metadataEntity;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n  Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, harcodedMetadata;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            metadata = this.getEndpointMetadataFromConfig();\n            if (metadata) {\n              metadataEntity.updateEndpointMetadata(metadata, false);\n              return [2 /*return*/, AuthorityMetadataSource.CONFIG];\n            }\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2 /*return*/, AuthorityMetadataSource.CACHE];\n            }\n            harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];\n          case 1:\n            metadata = _c.sent();\n            if (!metadata) return [3 /*break*/, 4];\n            if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.updateMetadataWithRegionalInformation(metadata)];\n          case 2:\n            metadata = _c.sent();\n            _c.label = 3;\n          case 3:\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return [2 /*return*/, AuthorityMetadataSource.NETWORK];\n          case 4:\n            if (!(harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache)) return [3 /*break*/, 7];\n            if (!((_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion)) return [3 /*break*/, 6];\n            return [4 /*yield*/, this.updateMetadataWithRegionalInformation(harcodedMetadata)];\n          case 5:\n            harcodedMetadata = _c.sent();\n            _c.label = 6;\n          case 6:\n            metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\n            return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];\n          case 7:\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n      });\n    });\n  };\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached\r\n   * authority metadata can be used for the requested authority. Protects against same domain different\r\n   * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n  Authority.prototype.isAuthoritySameType = function (metadataEntity) {\n    var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\n    var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  };\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n  Authority.prototype.getEndpointMetadataFromConfig = function () {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n  Authority.prototype.getEndpointMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            options = {};\n            if (this.proxyUrl) {\n              options.proxyUrl = this.proxyUrl;\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];\n          case 2:\n            response = _a.sent();\n            return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];\n          case 3:\n            _a.sent();\n            return [2 /*return*/, null];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get OAuth endpoints for common authorities.\r\n   */\n  Authority.prototype.getEndpointMetadataFromHardcodedValues = function () {\n    if (this.canonicalAuthority in EndpointMetadata) {\n      return EndpointMetadata[this.canonicalAuthority];\n    }\n    return null;\n  };\n  /**\r\n   * Update the retrieved metadata with regional information.\r\n   */\n  Authority.prototype.updateMetadataWithRegionalInformation = function (metadata) {\n    var _a, _b, _c, _d, _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, azureRegion;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4 /*yield*/, this.regionDiscovery.detectRegion((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl)];\n          case 1:\n            autodetectedRegionName = _f.sent();\n            azureRegion = ((_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG ? autodetectedRegionName : (_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.azureRegion;\n            if (((_d = this.authorityOptions.azureRegionConfiguration) === null || _d === void 0 ? void 0 : _d.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n              this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ? RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL : RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n            } else {\n              if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = ((_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion) === autodetectedRegionName ? RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED : RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n              } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n              }\n            }\n            if (azureRegion) {\n              this.regionDiscoveryMetadata.region_used = azureRegion;\n              return [2 /*return*/, Authority.replaceWithRegionalInformation(metadata, azureRegion)];\n            }\n            return [2 /*return*/, metadata];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n   * and returns where the information was retrieved from\r\n   * @param cachedMetadata\r\n   * @param newMetadata\r\n   */\n  Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, harcodedMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadata = this.getCloudDiscoveryMetadataFromConfig();\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n              return [2 /*return*/, AuthorityMetadataSource.CONFIG];\n            }\n            // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2 /*return*/, AuthorityMetadataSource.CACHE];\n            }\n            harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\n            return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];\n          case 1:\n            metadata = _a.sent();\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n              return [2 /*return*/, AuthorityMetadataSource.NETWORK];\n            }\n            if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\n              metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\n              return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];\n            } else {\n              // Metadata could not be obtained from config, cache or network\n              throw ClientConfigurationError.createUntrustedAuthorityError();\n            }\n        }\n      });\n    });\n  };\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n  Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\n    // Check if network response was provided in config\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      try {\n        var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n        if (metadata) {\n          return metadata;\n        }\n      } catch (e) {\n        throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\n      }\n    }\n    // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n    if (this.isInKnownAuthorities()) {\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n    return null;\n  };\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   *\r\n   * @param hasHardcodedMetadata boolean\r\n   */\n  Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var instanceDiscoveryEndpoint, options, match, response, metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\n            options = {};\n            if (this.proxyUrl) {\n              options.proxyUrl = this.proxyUrl;\n            }\n            match = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];\n          case 2:\n            response = _a.sent();\n            metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n            if (metadata.length === 0) {\n              // If no metadata is returned, authority is untrusted\n              return [2 /*return*/, null];\n            }\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n            return [3 /*break*/, 4];\n          case 3:\n            _a.sent();\n            return [2 /*return*/, null];\n          case 4:\n            if (!match) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n              match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n            }\n            return [2 /*return*/, match];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get cloud discovery metadata for common authorities\r\n   */\n  Authority.prototype.getCloudDiscoveryMetadataFromHarcodedValues = function () {\n    if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\n      return InstanceDiscoveryMetadata[this.canonicalAuthority];\n    }\n    return null;\n  };\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n  Authority.prototype.isInKnownAuthorities = function () {\n    var _this = this;\n    var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\n      return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  };\n  /**\r\n   * helper function to populate the authority based on azureCloudOptions\r\n   * @param authorityString\r\n   * @param azureCloudOptions\r\n   */\n  Authority.generateAuthority = function (authorityString, azureCloudOptions) {\n    var authorityAzureCloudInstance;\n    if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\n      var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\n      authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + \"/\" + tenant + \"/\";\n    }\n    return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n  };\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n  Authority.createCloudDiscoveryMetadataFromHost = function (host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  };\n  /**\r\n   * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n   * @param response\r\n   * @param authority\r\n   */\n  Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\n    for (var i = 0; i < response.length; i++) {\n      var metadata = response[i];\n      if (metadata.aliases.indexOf(authority) > -1) {\n        return metadata;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n  Authority.prototype.getPreferredCache = function () {\n    if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n    }\n  };\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n  Authority.prototype.isAlias = function (host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  };\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n  Authority.isPublicCloudAuthority = function (host) {\n    return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  };\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n  Authority.buildRegionalAuthorityString = function (host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    var authorityUrlInstance = new UrlString(host);\n    authorityUrlInstance.validateAsUri();\n    var authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\n    }\n    // Include the query string portion of the url\n    var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), {\n      HostNameAndPort: hostNameAndPort\n    })).urlString;\n    // Add the query string if a query string was provided\n    if (queryString) return url + \"?\" + queryString;\n    return url;\n  };\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n  Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\n    metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\n    // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n    metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, Constants.REGIONAL_AUTH_NON_MSI_QUERY_STRING);\n    if (metadata.end_session_endpoint) {\n      metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n    }\n    return metadata;\n  };\n  return Authority;\n}();\nexport { Authority };","map":{"version":3,"names":["__awaiter","__generator","__assign","AuthorityType","isOpenIdConfigResponse","UrlString","ClientAuthError","Constants","AuthorityMetadataSource","RegionDiscoveryOutcomes","EndpointMetadata","InstanceDiscoveryMetadata","ClientConfigurationError","ProtocolMode","AuthorityMetadataEntity","AzureCloudInstance","isCloudInstanceDiscoveryResponse","RegionDiscovery","Authority","authority","networkInterface","cacheManager","authorityOptions","proxyUrl","canonicalAuthority","_canonicalAuthority","validateAsUri","regionDiscovery","regionDiscoveryMetadata","region_used","undefined","region_source","region_outcome","EMPTY_STRING","Object","defineProperty","prototype","get","pathSegments","canonicalAuthorityUrlComponents","PathSegments","length","toLowerCase","ADFS","Adfs","DSTS","Dsts","Default","enumerable","configurable","protocolMode","urlString","set","url","_canonicalAuthorityUrlComponents","getUrlComponents","HostNameAndPort","discoveryComplete","endpoint","replacePath","metadata","authorization_endpoint","replaceTenant","createEndpointDiscoveryIncompleteError","token_endpoint","replace","end_session_endpoint","createLogoutNotSupportedError","issuer","jwks_uri","tenant","cachedAuthorityUrl","canonical_authority","cachedAuthorityParts","currentAuthorityParts","forEach","currentPart","index","cachedPart","authorityType","OIDC","resolveEndpointsAsync","metadataEntity","cloudDiscoverySource","endpointSource","cacheKey","_a","label","getAuthorityMetadataByAlias","hostnameAndPort","updateCanonicalAuthority","updateCloudDiscoveryMetadata","sent","preferred_network","updateEndpointMetadata","CACHE","resetExpiresAt","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","_b","harcodedMetadata","_c","getEndpointMetadataFromConfig","CONFIG","isAuthoritySameType","endpointsFromNetwork","isExpired","getEndpointMetadataFromHardcodedValues","getEndpointMetadataFromNetwork","azureRegionConfiguration","azureRegion","updateMetadataWithRegionalInformation","NETWORK","skipAuthorityMetadataCache","HARDCODED_VALUES","createUnableToGetOpenidConfigError","defaultOpenIdConfigurationEndpoint","cachedParts","authorityMetadata","JSON","parse","e","createInvalidAuthorityMetadataError","options","response","trys","push","sendGetRequestAsync","body","_d","_e","autodetectedRegionName","_f","detectRegion","environmentRegion","AZURE_REGION_AUTO_DISCOVER_FLAG","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NOT_DETECTED","CONFIGURED_NO_AUTO_DETECTION","replaceWithRegionalInformation","getCloudDiscoveryMetadataFromConfig","aliasesFromNetwork","getCloudDiscoveryMetadataFromHarcodedValues","getCloudDiscoveryMetadataFromNetwork","createUntrustedAuthorityError","cloudDiscoveryMetadata","parsedResponse","getCloudDiscoveryMetadataFromNetworkResponse","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","createCloudDiscoveryMetadataFromHost","instanceDiscoveryEndpoint","match","AAD_INSTANCE_DISCOVERY_ENDPT","_this","matches","knownAuthorities","filter","getDomainFromUrl","generateAuthority","authorityString","azureCloudOptions","authorityAzureCloudInstance","azureCloudInstance","None","DEFAULT_COMMON_TENANT","host","aliases","i","indexOf","getPreferredCache","isAlias","isPublicCloudAuthority","KNOWN_PUBLIC_CLOUDS","buildRegionalAuthorityString","region","queryString","authorityUrlInstance","authorityUrlParts","hostNameAndPort","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","constructAuthorityUriFromObject","REGIONAL_AUTH_NON_MSI_QUERY_STRING"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/authority/Authority.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthorityType } from './AuthorityType.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { EndpointMetadata, InstanceDiscoveryMetadata } from './AuthorityMetadata.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ProtocolMode } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { AzureCloudInstance } from './AuthorityOptions.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { RegionDiscovery } from './RegionDiscovery.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, networkInterface, cacheManager, authorityOptions, proxyUrl) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\r\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\r\n        this.proxyUrl = proxyUrl || Constants.EMPTY_STRING;\r\n    }\r\n    Object.defineProperty(Authority.prototype, \"authorityType\", {\r\n        // See above for AuthorityType\r\n        get: function () {\r\n            var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\r\n            if (pathSegments.length) {\r\n                switch (pathSegments[0].toLowerCase()) {\r\n                    case Constants.ADFS:\r\n                        return AuthorityType.Adfs;\r\n                    case Constants.DSTS:\r\n                        return AuthorityType.Dsts;\r\n                }\r\n            }\r\n            return AuthorityType.Default;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"protocolMode\", {\r\n        /**\r\n         * ProtocolMode enum representing the way endpoints are constructed.\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions.protocolMode;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"options\", {\r\n        /**\r\n         * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n         */\r\n        get: function () {\r\n            return this.authorityOptions;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\r\n        /**\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this._canonicalAuthority.urlString;\r\n        },\r\n        /**\r\n         * Sets canonical authority.\r\n         */\r\n        set: function (url) {\r\n            this._canonicalAuthority = new UrlString(url);\r\n            this._canonicalAuthority.validateAsUri();\r\n            this._canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\r\n        /**\r\n         * Get authority components.\r\n         */\r\n        get: function () {\r\n            if (!this._canonicalAuthorityUrlComponents) {\r\n                this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\r\n            }\r\n            return this._canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\r\n        /**\r\n         * Get hostname and port i.e. login.microsoftonline.com\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tenant\", {\r\n        /**\r\n         * Get tenant for authority.\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\r\n        /**\r\n         * OAuth /authorize endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.authorization_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\r\n        /**\r\n         * OAuth /token endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\r\n        /**\r\n         * OAuth logout endpoint for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                // ROPC policies may not have end_session_endpoint set\r\n                if (!this.metadata.end_session_endpoint) {\r\n                    throw ClientAuthError.createLogoutNotSupportedError();\r\n                }\r\n                var endpoint = this.replacePath(this.metadata.end_session_endpoint);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\r\n        /**\r\n         * OAuth issuer for requests\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.issuer);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"jwksUri\", {\r\n        /**\r\n         * Jwks_uri for token signing keys\r\n         */\r\n        get: function () {\r\n            if (this.discoveryComplete()) {\r\n                var endpoint = this.replacePath(this.metadata.jwks_uri);\r\n                return this.replaceTenant(endpoint);\r\n            }\r\n            else {\r\n                throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n            }\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replaceTenant = function (urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    };\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    Authority.prototype.replacePath = function (urlString) {\r\n        var endpoint = urlString;\r\n        var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach(function (currentPart, index) {\r\n            var cachedPart = cachedAuthorityParts[index];\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\r\n            }\r\n        });\r\n        return endpoint;\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\r\n        /**\r\n         * The default open id configuration endpoint for any canonical authority.\r\n         */\r\n        get: function () {\r\n            if (this.authorityType === AuthorityType.Adfs ||\r\n                this.authorityType === AuthorityType.Dsts ||\r\n                this.protocolMode === ProtocolMode.OIDC) {\r\n                return this.canonicalAuthority + \".well-known/openid-configuration\";\r\n            }\r\n            return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Boolean that returns whethr or not tenant discovery has been completed.\r\n     */\r\n    Authority.prototype.discoveryComplete = function () {\r\n        return !!this.metadata;\r\n    };\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    Authority.prototype.resolveEndpointsAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n                        if (!metadataEntity) {\r\n                            metadataEntity = new AuthorityMetadataEntity();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];\r\n                    case 1:\r\n                        cloudDiscoverySource = _a.sent();\r\n                        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n                        return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];\r\n                    case 2:\r\n                        endpointSource = _a.sent();\r\n                        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\r\n                            // Reset the expiration time unless both values came from a successful cache lookup\r\n                            metadataEntity.resetExpiresAt();\r\n                            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n                        }\r\n                        cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n                        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n                        this.metadata = metadataEntity;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\r\n        var _a, _b;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata, harcodedMetadata;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        metadata = this.getEndpointMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateEndpointMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\r\n                        return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _c.sent();\r\n                        if (!metadata) return [3 /*break*/, 4];\r\n                        if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, this.updateMetadataWithRegionalInformation(metadata)];\r\n                    case 2:\r\n                        metadata = _c.sent();\r\n                        _c.label = 3;\r\n                    case 3:\r\n                        metadataEntity.updateEndpointMetadata(metadata, true);\r\n                        return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                    case 4:\r\n                        if (!(harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache)) return [3 /*break*/, 7];\r\n                        if (!((_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion)) return [3 /*break*/, 6];\r\n                        return [4 /*yield*/, this.updateMetadataWithRegionalInformation(harcodedMetadata)];\r\n                    case 5:\r\n                        harcodedMetadata = _c.sent();\r\n                        _c.label = 6;\r\n                    case 6:\r\n                        metadataEntity.updateEndpointMetadata(harcodedMetadata, false);\r\n                        return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];\r\n                    case 7: throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    Authority.prototype.isAuthoritySameType = function (metadataEntity) {\r\n        var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\r\n    };\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromConfig = function () {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var options, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        options = {};\r\n                        if (this.proxyUrl) {\r\n                            options.proxyUrl = this.proxyUrl;\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.\r\n                                sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */\r\n    Authority.prototype.getEndpointMetadataFromHardcodedValues = function () {\r\n        if (this.canonicalAuthority in EndpointMetadata) {\r\n            return EndpointMetadata[this.canonicalAuthority];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     */\r\n    Authority.prototype.updateMetadataWithRegionalInformation = function (metadata) {\r\n        var _a, _b, _c, _d, _e;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var autodetectedRegionName, azureRegion;\r\n            return __generator(this, function (_f) {\r\n                switch (_f.label) {\r\n                    case 0: return [4 /*yield*/, this.regionDiscovery.detectRegion((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.environmentRegion, this.regionDiscoveryMetadata, this.proxyUrl)];\r\n                    case 1:\r\n                        autodetectedRegionName = _f.sent();\r\n                        azureRegion = ((_b = this.authorityOptions.azureRegionConfiguration) === null || _b === void 0 ? void 0 : _b.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG\r\n                            ? autodetectedRegionName\r\n                            : (_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.azureRegion;\r\n                        if (((_d = this.authorityOptions.azureRegionConfiguration) === null || _d === void 0 ? void 0 : _d.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                            this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\r\n                                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n                        }\r\n                        else {\r\n                            if (autodetectedRegionName) {\r\n                                this.regionDiscoveryMetadata.region_outcome = (((_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion) === autodetectedRegionName) ?\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\r\n                                    RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\r\n                            }\r\n                            else {\r\n                                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                            }\r\n                        }\r\n                        if (azureRegion) {\r\n                            this.regionDiscoveryMetadata.region_used = azureRegion;\r\n                            return [2 /*return*/, Authority.replaceWithRegionalInformation(metadata, azureRegion)];\r\n                        }\r\n                        return [2 /*return*/, metadata];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param cachedMetadata\r\n     * @param newMetadata\r\n     */\r\n    Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var metadata, harcodedMetadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.CONFIG];\r\n                        }\r\n                        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\r\n                        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\r\n                            // No need to update\r\n                            return [2 /*return*/, AuthorityMetadataSource.CACHE];\r\n                        }\r\n                        harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();\r\n                        return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];\r\n                    case 1:\r\n                        metadata = _a.sent();\r\n                        if (metadata) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\r\n                            return [2 /*return*/, AuthorityMetadataSource.NETWORK];\r\n                        }\r\n                        if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {\r\n                            metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);\r\n                            return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];\r\n                        }\r\n                        else {\r\n                            // Metadata could not be obtained from config, cache or network\r\n                            throw ClientConfigurationError.createUntrustedAuthorityError();\r\n                        }\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            try {\r\n                var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                if (metadata) {\r\n                    return metadata;\r\n                }\r\n            }\r\n            catch (e) {\r\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var instanceDiscoveryEndpoint, options, match, response, metadata;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        instanceDiscoveryEndpoint = \"\" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\r\n                        options = {};\r\n                        if (this.proxyUrl) {\r\n                            options.proxyUrl = this.proxyUrl;\r\n                        }\r\n                        match = null;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];\r\n                    case 2:\r\n                        response = _a.sent();\r\n                        metadata = isCloudInstanceDiscoveryResponse(response.body)\r\n                            ? response.body.metadata\r\n                            : [];\r\n                        if (metadata.length === 0) {\r\n                            // If no metadata is returned, authority is untrusted\r\n                            return [2 /*return*/, null];\r\n                        }\r\n                        match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/, null];\r\n                    case 4:\r\n                        if (!match) {\r\n                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\r\n                            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n                        }\r\n                        return [2 /*return*/, match];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Get cloud discovery metadata for common authorities\r\n     */\r\n    Authority.prototype.getCloudDiscoveryMetadataFromHarcodedValues = function () {\r\n        if (this.canonicalAuthority in InstanceDiscoveryMetadata) {\r\n            return InstanceDiscoveryMetadata[this.canonicalAuthority];\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    Authority.prototype.isInKnownAuthorities = function () {\r\n        var _this = this;\r\n        var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\r\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\r\n        });\r\n        return matches.length > 0;\r\n    };\r\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */\r\n    Authority.generateAuthority = function (authorityString, azureCloudOptions) {\r\n        var authorityAzureCloudInstance;\r\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\r\n            var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;\r\n            authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + \"/\" + tenant + \"/\";\r\n        }\r\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\r\n    };\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    Authority.createCloudDiscoveryMetadataFromHost = function (host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host]\r\n        };\r\n    };\r\n    /**\r\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n     * @param response\r\n     * @param authority\r\n     */\r\n    Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\r\n        for (var i = 0; i < response.length; i++) {\r\n            var metadata = response[i];\r\n            if (metadata.aliases.indexOf(authority) > -1) {\r\n                return metadata;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    Authority.prototype.getPreferredCache = function () {\r\n        if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    Authority.prototype.isAlias = function (host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    };\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    Authority.isPublicCloudAuthority = function (host) {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    };\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    Authority.buildRegionalAuthorityString = function (host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        var authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        var authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = region + \".\" + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\r\n        }\r\n        // Include the query string portion of the url\r\n        var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return url + \"?\" + queryString;\r\n        return url;\r\n    };\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\r\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\r\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\r\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, Constants.REGIONAL_AUTH_NON_MSI_QUERY_STRING);\r\n        if (metadata.end_session_endpoint) {\r\n            metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\r\n        }\r\n        return metadata;\r\n    };\r\n    return Authority;\r\n}());\n\nexport { Authority };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}