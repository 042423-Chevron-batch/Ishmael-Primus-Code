{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @hidden\r\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(authToken);\n    }\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  };\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n  StringUtils.queryStringToObject = function (query) {\n    var obj = {};\n    var params = query.split(\"&\");\n    var decode = function (s) {\n      return decodeURIComponent(s.replace(/\\+/g, \" \"));\n    };\n    params.forEach(function (pair) {\n      if (pair.trim()) {\n        var _a = pair.split(/=(.+)/g, 2),\n          key = _a[0],\n          value = _a[1]; // Split on the first occurence of the '=' character\n        if (key && value) {\n          obj[decode(key)] = decode(value);\n        }\n      }\n    });\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\n    return regex.test(input);\n  };\n  return StringUtils;\n}();\nexport { StringUtils };","map":{"version":3,"names":["ClientAuthError","StringUtils","decodeAuthToken","authToken","isEmpty","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","createTokenParsingError","JSON","stringify","crackedToken","header","JWSPayload","JWSSig","str","isEmptyObj","strObj","obj","parse","Object","keys","e","startsWith","search","indexOf","endsWith","lastIndexOf","queryStringToObject","query","params","split","decode","s","decodeURIComponent","replace","forEach","pair","trim","_a","key","value","trimArrayEntries","arr","map","entry","removeEmptyStringsFromArray","filter","jsonParseHelper","matchPattern","pattern","input","regex","RegExp","test"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/utils/StringUtils.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    StringUtils.decodeAuthToken = function (authToken) {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        var matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\r\n        }\r\n        var crackedToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    };\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    StringUtils.isEmpty = function (str) {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    };\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    StringUtils.isEmptyObj = function (strObj) {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                var obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    };\r\n    StringUtils.startsWith = function (str, search) {\r\n        return str.indexOf(search) === 0;\r\n    };\r\n    StringUtils.endsWith = function (str, search) {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    };\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    StringUtils.queryStringToObject = function (query) {\r\n        var obj = {};\r\n        var params = query.split(\"&\");\r\n        var decode = function (s) { return decodeURIComponent(s.replace(/\\+/g, \" \")); };\r\n        params.forEach(function (pair) {\r\n            if (pair.trim()) {\r\n                var _a = pair.split(/=(.+)/g, 2), key = _a[0], value = _a[1]; // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj;\r\n    };\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    StringUtils.trimArrayEntries = function (arr) {\r\n        return arr.map(function (entry) { return entry.trim(); });\r\n    };\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    StringUtils.removeEmptyStringsFromArray = function (arr) {\r\n        return arr.filter(function (entry) {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    };\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    StringUtils.jsonParseHelper = function (str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    StringUtils.matchPattern = function (pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        var regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\")); // eslint-disable-line security/detect-non-literal-regexp\r\n        return regex.test(input);\r\n    };\r\n    return StringUtils;\r\n}());\n\nexport { StringUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}