{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\nvar PublicClientApplication = /** @class */function (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n    _this.astsAsyncMeasurement = undefined;\n    _this.activeSilentTokenRequests = new Map();\n    // Register listener functions\n    _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2 /*return*/, this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n      var _this = this;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        atsMeasurement.addStaticFields({\n          cacheLookupPolicy: request.cacheLookupPolicy\n        });\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n            atsMeasurement.addStaticFields({\n              accessTokenSize: result.accessToken.length,\n              idTokenSize: result.idToken.length\n            });\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache,\n              isNativeBroker: result.fromNativeBroker,\n              cacheLookupPolicy: request.cacheLookupPolicy,\n              requestId: result.requestId\n            });\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n            atsMeasurement.endMeasurement({\n              errorCode: error.errorCode,\n              subErrorCode: error.subError,\n              success: false\n            });\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2 /*return*/, response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n          // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n          atsMeasurement.discardMeasurement();\n          return [2 /*return*/, cachedResponse];\n        }\n      });\n    });\n  };\n  PublicClientApplication.prototype.trackPageVisibility = function () {\n    if (!this.astsAsyncMeasurement) {\n      return;\n    }\n    this.logger.info(\"Perf: Visibility change detected\");\n    this.astsAsyncMeasurement.increment({\n      visibilityChangeCount: 1\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({\n              visibilityChangeCount: 0\n            });\n            document.addEventListener(\"visibilitychange\", this.trackPageVisibility);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3 /*break*/, 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2 /*return*/, silentIframeClient.acquireToken(request)];\n                  }\n                  throw e;\n                });\n              });\n            });\n            return [3 /*break*/, 3];\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\n            return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];\n          case 2:\n            silentRequest_1 = _b.sent();\n            requestWithCLP_1 = __assign(__assign({}, request), {\n              // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n              cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            });\n            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\n              if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                throw cacheError;\n              }\n              // block the reload if it occurred inside a hidden iframe\n              BrowserUtils.blockReloadInHiddenIframes();\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\n              _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);\n              return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\n                var isServerError = refreshTokenError instanceof ServerError;\n                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                var isInvalidGrantError = refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR;\n                if ((!isServerError || !isInvalidGrantError || isInteractionRequiredError || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken) && requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip) {\n                  throw refreshTokenError;\n                }\n                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);\n                return _this.acquireTokenBySilentIframe(silentRequest_1);\n              });\n            });\n            _b.label = 3;\n          case 3:\n            return [2 /*return*/, result.then(function (response) {\n              var _a;\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              var _a;\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n              (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n              });\n              throw tokenRenewalError;\n            }).finally(function () {\n              document.removeEventListener(\"visibilitychange\", _this.trackPageVisibility);\n            })];\n        }\n      });\n    });\n  };\n  return PublicClientApplication;\n}(ClientApplication);\nexport { PublicClientApplication };","map":{"version":3,"names":["__extends","__awaiter","__generator","__assign","PerformanceEvents","Constants","ServerError","InteractionRequiredAuthError","DEFAULT_REQUEST","InteractionType","CacheLookupPolicy","ApiId","BrowserConstants","ClientApplication","EventType","BrowserAuthError","NativeAuthError","NativeMessageHandler","BrowserUtils","PublicClientApplication","_super","configuration","_this","call","astsAsyncMeasurement","undefined","activeSilentTokenRequests","Map","trackPageVisibility","bind","prototype","loginRedirect","request","correlationId","_a","getRequestCorrelationId","logger","verbose","acquireTokenRedirect","loginPopup","acquireTokenPopup","acquireTokenSilent","atsMeasurement","account","thumbprint","silentRequestKey","cachedResponse","response","performanceClient","startMeasurement","AcquireTokenSilent","addStaticFields","cacheLookupPolicy","preflightBrowserEnvironmentCheck","Silent","getActiveAccount","createNoAccountError","clientId","config","auth","authority","EMPTY_STRING","scopes","homeAccountIdentifier","homeAccountId","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","JSON","stringify","get","setPreQueueTime","AcquireTokenSilentAsync","acquireTokenSilentAsync","then","result","delete","accessTokenSize","accessToken","length","idTokenSize","idToken","endMeasurement","success","fromCache","isNativeBroker","fromNativeBroker","requestId","catch","error","errorCode","subErrorCode","subError","set","discardMeasurement","info","increment","visibilityChangeCount","silentRequest","silentCacheClient","silentRequest_1","requestWithCLP_1","_b","label","addQueueMeasurement","eventHandler","emitEvent","ACQUIRE_TOKEN_START","document","addEventListener","isNativeAvailable","nativeExtensionProvider","nativeAccountId","acquireTokenNative","acquireTokenSilent_silentFlow","e","silentIframeClient","isFatal","createSilentIframeClient","acquireToken","createSilentCacheClient","InitializeSilentRequest","initializeSilentRequest","sent","Default","AcquireTokenFromCache","acquireTokenFromCache","cacheError","AccessToken","blockReloadInHiddenIframes","ACQUIRE_TOKEN_NETWORK_START","AcquireTokenByRefreshToken","acquireTokenByRefreshToken","refreshTokenError","isServerError","isInteractionRequiredError","isInvalidGrantError","INVALID_GRANT_ERROR","AccessTokenAndRefreshToken","RefreshToken","Skip","AcquireTokenBySilentIframe","acquireTokenBySilentIframe","ACQUIRE_TOKEN_SUCCESS","tokenRenewalError","ACQUIRE_TOKEN_FAILURE","finally","removeEventListener"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/app/PublicClientApplication.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nvar PublicClientApplication = /** @class */ (function (_super) {\r\n    __extends(PublicClientApplication, _super);\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    function PublicClientApplication(configuration) {\r\n        var _this = _super.call(this, configuration) || this;\r\n        _this.astsAsyncMeasurement = undefined;\r\n        _this.activeSilentTokenRequests = new Map();\r\n        // Register listener functions\r\n        _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    PublicClientApplication.prototype.loginRedirect = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var correlationId;\r\n            return __generator(this, function (_a) {\r\n                correlationId = this.getRequestCorrelationId(request);\r\n                this.logger.verbose(\"loginRedirect called\", correlationId);\r\n                return [2 /*return*/, this.acquireTokenRedirect(__assign({ correlationId: correlationId }, (request || DEFAULT_REQUEST)))];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    PublicClientApplication.prototype.loginPopup = function (request) {\r\n        var correlationId = this.getRequestCorrelationId(request);\r\n        this.logger.verbose(\"loginPopup called\", correlationId);\r\n        return this.acquireTokenPopup(__assign({ correlationId: correlationId }, (request || DEFAULT_REQUEST)));\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilent = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                correlationId = this.getRequestCorrelationId(request);\r\n                atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\r\n                atsMeasurement.addStaticFields({\r\n                    cacheLookupPolicy: request.cacheLookupPolicy\r\n                });\r\n                this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n                this.logger.verbose(\"acquireTokenSilent called\", correlationId);\r\n                account = request.account || this.getActiveAccount();\r\n                if (!account) {\r\n                    throw BrowserAuthError.createNoAccountError();\r\n                }\r\n                thumbprint = {\r\n                    clientId: this.config.auth.clientId,\r\n                    authority: request.authority || Constants.EMPTY_STRING,\r\n                    scopes: request.scopes,\r\n                    homeAccountIdentifier: account.homeAccountId,\r\n                    claims: request.claims,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims,\r\n                    sshKid: request.sshKid\r\n                };\r\n                silentRequestKey = JSON.stringify(thumbprint);\r\n                cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n                if (typeof cachedResponse === \"undefined\") {\r\n                    this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\r\n                    this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);\r\n                    response = this.acquireTokenSilentAsync(__assign(__assign({}, request), { correlationId: correlationId }), account)\r\n                        .then(function (result) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        atsMeasurement.addStaticFields({\r\n                            accessTokenSize: result.accessToken.length,\r\n                            idTokenSize: result.idToken.length\r\n                        });\r\n                        atsMeasurement.endMeasurement({\r\n                            success: true,\r\n                            fromCache: result.fromCache,\r\n                            isNativeBroker: result.fromNativeBroker,\r\n                            cacheLookupPolicy: request.cacheLookupPolicy,\r\n                            requestId: result.requestId,\r\n                        });\r\n                        return result;\r\n                    })\r\n                        .catch(function (error) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        atsMeasurement.endMeasurement({\r\n                            errorCode: error.errorCode,\r\n                            subErrorCode: error.subError,\r\n                            success: false\r\n                        });\r\n                        throw error;\r\n                    });\r\n                    this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n                    return [2 /*return*/, response];\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\r\n                    // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\r\n                    atsMeasurement.discardMeasurement();\r\n                    return [2 /*return*/, cachedResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    PublicClientApplication.prototype.trackPageVisibility = function () {\r\n        if (!this.astsAsyncMeasurement) {\r\n            return;\r\n        }\r\n        this.logger.info(\"Perf: Visibility change detected\");\r\n        this.astsAsyncMeasurement.increment({\r\n            visibilityChangeCount: 1,\r\n        });\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\r\n            var _this = this;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n                        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n                        this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\r\n                        (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({\r\n                            visibilityChangeCount: 0\r\n                        });\r\n                        document.addEventListener(\"visibilitychange\", this.trackPageVisibility);\r\n                        if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3 /*break*/, 1];\r\n                        this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\r\n                        silentRequest = __assign(__assign({}, request), { account: account });\r\n                        result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var silentIframeClient;\r\n                            return __generator(this, function (_a) {\r\n                                // If native token acquisition fails for availability reasons fallback to web flow\r\n                                if (e instanceof NativeAuthError && e.isFatal()) {\r\n                                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\r\n                                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\r\n                                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\r\n                                    return [2 /*return*/, silentIframeClient.acquireToken(request)];\r\n                                }\r\n                                throw e;\r\n                            });\r\n                        }); });\r\n                        return [3 /*break*/, 3];\r\n                    case 1:\r\n                        this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\r\n                        silentCacheClient = this.createSilentCacheClient(request.correlationId);\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);\r\n                        return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];\r\n                    case 2:\r\n                        silentRequest_1 = _b.sent();\r\n                        requestWithCLP_1 = __assign(__assign({}, request), { \r\n                            // set the request's CacheLookupPolicy to Default if it was not optionally passed in\r\n                            cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default });\r\n                        this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);\r\n                        result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\r\n                            if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\r\n                                throw cacheError;\r\n                            }\r\n                            // block the reload if it occurred inside a hidden iframe\r\n                            BrowserUtils.blockReloadInHiddenIframes();\r\n                            _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\r\n                            _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);\r\n                            return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\r\n                                var isServerError = refreshTokenError instanceof ServerError;\r\n                                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\r\n                                var isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\r\n                                if ((!isServerError ||\r\n                                    !isInvalidGrantError ||\r\n                                    isInteractionRequiredError ||\r\n                                    requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||\r\n                                    requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)\r\n                                    && (requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip)) {\r\n                                    throw refreshTokenError;\r\n                                }\r\n                                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\r\n                                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);\r\n                                return _this.acquireTokenBySilentIframe(silentRequest_1);\r\n                            });\r\n                        });\r\n                        _b.label = 3;\r\n                    case 3: return [2 /*return*/, result.then(function (response) {\r\n                            var _a;\r\n                            _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\r\n                            (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\r\n                                success: true,\r\n                                fromCache: response.fromCache,\r\n                                isNativeBroker: response.fromNativeBroker,\r\n                                requestId: response.requestId\r\n                            });\r\n                            return response;\r\n                        }).catch(function (tokenRenewalError) {\r\n                            var _a;\r\n                            _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\r\n                            (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({\r\n                                errorCode: tokenRenewalError.errorCode,\r\n                                subErrorCode: tokenRenewalError.subError,\r\n                                success: false\r\n                            });\r\n                            throw tokenRenewalError;\r\n                        }).finally(function () {\r\n                            document.removeEventListener(\"visibilitychange\", _this.trackPageVisibility);\r\n                        })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PublicClientApplication;\r\n}(ClientApplication));\n\nexport { PublicClientApplication };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}