{"ast":null,"code":"/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator } from '../../_virtual/_tslib.js';\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.js';\nimport { AuthError, AuthenticationScheme, PerformanceEvents } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.js';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar NativeMessageHandler = /** @class */function () {\n  function NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, extensionId) {\n    this.logger = logger;\n    this.handshakeTimeoutMs = handshakeTimeoutMs;\n    this.extensionId = extensionId;\n    this.resolvers = new Map(); // Used for non-handshake messages\n    this.handshakeResolvers = new Map(); // Used for handshake messages\n    this.responseId = 0;\n    this.messageChannel = new MessageChannel();\n    this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n    this.performanceClient = performanceClient;\n    this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\n  }\n  /**\r\n   * Sends a given message to the extension and resolves with the extension response\r\n   * @param body\r\n   */\n  NativeMessageHandler.prototype.sendMessage = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n      var _this = this;\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: body\n        };\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Sending request to browser extension: \" + JSON.stringify(req));\n        this.messageChannel.port1.postMessage(req);\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          _this.resolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n   * @param {Logger} logger\r\n   * @param {number} handshakeTimeoutMs\r\n   * @param {IPerformanceClient} performanceClient\r\n   */\n  NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs, performanceClient) {\n    return __awaiter(this, void 0, void 0, function () {\n      var preferredProvider, backupProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.trace(\"NativeMessageHandler - createProvider called.\");\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 5]);\n            preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\n            return [4 /*yield*/, preferredProvider.sendHandshakeRequest()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/, preferredProvider];\n          case 3:\n            _a.sent();\n            backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\n            return [4 /*yield*/, backupProvider.sendHandshakeRequest()];\n          case 4:\n            _a.sent();\n            return [2 /*return*/, backupProvider];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Send handshake request helper.\r\n   */\n  NativeMessageHandler.prototype.sendHandshakeRequest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var req;\n      var _this = this;\n      return __generator(this, function (_a) {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n        req = {\n          channel: NativeConstants.CHANNEL_ID,\n          extensionId: this.extensionId,\n          responseId: this.responseId++,\n          body: {\n            method: NativeExtensionMethod.HandshakeRequest\n          }\n        };\n        this.handshakeEvent.addStaticFields({\n          extensionId: this.extensionId,\n          extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n        });\n        this.messageChannel.port1.onmessage = function (event) {\n          _this.onChannelMessage(event);\n        };\n        window.postMessage(req, window.origin, [this.messageChannel.port2]);\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          _this.handshakeResolvers.set(req.responseId, {\n            resolve: resolve,\n            reject: reject\n          });\n          _this.timeoutId = window.setTimeout(function () {\n            /*\r\n             * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n             * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n             */\n            window.removeEventListener(\"message\", _this.windowListener, false);\n            _this.messageChannel.port1.close();\n            _this.messageChannel.port2.close();\n            _this.handshakeEvent.endMeasurement({\n              extensionHandshakeTimedOut: true,\n              success: false\n            });\n            reject(BrowserAuthError.createNativeHandshakeTimeoutError());\n            _this.handshakeResolvers.delete(req.responseId);\n          }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        })];\n      });\n    });\n  };\n  /**\r\n   * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n   * @param event\r\n   */\n  NativeMessageHandler.prototype.onWindowMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n    // We only accept messages from ourselves\n    if (event.source !== window) {\n      return;\n    }\n    var request = event.data;\n    if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\n      return;\n    }\n    if (request.extensionId && request.extensionId !== this.extensionId) {\n      return;\n    }\n    if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\n      // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n      this.logger.verbose(request.extensionId ? \"Extension with id: \" + request.extensionId + \" not installed\" : \"No extension installed\");\n      clearTimeout(this.timeoutId);\n      this.messageChannel.port1.close();\n      this.messageChannel.port2.close();\n      window.removeEventListener(\"message\", this.windowListener, false);\n      var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n      if (handshakeResolver) {\n        this.handshakeEvent.endMeasurement({\n          success: false,\n          extensionInstalled: false\n        });\n        handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\n      }\n    }\n  };\n  /**\r\n   * Invoked when a message is received from the extension on the MessageChannel port\r\n   * @param event\r\n   */\n  NativeMessageHandler.prototype.onChannelMessage = function (event) {\n    this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n    var request = event.data;\n    var resolver = this.resolvers.get(request.responseId);\n    var handshakeResolver = this.handshakeResolvers.get(request.responseId);\n    try {\n      var method = request.body.method;\n      if (method === NativeExtensionMethod.Response) {\n        if (!resolver) {\n          return;\n        }\n        var response = request.body.response;\n        this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n        this.logger.tracePii(\"NativeMessageHandler - Received response from browser extension: \" + JSON.stringify(response));\n        if (response.status !== \"Success\") {\n          resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\n        } else if (response.result) {\n          if (response.result[\"code\"] && response.result[\"description\"]) {\n            resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n          } else {\n            resolver.resolve(response.result);\n          }\n        } else {\n          throw AuthError.createUnexpectedError(\"Event does not contain result.\");\n        }\n        this.resolvers.delete(request.responseId);\n      } else if (method === NativeExtensionMethod.HandshakeResponse) {\n        if (!handshakeResolver) {\n          return;\n        }\n        clearTimeout(this.timeoutId); // Clear setTimeout\n        window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n        this.extensionId = request.extensionId;\n        this.extensionVersion = request.body.version;\n        this.logger.verbose(\"NativeMessageHandler - Received HandshakeResponse from extension: \" + this.extensionId);\n        this.handshakeEvent.endMeasurement({\n          extensionInstalled: true,\n          success: true\n        });\n        handshakeResolver.resolve();\n        this.handshakeResolvers.delete(request.responseId);\n      }\n      // Do nothing if method is not Response or HandshakeResponse\n    } catch (err) {\n      this.logger.error(\"Error parsing response from WAM Extension\");\n      this.logger.errorPii(\"Error parsing response from WAM Extension: \" + err.toString());\n      this.logger.errorPii(\"Unable to parse \" + event);\n      if (resolver) {\n        resolver.reject(err);\n      } else if (handshakeResolver) {\n        handshakeResolver.reject(err);\n      }\n    }\n  };\n  /**\r\n   * Returns the Id for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  NativeMessageHandler.prototype.getExtensionId = function () {\n    return this.extensionId;\n  };\n  /**\r\n   * Returns the version for the browser extension this handler is communicating with\r\n   * @returns\r\n   */\n  NativeMessageHandler.prototype.getExtensionVersion = function () {\n    return this.extensionVersion;\n  };\n  /**\r\n   * Returns boolean indicating whether or not the request should attempt to use native broker\r\n   * @param logger\r\n   * @param config\r\n   * @param nativeExtensionProvider\r\n   * @param authenticationScheme\r\n   */\n  NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {\n    logger.trace(\"isNativeAvailable called\");\n    if (!config.system.allowNativeBroker) {\n      logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\n      // Developer disabled WAM\n      return false;\n    }\n    if (!nativeExtensionProvider) {\n      logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\n      // Extension is not available\n      return false;\n    }\n    if (authenticationScheme) {\n      switch (authenticationScheme) {\n        case AuthenticationScheme.BEARER:\n        case AuthenticationScheme.POP:\n          logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n          return true;\n        default:\n          logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n          return false;\n      }\n    }\n    return true;\n  };\n  return NativeMessageHandler;\n}();\nexport { NativeMessageHandler };","map":{"version":3,"names":["__awaiter","__generator","NativeConstants","NativeExtensionMethod","AuthError","AuthenticationScheme","PerformanceEvents","NativeAuthError","BrowserAuthError","NativeMessageHandler","logger","handshakeTimeoutMs","performanceClient","extensionId","resolvers","Map","handshakeResolvers","responseId","messageChannel","MessageChannel","windowListener","onWindowMessage","bind","handshakeEvent","startMeasurement","NativeMessageHandlerHandshake","prototype","sendMessage","body","req","_this","_a","trace","channel","CHANNEL_ID","tracePii","JSON","stringify","port1","postMessage","Promise","resolve","reject","set","createProvider","preferredProvider","backupProvider","label","trys","push","PREFERRED_EXTENSION_ID","sendHandshakeRequest","sent","window","addEventListener","method","HandshakeRequest","addStaticFields","extensionHandshakeTimeoutMs","onmessage","event","onChannelMessage","origin","port2","timeoutId","setTimeout","removeEventListener","close","endMeasurement","extensionHandshakeTimedOut","success","createNativeHandshakeTimeoutError","delete","source","request","data","verbose","clearTimeout","handshakeResolver","get","extensionInstalled","createNativeExtensionNotInstalledError","resolver","Response","response","status","createError","code","description","ext","result","createUnexpectedError","HandshakeResponse","extensionVersion","version","err","error","errorPii","toString","getExtensionId","getExtensionVersion","isNativeAvailable","config","nativeExtensionProvider","authenticationScheme","system","allowNativeBroker","BEARER","POP"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.js"],"sourcesContent":["/*! @azure/msal-browser v2.37.1 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator } from '../../_virtual/_tslib.js';\nimport { NativeConstants, NativeExtensionMethod } from '../../utils/BrowserConstants.js';\nimport { AuthError, AuthenticationScheme, PerformanceEvents } from '@azure/msal-common';\nimport { NativeAuthError } from '../../error/NativeAuthError.js';\nimport { BrowserAuthError } from '../../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar NativeMessageHandler = /** @class */ (function () {\r\n    function NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, extensionId) {\r\n        this.logger = logger;\r\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\r\n        this.extensionId = extensionId;\r\n        this.resolvers = new Map(); // Used for non-handshake messages\r\n        this.handshakeResolvers = new Map(); // Used for handshake messages\r\n        this.responseId = 0;\r\n        this.messageChannel = new MessageChannel();\r\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\r\n        this.performanceClient = performanceClient;\r\n        this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);\r\n    }\r\n    /**\r\n     * Sends a given message to the extension and resolves with the extension response\r\n     * @param body\r\n     */\r\n    NativeMessageHandler.prototype.sendMessage = function (body) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var req;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\r\n                req = {\r\n                    channel: NativeConstants.CHANNEL_ID,\r\n                    extensionId: this.extensionId,\r\n                    responseId: this.responseId++,\r\n                    body: body\r\n                };\r\n                this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\r\n                this.logger.tracePii(\"NativeMessageHandler - Sending request to browser extension: \" + JSON.stringify(req));\r\n                this.messageChannel.port1.postMessage(req);\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        _this.resolvers.set(req.responseId, { resolve: resolve, reject: reject });\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n     * @param {Logger} logger\r\n     * @param {number} handshakeTimeoutMs\r\n     * @param {IPerformanceClient} performanceClient\r\n     */\r\n    NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs, performanceClient) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var preferredProvider, backupProvider;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        logger.trace(\"NativeMessageHandler - createProvider called.\");\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 5]);\r\n                        preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);\r\n                        return [4 /*yield*/, preferredProvider.sendHandshakeRequest()];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [2 /*return*/, preferredProvider];\r\n                    case 3:\r\n                        _a.sent();\r\n                        backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\r\n                        return [4 /*yield*/, backupProvider.sendHandshakeRequest()];\r\n                    case 4:\r\n                        _a.sent();\r\n                        return [2 /*return*/, backupProvider];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Send handshake request helper.\r\n     */\r\n    NativeMessageHandler.prototype.sendHandshakeRequest = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var req;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\r\n                // Register this event listener before sending handshake\r\n                window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\r\n                req = {\r\n                    channel: NativeConstants.CHANNEL_ID,\r\n                    extensionId: this.extensionId,\r\n                    responseId: this.responseId++,\r\n                    body: {\r\n                        method: NativeExtensionMethod.HandshakeRequest\r\n                    }\r\n                };\r\n                this.handshakeEvent.addStaticFields({\r\n                    extensionId: this.extensionId,\r\n                    extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\r\n                });\r\n                this.messageChannel.port1.onmessage = function (event) {\r\n                    _this.onChannelMessage(event);\r\n                };\r\n                window.postMessage(req, window.origin, [this.messageChannel.port2]);\r\n                return [2 /*return*/, new Promise(function (resolve, reject) {\r\n                        _this.handshakeResolvers.set(req.responseId, { resolve: resolve, reject: reject });\r\n                        _this.timeoutId = window.setTimeout(function () {\r\n                            /*\r\n                             * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n                             * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n                             */\r\n                            window.removeEventListener(\"message\", _this.windowListener, false);\r\n                            _this.messageChannel.port1.close();\r\n                            _this.messageChannel.port2.close();\r\n                            _this.handshakeEvent.endMeasurement({ extensionHandshakeTimedOut: true, success: false });\r\n                            reject(BrowserAuthError.createNativeHandshakeTimeoutError());\r\n                            _this.handshakeResolvers.delete(req.responseId);\r\n                        }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\r\n                    })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n     * @param event\r\n     */\r\n    NativeMessageHandler.prototype.onWindowMessage = function (event) {\r\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\r\n        // We only accept messages from ourselves\r\n        if (event.source !== window) {\r\n            return;\r\n        }\r\n        var request = event.data;\r\n        if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {\r\n            return;\r\n        }\r\n        if (request.extensionId && request.extensionId !== this.extensionId) {\r\n            return;\r\n        }\r\n        if (request.body.method === NativeExtensionMethod.HandshakeRequest) {\r\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\r\n            this.logger.verbose(request.extensionId ? \"Extension with id: \" + request.extensionId + \" not installed\" : \"No extension installed\");\r\n            clearTimeout(this.timeoutId);\r\n            this.messageChannel.port1.close();\r\n            this.messageChannel.port2.close();\r\n            window.removeEventListener(\"message\", this.windowListener, false);\r\n            var handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n            if (handshakeResolver) {\r\n                this.handshakeEvent.endMeasurement({ success: false, extensionInstalled: false });\r\n                handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Invoked when a message is received from the extension on the MessageChannel port\r\n     * @param event\r\n     */\r\n    NativeMessageHandler.prototype.onChannelMessage = function (event) {\r\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\r\n        var request = event.data;\r\n        var resolver = this.resolvers.get(request.responseId);\r\n        var handshakeResolver = this.handshakeResolvers.get(request.responseId);\r\n        try {\r\n            var method = request.body.method;\r\n            if (method === NativeExtensionMethod.Response) {\r\n                if (!resolver) {\r\n                    return;\r\n                }\r\n                var response = request.body.response;\r\n                this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\r\n                this.logger.tracePii(\"NativeMessageHandler - Received response from browser extension: \" + JSON.stringify(response));\r\n                if (response.status !== \"Success\") {\r\n                    resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));\r\n                }\r\n                else if (response.result) {\r\n                    if (response.result[\"code\"] && response.result[\"description\"]) {\r\n                        resolver.reject(NativeAuthError.createError(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\r\n                    }\r\n                    else {\r\n                        resolver.resolve(response.result);\r\n                    }\r\n                }\r\n                else {\r\n                    throw AuthError.createUnexpectedError(\"Event does not contain result.\");\r\n                }\r\n                this.resolvers.delete(request.responseId);\r\n            }\r\n            else if (method === NativeExtensionMethod.HandshakeResponse) {\r\n                if (!handshakeResolver) {\r\n                    return;\r\n                }\r\n                clearTimeout(this.timeoutId); // Clear setTimeout\r\n                window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\r\n                this.extensionId = request.extensionId;\r\n                this.extensionVersion = request.body.version;\r\n                this.logger.verbose(\"NativeMessageHandler - Received HandshakeResponse from extension: \" + this.extensionId);\r\n                this.handshakeEvent.endMeasurement({ extensionInstalled: true, success: true });\r\n                handshakeResolver.resolve();\r\n                this.handshakeResolvers.delete(request.responseId);\r\n            }\r\n            // Do nothing if method is not Response or HandshakeResponse\r\n        }\r\n        catch (err) {\r\n            this.logger.error(\"Error parsing response from WAM Extension\");\r\n            this.logger.errorPii(\"Error parsing response from WAM Extension: \" + err.toString());\r\n            this.logger.errorPii(\"Unable to parse \" + event);\r\n            if (resolver) {\r\n                resolver.reject(err);\r\n            }\r\n            else if (handshakeResolver) {\r\n                handshakeResolver.reject(err);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the Id for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    NativeMessageHandler.prototype.getExtensionId = function () {\r\n        return this.extensionId;\r\n    };\r\n    /**\r\n     * Returns the version for the browser extension this handler is communicating with\r\n     * @returns\r\n     */\r\n    NativeMessageHandler.prototype.getExtensionVersion = function () {\r\n        return this.extensionVersion;\r\n    };\r\n    /**\r\n     * Returns boolean indicating whether or not the request should attempt to use native broker\r\n     * @param logger\r\n     * @param config\r\n     * @param nativeExtensionProvider\r\n     * @param authenticationScheme\r\n     */\r\n    NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {\r\n        logger.trace(\"isNativeAvailable called\");\r\n        if (!config.system.allowNativeBroker) {\r\n            logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\r\n            // Developer disabled WAM\r\n            return false;\r\n        }\r\n        if (!nativeExtensionProvider) {\r\n            logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\r\n            // Extension is not available\r\n            return false;\r\n        }\r\n        if (authenticationScheme) {\r\n            switch (authenticationScheme) {\r\n                case AuthenticationScheme.BEARER:\r\n                case AuthenticationScheme.POP:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\r\n                    return true;\r\n                default:\r\n                    logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\r\n                    return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return NativeMessageHandler;\r\n}());\n\nexport { NativeMessageHandler };\n"],"mappings":"AAAA;AACA,YAAY;;AACZ,SAASA,SAAS,EAAEC,WAAW,QAAQ,0BAA0B;AACjE,SAASC,eAAe,EAAEC,qBAAqB,QAAQ,iCAAiC;AACxF,SAASC,SAAS,EAAEC,oBAAoB,EAAEC,iBAAiB,QAAQ,oBAAoB;AACvF,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,gBAAgB,QAAQ,iCAAiC;;AAElE;AACA;AACA;AACA;AACA,IAAIC,oBAAoB,GAAG,aAAe,YAAY;EAClD,SAASA,oBAAoBA,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,WAAW,EAAE;IACtF,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,EAAE,CAAC,CAAC;IAC5B,IAAI,CAACC,kBAAkB,GAAG,IAAID,GAAG,EAAE,CAAC,CAAC;IACrC,IAAI,CAACE,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,cAAc,GAAG,IAAIC,cAAc,EAAE;IAC1C,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvD,IAAI,CAACV,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACW,cAAc,GAAGX,iBAAiB,CAACY,gBAAgB,CAAClB,iBAAiB,CAACmB,6BAA6B,CAAC;EAC7G;EACA;AACJ;AACA;AACA;EACIhB,oBAAoB,CAACiB,SAAS,CAACC,WAAW,GAAG,UAAUC,IAAI,EAAE;IACzD,OAAO5B,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI6B,GAAG;MACP,IAAIC,KAAK,GAAG,IAAI;MAChB,OAAO7B,WAAW,CAAC,IAAI,EAAE,UAAU8B,EAAE,EAAE;QACnC,IAAI,CAACrB,MAAM,CAACsB,KAAK,CAAC,4CAA4C,CAAC;QAC/DH,GAAG,GAAG;UACFI,OAAO,EAAE/B,eAAe,CAACgC,UAAU;UACnCrB,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BI,UAAU,EAAE,IAAI,CAACA,UAAU,EAAE;UAC7BW,IAAI,EAAEA;QACV,CAAC;QACD,IAAI,CAAClB,MAAM,CAACsB,KAAK,CAAC,6DAA6D,CAAC;QAChF,IAAI,CAACtB,MAAM,CAACyB,QAAQ,CAAC,+DAA+D,GAAGC,IAAI,CAACC,SAAS,CAACR,GAAG,CAAC,CAAC;QAC3G,IAAI,CAACX,cAAc,CAACoB,KAAK,CAACC,WAAW,CAACV,GAAG,CAAC;QAC1C,OAAO,CAAC,CAAC,CAAC,YAAY,IAAIW,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;UACrDZ,KAAK,CAAChB,SAAS,CAAC6B,GAAG,CAACd,GAAG,CAACZ,UAAU,EAAE;YAAEwB,OAAO,EAAEA,OAAO;YAAEC,MAAM,EAAEA;UAAO,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIjC,oBAAoB,CAACmC,cAAc,GAAG,UAAUlC,MAAM,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAE;IAC3F,OAAOZ,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI6C,iBAAiB,EAAEC,cAAc;MACrC,OAAO7C,WAAW,CAAC,IAAI,EAAE,UAAU8B,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACgB,KAAK;UACZ,KAAK,CAAC;YACFrC,MAAM,CAACsB,KAAK,CAAC,+CAA+C,CAAC;YAC7DD,EAAE,CAACgB,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACFhB,EAAE,CAACiB,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAI,CAAC,CAAC,CAAC;YACzBJ,iBAAiB,GAAG,IAAIpC,oBAAoB,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEV,eAAe,CAACgD,sBAAsB,CAAC;YACnI,OAAO,CAAC,CAAC,CAAC,WAAWL,iBAAiB,CAACM,oBAAoB,EAAE,CAAC;UAClE,KAAK,CAAC;YACFpB,EAAE,CAACqB,IAAI,EAAE;YACT,OAAO,CAAC,CAAC,CAAC,YAAYP,iBAAiB,CAAC;UAC5C,KAAK,CAAC;YACFd,EAAE,CAACqB,IAAI,EAAE;YACTN,cAAc,GAAG,IAAIrC,oBAAoB,CAACC,MAAM,EAAEC,kBAAkB,EAAEC,iBAAiB,CAAC;YACxF,OAAO,CAAC,CAAC,CAAC,WAAWkC,cAAc,CAACK,oBAAoB,EAAE,CAAC;UAC/D,KAAK,CAAC;YACFpB,EAAE,CAACqB,IAAI,EAAE;YACT,OAAO,CAAC,CAAC,CAAC,YAAYN,cAAc,CAAC;UACzC,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC,CAAC,WAAW;QAAC;MAEtC,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;EACIrC,oBAAoB,CAACiB,SAAS,CAACyB,oBAAoB,GAAG,YAAY;IAC9D,OAAOnD,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;MAC/C,IAAI6B,GAAG;MACP,IAAIC,KAAK,GAAG,IAAI;MAChB,OAAO7B,WAAW,CAAC,IAAI,EAAE,UAAU8B,EAAE,EAAE;QACnC,IAAI,CAACrB,MAAM,CAACsB,KAAK,CAAC,qDAAqD,CAAC;QACxE;QACAqB,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAClC,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC;QAChES,GAAG,GAAG;UACFI,OAAO,EAAE/B,eAAe,CAACgC,UAAU;UACnCrB,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7BI,UAAU,EAAE,IAAI,CAACA,UAAU,EAAE;UAC7BW,IAAI,EAAE;YACF2B,MAAM,EAAEpD,qBAAqB,CAACqD;UAClC;QACJ,CAAC;QACD,IAAI,CAACjC,cAAc,CAACkC,eAAe,CAAC;UAChC5C,WAAW,EAAE,IAAI,CAACA,WAAW;UAC7B6C,2BAA2B,EAAE,IAAI,CAAC/C;QACtC,CAAC,CAAC;QACF,IAAI,CAACO,cAAc,CAACoB,KAAK,CAACqB,SAAS,GAAG,UAAUC,KAAK,EAAE;UACnD9B,KAAK,CAAC+B,gBAAgB,CAACD,KAAK,CAAC;QACjC,CAAC;QACDP,MAAM,CAACd,WAAW,CAACV,GAAG,EAAEwB,MAAM,CAACS,MAAM,EAAE,CAAC,IAAI,CAAC5C,cAAc,CAAC6C,KAAK,CAAC,CAAC;QACnE,OAAO,CAAC,CAAC,CAAC,YAAY,IAAIvB,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;UACrDZ,KAAK,CAACd,kBAAkB,CAAC2B,GAAG,CAACd,GAAG,CAACZ,UAAU,EAAE;YAAEwB,OAAO,EAAEA,OAAO;YAAEC,MAAM,EAAEA;UAAO,CAAC,CAAC;UAClFZ,KAAK,CAACkC,SAAS,GAAGX,MAAM,CAACY,UAAU,CAAC,YAAY;YAC5C;AAC5B;AACA;AACA;YAC4BZ,MAAM,CAACa,mBAAmB,CAAC,SAAS,EAAEpC,KAAK,CAACV,cAAc,EAAE,KAAK,CAAC;YAClEU,KAAK,CAACZ,cAAc,CAACoB,KAAK,CAAC6B,KAAK,EAAE;YAClCrC,KAAK,CAACZ,cAAc,CAAC6C,KAAK,CAACI,KAAK,EAAE;YAClCrC,KAAK,CAACP,cAAc,CAAC6C,cAAc,CAAC;cAAEC,0BAA0B,EAAE,IAAI;cAAEC,OAAO,EAAE;YAAM,CAAC,CAAC;YACzF5B,MAAM,CAAClC,gBAAgB,CAAC+D,iCAAiC,EAAE,CAAC;YAC5DzC,KAAK,CAACd,kBAAkB,CAACwD,MAAM,CAAC3C,GAAG,CAACZ,UAAU,CAAC;UACnD,CAAC,EAAEa,KAAK,CAACnB,kBAAkB,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD;AACJ;AACA;AACA;EACIF,oBAAoB,CAACiB,SAAS,CAACL,eAAe,GAAG,UAAUuC,KAAK,EAAE;IAC9D,IAAI,CAAClD,MAAM,CAACsB,KAAK,CAAC,+CAA+C,CAAC;IAClE;IACA,IAAI4B,KAAK,CAACa,MAAM,KAAKpB,MAAM,EAAE;MACzB;IACJ;IACA,IAAIqB,OAAO,GAAGd,KAAK,CAACe,IAAI;IACxB,IAAI,CAACD,OAAO,CAACzC,OAAO,IAAIyC,OAAO,CAACzC,OAAO,KAAK/B,eAAe,CAACgC,UAAU,EAAE;MACpE;IACJ;IACA,IAAIwC,OAAO,CAAC7D,WAAW,IAAI6D,OAAO,CAAC7D,WAAW,KAAK,IAAI,CAACA,WAAW,EAAE;MACjE;IACJ;IACA,IAAI6D,OAAO,CAAC9C,IAAI,CAAC2B,MAAM,KAAKpD,qBAAqB,CAACqD,gBAAgB,EAAE;MAChE;MACA,IAAI,CAAC9C,MAAM,CAACkE,OAAO,CAACF,OAAO,CAAC7D,WAAW,GAAG,qBAAqB,GAAG6D,OAAO,CAAC7D,WAAW,GAAG,gBAAgB,GAAG,wBAAwB,CAAC;MACpIgE,YAAY,CAAC,IAAI,CAACb,SAAS,CAAC;MAC5B,IAAI,CAAC9C,cAAc,CAACoB,KAAK,CAAC6B,KAAK,EAAE;MACjC,IAAI,CAACjD,cAAc,CAAC6C,KAAK,CAACI,KAAK,EAAE;MACjCd,MAAM,CAACa,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC9C,cAAc,EAAE,KAAK,CAAC;MACjE,IAAI0D,iBAAiB,GAAG,IAAI,CAAC9D,kBAAkB,CAAC+D,GAAG,CAACL,OAAO,CAACzD,UAAU,CAAC;MACvE,IAAI6D,iBAAiB,EAAE;QACnB,IAAI,CAACvD,cAAc,CAAC6C,cAAc,CAAC;UAAEE,OAAO,EAAE,KAAK;UAAEU,kBAAkB,EAAE;QAAM,CAAC,CAAC;QACjFF,iBAAiB,CAACpC,MAAM,CAAClC,gBAAgB,CAACyE,sCAAsC,EAAE,CAAC;MACvF;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIxE,oBAAoB,CAACiB,SAAS,CAACmC,gBAAgB,GAAG,UAAUD,KAAK,EAAE;IAC/D,IAAI,CAAClD,MAAM,CAACsB,KAAK,CAAC,iDAAiD,CAAC;IACpE,IAAI0C,OAAO,GAAGd,KAAK,CAACe,IAAI;IACxB,IAAIO,QAAQ,GAAG,IAAI,CAACpE,SAAS,CAACiE,GAAG,CAACL,OAAO,CAACzD,UAAU,CAAC;IACrD,IAAI6D,iBAAiB,GAAG,IAAI,CAAC9D,kBAAkB,CAAC+D,GAAG,CAACL,OAAO,CAACzD,UAAU,CAAC;IACvE,IAAI;MACA,IAAIsC,MAAM,GAAGmB,OAAO,CAAC9C,IAAI,CAAC2B,MAAM;MAChC,IAAIA,MAAM,KAAKpD,qBAAqB,CAACgF,QAAQ,EAAE;QAC3C,IAAI,CAACD,QAAQ,EAAE;UACX;QACJ;QACA,IAAIE,QAAQ,GAAGV,OAAO,CAAC9C,IAAI,CAACwD,QAAQ;QACpC,IAAI,CAAC1E,MAAM,CAACsB,KAAK,CAAC,iEAAiE,CAAC;QACpF,IAAI,CAACtB,MAAM,CAACyB,QAAQ,CAAC,mEAAmE,GAAGC,IAAI,CAACC,SAAS,CAAC+C,QAAQ,CAAC,CAAC;QACpH,IAAIA,QAAQ,CAACC,MAAM,KAAK,SAAS,EAAE;UAC/BH,QAAQ,CAACxC,MAAM,CAACnC,eAAe,CAAC+E,WAAW,CAACF,QAAQ,CAACG,IAAI,EAAEH,QAAQ,CAACI,WAAW,EAAEJ,QAAQ,CAACK,GAAG,CAAC,CAAC;QACnG,CAAC,MACI,IAAIL,QAAQ,CAACM,MAAM,EAAE;UACtB,IAAIN,QAAQ,CAACM,MAAM,CAAC,MAAM,CAAC,IAAIN,QAAQ,CAACM,MAAM,CAAC,aAAa,CAAC,EAAE;YAC3DR,QAAQ,CAACxC,MAAM,CAACnC,eAAe,CAAC+E,WAAW,CAACF,QAAQ,CAACM,MAAM,CAAC,MAAM,CAAC,EAAEN,QAAQ,CAACM,MAAM,CAAC,aAAa,CAAC,EAAEN,QAAQ,CAACM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;UACjI,CAAC,MACI;YACDR,QAAQ,CAACzC,OAAO,CAAC2C,QAAQ,CAACM,MAAM,CAAC;UACrC;QACJ,CAAC,MACI;UACD,MAAMtF,SAAS,CAACuF,qBAAqB,CAAC,gCAAgC,CAAC;QAC3E;QACA,IAAI,CAAC7E,SAAS,CAAC0D,MAAM,CAACE,OAAO,CAACzD,UAAU,CAAC;MAC7C,CAAC,MACI,IAAIsC,MAAM,KAAKpD,qBAAqB,CAACyF,iBAAiB,EAAE;QACzD,IAAI,CAACd,iBAAiB,EAAE;UACpB;QACJ;QACAD,YAAY,CAAC,IAAI,CAACb,SAAS,CAAC,CAAC,CAAC;QAC9BX,MAAM,CAACa,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC9C,cAAc,EAAE,KAAK,CAAC,CAAC,CAAC;QACnE,IAAI,CAACP,WAAW,GAAG6D,OAAO,CAAC7D,WAAW;QACtC,IAAI,CAACgF,gBAAgB,GAAGnB,OAAO,CAAC9C,IAAI,CAACkE,OAAO;QAC5C,IAAI,CAACpF,MAAM,CAACkE,OAAO,CAAC,oEAAoE,GAAG,IAAI,CAAC/D,WAAW,CAAC;QAC5G,IAAI,CAACU,cAAc,CAAC6C,cAAc,CAAC;UAAEY,kBAAkB,EAAE,IAAI;UAAEV,OAAO,EAAE;QAAK,CAAC,CAAC;QAC/EQ,iBAAiB,CAACrC,OAAO,EAAE;QAC3B,IAAI,CAACzB,kBAAkB,CAACwD,MAAM,CAACE,OAAO,CAACzD,UAAU,CAAC;MACtD;MACA;IACJ,CAAC,CACD,OAAO8E,GAAG,EAAE;MACR,IAAI,CAACrF,MAAM,CAACsF,KAAK,CAAC,2CAA2C,CAAC;MAC9D,IAAI,CAACtF,MAAM,CAACuF,QAAQ,CAAC,6CAA6C,GAAGF,GAAG,CAACG,QAAQ,EAAE,CAAC;MACpF,IAAI,CAACxF,MAAM,CAACuF,QAAQ,CAAC,kBAAkB,GAAGrC,KAAK,CAAC;MAChD,IAAIsB,QAAQ,EAAE;QACVA,QAAQ,CAACxC,MAAM,CAACqD,GAAG,CAAC;MACxB,CAAC,MACI,IAAIjB,iBAAiB,EAAE;QACxBA,iBAAiB,CAACpC,MAAM,CAACqD,GAAG,CAAC;MACjC;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACItF,oBAAoB,CAACiB,SAAS,CAACyE,cAAc,GAAG,YAAY;IACxD,OAAO,IAAI,CAACtF,WAAW;EAC3B,CAAC;EACD;AACJ;AACA;AACA;EACIJ,oBAAoB,CAACiB,SAAS,CAAC0E,mBAAmB,GAAG,YAAY;IAC7D,OAAO,IAAI,CAACP,gBAAgB;EAChC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIpF,oBAAoB,CAAC4F,iBAAiB,GAAG,UAAUC,MAAM,EAAE5F,MAAM,EAAE6F,uBAAuB,EAAEC,oBAAoB,EAAE;IAC9G9F,MAAM,CAACsB,KAAK,CAAC,0BAA0B,CAAC;IACxC,IAAI,CAACsE,MAAM,CAACG,MAAM,CAACC,iBAAiB,EAAE;MAClChG,MAAM,CAACsB,KAAK,CAAC,sEAAsE,CAAC;MACpF;MACA,OAAO,KAAK;IAChB;IACA,IAAI,CAACuE,uBAAuB,EAAE;MAC1B7F,MAAM,CAACsB,KAAK,CAAC,+EAA+E,CAAC;MAC7F;MACA,OAAO,KAAK;IAChB;IACA,IAAIwE,oBAAoB,EAAE;MACtB,QAAQA,oBAAoB;QACxB,KAAKnG,oBAAoB,CAACsG,MAAM;QAChC,KAAKtG,oBAAoB,CAACuG,GAAG;UACzBlG,MAAM,CAACsB,KAAK,CAAC,sEAAsE,CAAC;UACpF,OAAO,IAAI;QACf;UACItB,MAAM,CAACsB,KAAK,CAAC,2EAA2E,CAAC;UACzF,OAAO,KAAK;MAAC;IAEzB;IACA,OAAO,IAAI;EACf,CAAC;EACD,OAAOvB,oBAAoB;AAC/B,CAAC,EAAG;AAEJ,SAASA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}