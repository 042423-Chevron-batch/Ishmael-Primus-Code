{"ast":null,"code":"/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentFlowClient = /** @class */function (_super) {\n  __extends(SilentFlowClient, _super);\n  function SilentFlowClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, refreshTokenClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.acquireCachedToken(request)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            e_1 = _a.sent();\n            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n              refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\n              return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\n            } else {\n              throw e_1;\n            }\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireCachedToken = function (request) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var environment, cacheRecord;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            // Cannot renew token if no request object is given.\n            if (!request) {\n              throw ClientConfigurationError.createEmptyTokenRequestError();\n            }\n            if (request.forceRefresh) {\n              // Must refresh due to present force_refresh flag.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n            // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n            if (!request.account) {\n              throw ClientAuthError.createNoAccountInSilentRequestError();\n            }\n            environment = request.authority || this.authority.getPreferredCache();\n            cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, request, environment);\n            if (!cacheRecord.accessToken) {\n              // Must refresh due to non-existent access_token.\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Must refresh due to expired access_token.\n              (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n              // Must refresh due to the refresh_in value.\n              (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n              this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\n              throw ClientAuthError.createRefreshRequiredError();\n            }\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n            return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\n          case 1:\n            return [2 /*return*/, _e.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n  SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, authTime;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (cacheRecord.idToken) {\n              idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\n            }\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n              authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;\n              if (!authTime) {\n                throw ClientAuthError.createAuthTimeNotFoundError();\n              }\n              AuthToken.checkMaxAge(authTime, request.maxAge);\n            }\n            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return SilentFlowClient;\n}(BaseClient);\nexport { SilentFlowClient };","map":{"version":3,"names":["__extends","__awaiter","__generator","BaseClient","AuthToken","TimeUtils","RefreshTokenClient","ClientAuthError","ClientAuthErrorMessage","ClientConfigurationError","ResponseHandler","CacheOutcome","SilentFlowClient","_super","configuration","performanceClient","call","prototype","acquireToken","request","e_1","refreshTokenClient","_a","label","trys","push","acquireCachedToken","sent","errorCode","tokenRefreshRequired","code","config","acquireTokenByRefreshToken","_b","_c","_d","environment","cacheRecord","_e","createEmptyTokenRequestError","forceRefresh","serverTelemetryManager","setCacheOutcome","FORCE_REFRESH","logger","info","createRefreshRequiredError","account","createNoAccountInSilentRequestError","authority","getPreferredCache","cacheManager","readCacheRecord","authOptions","clientId","accessToken","NO_CACHED_ACCESS_TOKEN","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","REFRESH_CACHED_ACCESS_TOKEN","incrementCacheHits","generateResultFromCacheRecord","idTokenObj","authTime","idToken","secret","cryptoInterface","maxAge","claims","auth_time","createAuthTimeNotFoundError","checkMaxAge","generateAuthenticationResult","cryptoUtils"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-common/dist/client/SilentFlowClient.js"],"sourcesContent":["/*! @azure/msal-common v7.6.0 2022-10-10 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { RefreshTokenClient } from './RefreshTokenClient.js';\nimport { ClientAuthError, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { CacheOutcome } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar SilentFlowClient = /** @class */ (function (_super) {\r\n    __extends(SilentFlowClient, _super);\r\n    function SilentFlowClient(configuration, performanceClient) {\r\n        return _super.call(this, configuration, performanceClient) || this;\r\n    }\r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireToken = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1, refreshTokenClient;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.acquireCachedToken(request)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                            refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);\r\n                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\r\n                        }\r\n                        else {\r\n                            throw e_1;\r\n                        }\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    SilentFlowClient.prototype.acquireCachedToken = function (request) {\r\n        var _a, _b, _c, _d;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var environment, cacheRecord;\r\n            return __generator(this, function (_e) {\r\n                switch (_e.label) {\r\n                    case 0:\r\n                        // Cannot renew token if no request object is given.\r\n                        if (!request) {\r\n                            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n                        }\r\n                        if (request.forceRefresh) {\r\n                            // Must refresh due to present force_refresh flag.\r\n                            (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n                        if (!request.account) {\r\n                            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n                        }\r\n                        environment = request.authority || this.authority.getPreferredCache();\r\n                        cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, request, environment);\r\n                        if (!cacheRecord.accessToken) {\r\n                            // Must refresh due to non-existent access_token.\r\n                            (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n                            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n                            // Must refresh due to expired access_token.\r\n                            (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within \" + this.config.systemOptions.tokenRenewalOffsetSeconds + \" seconds.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n                            // Must refresh due to the refresh_in value.\r\n                            (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n                            this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.\");\r\n                            throw ClientAuthError.createRefreshRequiredError();\r\n                        }\r\n                        if (this.config.serverTelemetryManager) {\r\n                            this.config.serverTelemetryManager.incrementCacheHits();\r\n                        }\r\n                        return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\r\n                    case 1: return [2 /*return*/, _e.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var idTokenObj, authTime;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (cacheRecord.idToken) {\r\n                            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n                        }\r\n                        // token max_age check\r\n                        if (request.maxAge || (request.maxAge === 0)) {\r\n                            authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;\r\n                            if (!authTime) {\r\n                                throw ClientAuthError.createAuthTimeNotFoundError();\r\n                            }\r\n                            AuthToken.checkMaxAge(authTime, request.maxAge);\r\n                        }\r\n                        return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return SilentFlowClient;\r\n}(BaseClient));\n\nexport { SilentFlowClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}