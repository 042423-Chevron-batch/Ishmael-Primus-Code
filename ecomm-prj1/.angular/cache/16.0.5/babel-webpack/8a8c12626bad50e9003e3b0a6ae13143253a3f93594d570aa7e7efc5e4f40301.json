{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from './AuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nvar ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: \"client_info_decoding_error\",\n    desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n  },\n  clientInfoEmptyError: {\n    code: \"client_info_empty_error\",\n    desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n  },\n  tokenParsingError: {\n    code: \"token_parsing_error\",\n    desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n  },\n  nullOrEmptyToken: {\n    code: \"null_or_empty_token\",\n    desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n  },\n  endpointResolutionError: {\n    code: \"endpoints_resolution_error\",\n    desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n  },\n  networkError: {\n    code: \"network_error\",\n    desc: \"Network request failed. Please check network trace to determine root cause.\"\n  },\n  unableToGetOpenidConfigError: {\n    code: \"openid_config_error\",\n    desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n  },\n  hashNotDeserialized: {\n    code: \"hash_not_deserialized\",\n    desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n  },\n  blankGuidGenerated: {\n    code: \"blank_guid_generated\",\n    desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n  },\n  invalidStateError: {\n    code: \"invalid_state\",\n    desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n  },\n  stateMismatchError: {\n    code: \"state_mismatch\",\n    desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n  },\n  stateNotFoundError: {\n    code: \"state_not_found\",\n    desc: \"State not found\"\n  },\n  nonceMismatchError: {\n    code: \"nonce_mismatch\",\n    desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n  },\n  nonceNotFoundError: {\n    code: \"nonce_not_found\",\n    desc: \"nonce not found\"\n  },\n  authTimeNotFoundError: {\n    code: \"auth_time_not_found\",\n    desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\"\n  },\n  maxAgeTranspiredError: {\n    code: \"max_age_transpired\",\n    desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\"\n  },\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n  },\n  multipleMatchingTokens: {\n    code: \"multiple_matching_tokens\",\n    desc: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\"\n  },\n  multipleMatchingAccounts: {\n    code: \"multiple_matching_accounts\",\n    desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n  },\n  multipleMatchingAppMetadata: {\n    code: \"multiple_matching_appMetadata\",\n    desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n  },\n  tokenRequestCannotBeMade: {\n    code: \"request_cannot_be_made\",\n    desc: \"Token request cannot be made without authorization code or refresh token.\"\n  },\n  appendEmptyScopeError: {\n    code: \"cannot_append_empty_scope\",\n    desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n  },\n  removeEmptyScopeError: {\n    code: \"cannot_remove_empty_scope\",\n    desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n  },\n  appendScopeSetError: {\n    code: \"cannot_append_scopeset\",\n    desc: \"Cannot append ScopeSet due to error.\"\n  },\n  emptyInputScopeSetError: {\n    code: \"empty_input_scopeset\",\n    desc: \"Empty input ScopeSet cannot be processed.\"\n  },\n  DeviceCodePollingCancelled: {\n    code: \"device_code_polling_cancelled\",\n    desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n  },\n  DeviceCodeExpired: {\n    code: \"device_code_expired\",\n    desc: \"Device code is expired.\"\n  },\n  DeviceCodeUnknownError: {\n    code: \"device_code_unknown_error\",\n    desc: \"Device code stopped polling for unknown reasons.\"\n  },\n  NoAccountInSilentRequest: {\n    code: \"no_account_in_silent_request\",\n    desc: \"Please pass an account object, silent flow is not supported without account information\"\n  },\n  invalidCacheRecord: {\n    code: \"invalid_cache_record\",\n    desc: \"Cache record object was null or undefined.\"\n  },\n  invalidCacheEnvironment: {\n    code: \"invalid_cache_environment\",\n    desc: \"Invalid environment when attempting to create cache entry\"\n  },\n  noAccountFound: {\n    code: \"no_account_found\",\n    desc: \"No account found in cache for given key.\"\n  },\n  CachePluginError: {\n    code: \"no cache plugin set on CacheManager\",\n    desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n  },\n  noCryptoObj: {\n    code: \"no_crypto_object\",\n    desc: \"No crypto object detected. This is required for the following operation: \"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  unexpectedAccountType: {\n    code: \"unexpected_account_type\",\n    desc: \"Unexpected account type.\"\n  },\n  unexpectedCredentialType: {\n    code: \"unexpected_credential_type\",\n    desc: \"Unexpected credential type.\"\n  },\n  invalidAssertion: {\n    code: \"invalid_assertion\",\n    desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n  },\n  invalidClientCredential: {\n    code: \"invalid_client_credential\",\n    desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n  },\n  tokenRefreshRequired: {\n    code: \"token_refresh_required\",\n    desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n  },\n  userTimeoutReached: {\n    code: \"user_timeout_reached\",\n    desc: \"User defined timeout for device code polling reached\"\n  },\n  tokenClaimsRequired: {\n    code: \"token_claims_cnf_required_for_signedjwt\",\n    desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n  },\n  noAuthorizationCodeFromServer: {\n    code: \"authorization_code_missing_from_server_response\",\n    desc: \"Server response does not contain an authorization code to proceed\"\n  },\n  noAzureRegionDetected: {\n    code: \"no_azure_region_detected\",\n    desc: \"No azure region was detected and no fallback was made available\"\n  },\n  accessTokenEntityNullError: {\n    code: \"access_token_entity_null\",\n    desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n  },\n  bindingKeyNotRemovedError: {\n    code: \"binding_key_not_removed\",\n    desc: \"Could not remove the credential's binding key from storage.\"\n  },\n  logoutNotSupported: {\n    code: \"end_session_endpoint_not_supported\",\n    desc: \"Provided authority does not support logout.\"\n  },\n  keyIdMissing: {\n    code: \"key_id_missing\",\n    desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\"\n  },\n  noNetworkConnectivity: {\n    code: \"no_network_connectivity\",\n    desc: \"No network connectivity. Check your internet connection.\"\n  },\n  userCanceledError: {\n    code: \"user_canceled\",\n    desc: \"User canceled the flow.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\nvar ClientAuthError = /** @class */function (_super) {\n  __extends(ClientAuthError, _super);\n  function ClientAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n    _this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(_this, ClientAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when client info object doesn't decode correctly.\r\n   * @param caughtError\r\n   */\n  ClientAuthError.createClientInfoDecodingError = function (caughtError) {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\n  };\n  /**\r\n   * Creates an error thrown if the client info is empty.\r\n   * @param rawClientInfo\r\n   */\n  ClientAuthError.createClientInfoEmptyError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the id token extraction errors out.\r\n   * @param err\r\n   */\n  ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\n  };\n  /**\r\n   * Creates an error thrown when the id token string is null or empty.\r\n   * @param invalidRawTokenString\r\n   */\n  ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\n    return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\n  };\n  /**\r\n   * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n   */\n  ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the fetch client throws\r\n   */\n  ClientAuthError.createNetworkError = function (endpoint, errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n   */\n  ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the hash cannot be deserialized.\r\n   * @param hashParamObj\r\n   */\n  ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\n    return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\n  };\n  /**\r\n   * Creates an error thrown when the state cannot be parsed.\r\n   * @param invalidState\r\n   */\n  ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\n  };\n  /**\r\n   * Creates an error thrown when two states do not match.\r\n   */\n  ClientAuthError.createStateMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state is not present\r\n   * @param missingState\r\n   */\n  ClientAuthError.createStateNotFoundError = function (missingState) {\n    return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\n  };\n  /**\r\n   * Creates an error thrown when the nonce does not match.\r\n   */\n  ClientAuthError.createNonceMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\r\n   * @param missingNonce\r\n   */\n  ClientAuthError.createAuthTimeNotFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code, ClientAuthErrorMessage.authTimeNotFoundError.desc);\n  };\n  /**\r\n   * Creates an error thrown when too much time has elapsed since the last end-user authentication\r\n   */\n  ClientAuthError.createMaxAgeTranspiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code, ClientAuthErrorMessage.maxAgeTranspiredError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the mnonce is not present\r\n   * @param missingNonce\r\n   */\n  ClientAuthError.createNonceNotFoundError = function (missingNonce) {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\n  };\n  /**\r\n   * Throws error when multiple tokens are in cache.\r\n   */\n  ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\n  };\n  /**\r\n   * Throws error when multiple accounts are in cache for the given params\r\n   */\n  ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n  };\n  /**\r\n   * Throws error when multiple appMetada are in cache for the given clientId.\r\n   */\n  ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n  };\n  /**\r\n   * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n   */\n  ClientAuthError.createTokenRequestCannotBeMadeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n  ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n  ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append null or empty ScopeSet.\r\n   * @param appendError\r\n   */\n  ClientAuthError.createAppendScopeSetError = function (appendError) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\n  };\n  /**\r\n   * Throws error if ScopeSet is null or undefined.\r\n   * @param givenScopeSet\r\n   */\n  ClientAuthError.createEmptyInputScopeSetError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\n  };\n  /**\r\n   * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n   */\n  ClientAuthError.createDeviceCodeCancelledError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n  ClientAuthError.createDeviceCodeExpiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n  ClientAuthError.createDeviceCodeUnknownError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\n  };\n  /**\r\n   * Throws error when silent requests are made without an account object\r\n   */\n  ClientAuthError.createNoAccountInSilentRequestError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\n  };\n  /**\r\n   * Throws error when cache record is null or undefined.\r\n   */\n  ClientAuthError.createNullOrUndefinedCacheRecord = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n  };\n  /**\r\n   * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n   */\n  ClientAuthError.createInvalidCacheEnvironmentError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n  };\n  /**\r\n   * Throws error when account is not found in cache.\r\n   */\n  ClientAuthError.createNoAccountFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n  };\n  /**\r\n   * Throws error if ICachePlugin not set on CacheManager.\r\n   */\n  ClientAuthError.createCachePluginError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\n  };\n  /**\r\n   * Throws error if crypto object not found.\r\n   * @param operationName\r\n   */\n  ClientAuthError.createNoCryptoObjectError = function (operationName) {\n    return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\n  };\n  /**\r\n   * Throws error if cache type is invalid.\r\n   */\n  ClientAuthError.createInvalidCacheTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Throws error if unexpected account type.\r\n   */\n  ClientAuthError.createUnexpectedAccountTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\n  };\n  /**\r\n   * Throws error if unexpected credential type.\r\n   */\n  ClientAuthError.createUnexpectedCredentialTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n  ClientAuthError.createInvalidAssertionError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n  ClientAuthError.createInvalidCredentialError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\n  };\n  /**\r\n   * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n   */\n  ClientAuthError.createRefreshRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n  };\n  /**\r\n   * Throws error if the user defined timeout is reached.\r\n   */\n  ClientAuthError.createUserTimeoutReachedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n  };\n  /*\r\n   * Throws error if token claims are not populated for a signed jwt generation\r\n   */\n  ClientAuthError.createTokenClaimsRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n  };\n  /**\r\n   * Throws error when the authorization code is missing from the server response\r\n   */\n  ClientAuthError.createNoAuthCodeInServerResponseError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n  };\n  ClientAuthError.createBindingKeyNotRemovedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n  };\n  /**\r\n   * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\r\n   */\n  ClientAuthError.createLogoutNotSupportedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n  };\n  /**\r\n   * Create an error when kid attribute is missing from a PoP token's cache record\r\n   */\n  ClientAuthError.createKeyIdMissingError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\n  };\n  /**\r\n   * Create an error when the client does not have network connectivity\r\n   */\n  ClientAuthError.createNoNetworkConnectivityError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noNetworkConnectivity.code, ClientAuthErrorMessage.noNetworkConnectivity.desc);\n  };\n  /**\r\n   * Create an error when the user cancels the flow\r\n   */\n  ClientAuthError.createUserCanceledError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.userCanceledError.code, ClientAuthErrorMessage.userCanceledError.desc);\n  };\n  return ClientAuthError;\n}(AuthError);\nexport { ClientAuthError, ClientAuthErrorMessage };","map":{"version":3,"names":["__extends","AuthError","ClientAuthErrorMessage","clientInfoDecodingError","code","desc","clientInfoEmptyError","tokenParsingError","nullOrEmptyToken","endpointResolutionError","networkError","unableToGetOpenidConfigError","hashNotDeserialized","blankGuidGenerated","invalidStateError","stateMismatchError","stateNotFoundError","nonceMismatchError","nonceNotFoundError","authTimeNotFoundError","maxAgeTranspiredError","noTokensFoundError","multipleMatchingTokens","multipleMatchingAccounts","multipleMatchingAppMetadata","tokenRequestCannotBeMade","appendEmptyScopeError","removeEmptyScopeError","appendScopeSetError","emptyInputScopeSetError","DeviceCodePollingCancelled","DeviceCodeExpired","DeviceCodeUnknownError","NoAccountInSilentRequest","invalidCacheRecord","invalidCacheEnvironment","noAccountFound","CachePluginError","noCryptoObj","invalidCacheType","unexpectedAccountType","unexpectedCredentialType","invalidAssertion","invalidClientCredential","tokenRefreshRequired","userTimeoutReached","tokenClaimsRequired","noAuthorizationCodeFromServer","noAzureRegionDetected","accessTokenEntityNullError","bindingKeyNotRemovedError","logoutNotSupported","keyIdMissing","noNetworkConnectivity","userCanceledError","ClientAuthError","_super","errorCode","errorMessage","_this","call","name","Object","setPrototypeOf","prototype","createClientInfoDecodingError","caughtError","createClientInfoEmptyError","createTokenParsingError","caughtExtractionError","createTokenNullOrEmptyError","invalidRawTokenString","createEndpointDiscoveryIncompleteError","errDetail","createNetworkError","endpoint","split","createUnableToGetOpenidConfigError","createHashNotDeserializedError","hashParamObj","createInvalidStateError","invalidState","errorString","createStateMismatchError","createStateNotFoundError","missingState","createNonceMismatchError","createAuthTimeNotFoundError","createMaxAgeTranspiredError","createNonceNotFoundError","missingNonce","createMultipleMatchingTokensInCacheError","createMultipleMatchingAccountsInCacheError","createMultipleMatchingAppMetadataInCacheError","createTokenRequestCannotBeMadeError","createAppendEmptyScopeToSetError","givenScope","createRemoveEmptyScopeFromSetError","createAppendScopeSetError","appendError","createEmptyInputScopeSetError","createDeviceCodeCancelledError","createDeviceCodeExpiredError","createDeviceCodeUnknownError","createNoAccountInSilentRequestError","createNullOrUndefinedCacheRecord","createInvalidCacheEnvironmentError","createNoAccountFoundError","createCachePluginError","createNoCryptoObjectError","operationName","createInvalidCacheTypeError","createUnexpectedAccountTypeError","createUnexpectedCredentialTypeError","createInvalidAssertionError","createInvalidCredentialError","createRefreshRequiredError","createUserTimeoutReachedError","createTokenClaimsRequiredError","createNoAuthCodeInServerResponseError","createBindingKeyNotRemovedError","createLogoutNotSupportedError","createKeyIdMissingError","createNoNetworkConnectivityError","createUserCanceledError"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/error/ClientAuthError.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from './AuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nvar ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: \"client_info_empty_error\",\r\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    tokenParsingError: {\r\n        code: \"token_parsing_error\",\r\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: \"null_or_empty_token\",\r\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    networkError: {\r\n        code: \"network_error\",\r\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: \"openid_config_error\",\r\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\r\n    },\r\n    hashNotDeserialized: {\r\n        code: \"hash_not_deserialized\",\r\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\r\n    },\r\n    blankGuidGenerated: {\r\n        code: \"blank_guid_generated\",\r\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state\",\r\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\r\n    },\r\n    stateMismatchError: {\r\n        code: \"state_mismatch\",\r\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\r\n    },\r\n    stateNotFoundError: {\r\n        code: \"state_not_found\",\r\n        desc: \"State not found\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch\",\r\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\r\n    },\r\n    nonceNotFoundError: {\r\n        code: \"nonce_not_found\",\r\n        desc: \"nonce not found\"\r\n    },\r\n    authTimeNotFoundError: {\r\n        code: \"auth_time_not_found\",\r\n        desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\r\n            \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\r\n            \" See https://aka.ms/msaljs/optional-claims for more information.\"\r\n    },\r\n    maxAgeTranspiredError: {\r\n        code: \"max_age_transpired\",\r\n        desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\"\r\n    },\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: \"multiple_matching_accounts\",\r\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: \"multiple_matching_appMetadata\",\r\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: \"request_cannot_be_made\",\r\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\r\n    },\r\n    appendEmptyScopeError: {\r\n        code: \"cannot_append_empty_scope\",\r\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: \"cannot_remove_empty_scope\",\r\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    appendScopeSetError: {\r\n        code: \"cannot_append_scopeset\",\r\n        desc: \"Cannot append ScopeSet due to error.\"\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: \"empty_input_scopeset\",\r\n        desc: \"Empty input ScopeSet cannot be processed.\"\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: \"device_code_polling_cancelled\",\r\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: \"device_code_expired\",\r\n        desc: \"Device code is expired.\"\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: \"device_code_unknown_error\",\r\n        desc: \"Device code stopped polling for unknown reasons.\"\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: \"no_account_in_silent_request\",\r\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\r\n    },\r\n    invalidCacheRecord: {\r\n        code: \"invalid_cache_record\",\r\n        desc: \"Cache record object was null or undefined.\"\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: \"invalid_cache_environment\",\r\n        desc: \"Invalid environment when attempting to create cache entry\"\r\n    },\r\n    noAccountFound: {\r\n        code: \"no_account_found\",\r\n        desc: \"No account found in cache for given key.\"\r\n    },\r\n    CachePluginError: {\r\n        code: \"no cache plugin set on CacheManager\",\r\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\r\n    },\r\n    noCryptoObj: {\r\n        code: \"no_crypto_object\",\r\n        desc: \"No crypto object detected. This is required for the following operation: \"\r\n    },\r\n    invalidCacheType: {\r\n        code: \"invalid_cache_type\",\r\n        desc: \"Invalid cache type\"\r\n    },\r\n    unexpectedAccountType: {\r\n        code: \"unexpected_account_type\",\r\n        desc: \"Unexpected account type.\"\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: \"unexpected_credential_type\",\r\n        desc: \"Unexpected credential type.\"\r\n    },\r\n    invalidAssertion: {\r\n        code: \"invalid_assertion\",\r\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\r\n    },\r\n    invalidClientCredential: {\r\n        code: \"invalid_client_credential\",\r\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: \"token_refresh_required\",\r\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\r\n    },\r\n    userTimeoutReached: {\r\n        code: \"user_timeout_reached\",\r\n        desc: \"User defined timeout for device code polling reached\",\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: \"token_claims_cnf_required_for_signedjwt\",\r\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: \"authorization_code_missing_from_server_response\",\r\n        desc: \"Server response does not contain an authorization code to proceed\"\r\n    },\r\n    noAzureRegionDetected: {\r\n        code: \"no_azure_region_detected\",\r\n        desc: \"No azure region was detected and no fallback was made available\"\r\n    },\r\n    accessTokenEntityNullError: {\r\n        code: \"access_token_entity_null\",\r\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\r\n    },\r\n    bindingKeyNotRemovedError: {\r\n        code: \"binding_key_not_removed\",\r\n        desc: \"Could not remove the credential's binding key from storage.\"\r\n    },\r\n    logoutNotSupported: {\r\n        code: \"end_session_endpoint_not_supported\",\r\n        desc: \"Provided authority does not support logout.\"\r\n    },\r\n    keyIdMissing: {\r\n        code: \"key_id_missing\",\r\n        desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\"\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: \"no_network_connectivity\",\r\n        desc: \"No network connectivity. Check your internet connection.\"\r\n    },\r\n    userCanceledError: {\r\n        code: \"user_canceled\",\r\n        desc: \"User canceled the flow.\"\r\n    }\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nvar ClientAuthError = /** @class */ (function (_super) {\r\n    __extends(ClientAuthError, _super);\r\n    function ClientAuthError(errorCode, errorMessage) {\r\n        var _this = _super.call(this, errorCode, errorMessage) || this;\r\n        _this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(_this, ClientAuthError.prototype);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates an error thrown when client info object doesn't decode correctly.\r\n     * @param caughtError\r\n     */\r\n    ClientAuthError.createClientInfoDecodingError = function (caughtError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\r\n    };\r\n    /**\r\n     * Creates an error thrown if the client info is empty.\r\n     * @param rawClientInfo\r\n     */\r\n    ClientAuthError.createClientInfoEmptyError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token extraction errors out.\r\n     * @param err\r\n     */\r\n    ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the id token string is null or empty.\r\n     * @param invalidRawTokenString\r\n     */\r\n    ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n     */\r\n    ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the fetch client throws\r\n     */\r\n    ClientAuthError.createNetworkError = function (endpoint, errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n     */\r\n    ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the hash cannot be deserialized.\r\n     * @param hashParamObj\r\n     */\r\n    ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state cannot be parsed.\r\n     * @param invalidState\r\n     */\r\n    ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\r\n    };\r\n    /**\r\n     * Creates an error thrown when two states do not match.\r\n     */\r\n    ClientAuthError.createStateMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the state is not present\r\n     * @param missingState\r\n     */\r\n    ClientAuthError.createStateNotFoundError = function (missingState) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the nonce does not match.\r\n     */\r\n    ClientAuthError.createNonceMismatchError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\r\n     * @param missingNonce\r\n     */\r\n    ClientAuthError.createAuthTimeNotFoundError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code, ClientAuthErrorMessage.authTimeNotFoundError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when too much time has elapsed since the last end-user authentication\r\n     */\r\n    ClientAuthError.createMaxAgeTranspiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code, ClientAuthErrorMessage.maxAgeTranspiredError.desc);\r\n    };\r\n    /**\r\n     * Creates an error thrown when the mnonce is not present\r\n     * @param missingNonce\r\n     */\r\n    ClientAuthError.createNonceNotFoundError = function (missingNonce) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\r\n    };\r\n    /**\r\n     * Throws error when multiple tokens are in cache.\r\n     */\r\n    ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\r\n    };\r\n    /**\r\n     * Throws error when multiple accounts are in cache for the given params\r\n     */\r\n    ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\r\n    };\r\n    /**\r\n     * Throws error when multiple appMetada are in cache for the given clientId.\r\n     */\r\n    ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\r\n    };\r\n    /**\r\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n     */\r\n    ClientAuthError.createTokenRequestCannotBeMadeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\r\n    };\r\n    /**\r\n     * Throws error when attempting to append null or empty ScopeSet.\r\n     * @param appendError\r\n     */\r\n    ClientAuthError.createAppendScopeSetError = function (appendError) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\r\n    };\r\n    /**\r\n     * Throws error if ScopeSet is null or undefined.\r\n     * @param givenScopeSet\r\n     */\r\n    ClientAuthError.createEmptyInputScopeSetError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\r\n    };\r\n    /**\r\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n     */\r\n    ClientAuthError.createDeviceCodeCancelledError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeExpiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\r\n    };\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    ClientAuthError.createDeviceCodeUnknownError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\r\n    };\r\n    /**\r\n     * Throws error when silent requests are made without an account object\r\n     */\r\n    ClientAuthError.createNoAccountInSilentRequestError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\r\n    };\r\n    /**\r\n     * Throws error when cache record is null or undefined.\r\n     */\r\n    ClientAuthError.createNullOrUndefinedCacheRecord = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\r\n    };\r\n    /**\r\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n     */\r\n    ClientAuthError.createInvalidCacheEnvironmentError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\r\n    };\r\n    /**\r\n     * Throws error when account is not found in cache.\r\n     */\r\n    ClientAuthError.createNoAccountFoundError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\r\n    };\r\n    /**\r\n     * Throws error if ICachePlugin not set on CacheManager.\r\n     */\r\n    ClientAuthError.createCachePluginError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\r\n    };\r\n    /**\r\n     * Throws error if crypto object not found.\r\n     * @param operationName\r\n     */\r\n    ClientAuthError.createNoCryptoObjectError = function (operationName) {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\r\n    };\r\n    /**\r\n     * Throws error if cache type is invalid.\r\n     */\r\n    ClientAuthError.createInvalidCacheTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected account type.\r\n     */\r\n    ClientAuthError.createUnexpectedAccountTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\r\n    };\r\n    /**\r\n     * Throws error if unexpected credential type.\r\n     */\r\n    ClientAuthError.createUnexpectedCredentialTypeError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidAssertionError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\r\n    };\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    ClientAuthError.createInvalidCredentialError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\r\n    };\r\n    /**\r\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n     */\r\n    ClientAuthError.createRefreshRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error if the user defined timeout is reached.\r\n     */\r\n    ClientAuthError.createUserTimeoutReachedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\r\n    };\r\n    /*\r\n     * Throws error if token claims are not populated for a signed jwt generation\r\n     */\r\n    ClientAuthError.createTokenClaimsRequiredError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\r\n    };\r\n    /**\r\n     * Throws error when the authorization code is missing from the server response\r\n     */\r\n    ClientAuthError.createNoAuthCodeInServerResponseError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\r\n    };\r\n    ClientAuthError.createBindingKeyNotRemovedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\r\n    };\r\n    /**\r\n     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\r\n     */\r\n    ClientAuthError.createLogoutNotSupportedError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\r\n    };\r\n    /**\r\n     * Create an error when kid attribute is missing from a PoP token's cache record\r\n     */\r\n    ClientAuthError.createKeyIdMissingError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\r\n    };\r\n    /**\r\n     * Create an error when the client does not have network connectivity\r\n     */\r\n    ClientAuthError.createNoNetworkConnectivityError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noNetworkConnectivity.code, ClientAuthErrorMessage.noNetworkConnectivity.desc);\r\n    };\r\n    /**\r\n     * Create an error when the user cancels the flow\r\n     */\r\n    ClientAuthError.createUserCanceledError = function () {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userCanceledError.code, ClientAuthErrorMessage.userCanceledError.desc);\r\n    };\r\n    return ClientAuthError;\r\n}(AuthError));\n\nexport { ClientAuthError, ClientAuthErrorMessage };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}