{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __assign } from '../../_virtual/_tslib.js';\nimport { IntFields, PerformanceEventStatus } from './PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar PerformanceClient = /** @class */function () {\n  /**\r\n   * Creates an instance of PerformanceClient,\r\n   * an abstract class containing core performance telemetry logic.\r\n   *\r\n   * @constructor\r\n   * @param {string} clientId Client ID of the application\r\n   * @param {string} authority Authority used by the application\r\n   * @param {Logger} logger Logger used by the application\r\n   * @param {string} libraryName Name of the library\r\n   * @param {string} libraryVersion Version of the library\r\n   */\n  function PerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) {\n    this.authority = authority;\n    this.libraryName = libraryName;\n    this.libraryVersion = libraryVersion;\n    this.applicationTelemetry = applicationTelemetry;\n    this.clientId = clientId;\n    this.logger = logger;\n    this.callbacks = new Map();\n    this.eventsByCorrelationId = new Map();\n    this.queueMeasurements = new Map();\n    this.preQueueTimeByCorrelationId = new Map();\n  }\n  /**\r\n   * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n   * Note: this function can be changed to abstract at the next major version bump.\r\n   *\r\n   * @param {string} measureName\r\n   * @param {string} correlationId\r\n   * @returns {IPerformanceMeasurement}\r\n   */\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  PerformanceClient.prototype.startPerformanceMeasurement = function (measureName, correlationId) {\n    return {};\n  };\n  /**\r\n   * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n   * Note: this incorrectly-named function will be removed at the next major version bump.\r\n   *\r\n   * @param {string} measureName\r\n   * @param {string} correlationId\r\n   * @returns {IPerformanceMeasurement}\r\n   */\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  PerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return {};\n  };\n  /**\r\n   * Get integral fields.\r\n   * Override to change the set.\r\n   */\n  PerformanceClient.prototype.getIntFields = function () {\n    return IntFields;\n  };\n  /**\r\n   * Gets map of pre-queue times by correlation Id\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {string} correlationId\r\n   * @returns {number}\r\n   */\n  PerformanceClient.prototype.getPreQueueTime = function (eventName, correlationId) {\n    var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\n    if (!preQueueEvent) {\n      this.logger.trace(\"PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: \" + correlationId + \", unable to add queue measurement\");\n      return;\n    } else if (preQueueEvent.name !== eventName) {\n      this.logger.trace(\"PerformanceClient.getPreQueueTime: no pre-queue time found for \" + eventName + \", unable to add queue measurement\");\n      return;\n    }\n    return preQueueEvent.time;\n  };\n  /**\r\n   * Calculates the difference between current time and time when function was queued.\r\n   * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\r\n   *\r\n   * @param {number} preQueueTime\r\n   * @param {number} currentTime\r\n   * @returns {number}\r\n   */\n  PerformanceClient.prototype.calculateQueuedTime = function (preQueueTime, currentTime) {\n    if (preQueueTime < 1) {\n      this.logger.trace(\"PerformanceClient: preQueueTime should be a positive integer and not \" + preQueueTime);\n      return 0;\n    }\n    if (currentTime < 1) {\n      this.logger.trace(\"PerformanceClient: currentTime should be a positive integer and not \" + currentTime);\n      return 0;\n    }\n    if (currentTime < preQueueTime) {\n      this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\n      return 0;\n    }\n    return currentTime - preQueueTime;\n  };\n  /**\r\n   * Adds queue measurement time to QueueMeasurements array for given correlation ID.\r\n   *\r\n   * @param {PerformanceEvents} eventName\r\n   * @param {?string} correlationId\r\n   * @param {?number} queueTime\r\n   * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n   * @returns\r\n   */\n  PerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\n    if (!correlationId) {\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: correlationId not provided for \" + eventName + \", cannot add queue measurement\");\n      return;\n    }\n    if (queueTime === 0) {\n      // Possible for there to be no queue time after calculation\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: queue time provided for \" + eventName + \" is \" + queueTime);\n    } else if (!queueTime) {\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: no queue time provided for \" + eventName);\n      return;\n    }\n    var queueMeasurement = {\n      eventName: eventName,\n      queueTime: queueTime,\n      manuallyCompleted: manuallyCompleted\n    };\n    // Adds to existing correlation Id if present in queueMeasurements\n    var existingMeasurements = this.queueMeasurements.get(correlationId);\n    if (existingMeasurements) {\n      existingMeasurements.push(queueMeasurement);\n      this.queueMeasurements.set(correlationId, existingMeasurements);\n    } else {\n      // Sets new correlation Id if not present in queueMeasurements\n      this.logger.trace(\"PerformanceClient.addQueueMeasurement: adding correlationId \" + correlationId + \" to queue measurements\");\n      var measurementArray = [queueMeasurement];\n      this.queueMeasurements.set(correlationId, measurementArray);\n    }\n    // Delete processed pre-queue event.\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {InProgressPerformanceEvent}\r\n   */\n  PerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this;\n    var _a, _b;\n    // Generate a placeholder correlation if the request does not provide one\n    var eventCorrelationId = correlationId || this.generateId();\n    if (!correlationId) {\n      this.logger.info(\"PerformanceClient: No correlation id provided for \" + measureName + \", generating\", eventCorrelationId);\n    }\n    // Duplicate code to address spelling error will be removed at the next major version bump.\n    this.logger.trace(\"PerformanceClient: Performance measurement started for \" + measureName, eventCorrelationId);\n    var performanceMeasurement = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\n    performanceMeasurement.startMeasurement();\n    var inProgressEvent = {\n      eventId: this.generateId(),\n      status: PerformanceEventStatus.InProgress,\n      authority: this.authority,\n      libraryName: this.libraryName,\n      libraryVersion: this.libraryVersion,\n      clientId: this.clientId,\n      name: measureName,\n      startTimeMs: Date.now(),\n      correlationId: eventCorrelationId,\n      appName: (_a = this.applicationTelemetry) === null || _a === void 0 ? void 0 : _a.appName,\n      appVersion: (_b = this.applicationTelemetry) === null || _b === void 0 ? void 0 : _b.appVersion\n    };\n    // Store in progress events so they can be discarded if not ended properly\n    this.cacheEventByCorrelationId(inProgressEvent);\n    // Return the event and functions the caller can use to properly end/flush the measurement\n    return {\n      endMeasurement: function (event) {\n        return _this.endMeasurement(__assign(__assign({}, inProgressEvent), event), performanceMeasurement);\n      },\n      discardMeasurement: function () {\n        return _this.discardMeasurements(inProgressEvent.correlationId);\n      },\n      addStaticFields: function (fields) {\n        return _this.addStaticFields(fields, inProgressEvent.correlationId);\n      },\n      increment: function (counters) {\n        return _this.increment(counters, inProgressEvent.correlationId);\n      },\n      measurement: performanceMeasurement,\n      event: inProgressEvent\n    };\n  };\n  /**\r\n   * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n   * as consumers should instead use the function returned by startMeasurement.\r\n   * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\r\n   * otherwise.\r\n   *\r\n   * @param {PerformanceEvent} event\r\n   * @param {IPerformanceMeasurement} measurement\r\n   * @returns {(PerformanceEvent | null)}\r\n   */\n  PerformanceClient.prototype.endMeasurement = function (event, measurement) {\n    var _this = this;\n    var _a, _b;\n    var rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (!rootEvent) {\n      this.logger.trace(\"PerformanceClient: Measurement not found for \" + event.eventId, event.correlationId);\n      return null;\n    }\n    var isRoot = event.eventId === rootEvent.eventId;\n    var queueInfo = {\n      totalQueueTime: 0,\n      totalQueueCount: 0,\n      manuallyCompletedCount: 0\n    };\n    if (isRoot) {\n      queueInfo = this.getQueueInfo(event.correlationId);\n      this.discardCache(rootEvent.correlationId);\n    } else {\n      (_a = rootEvent.incompleteSubMeasurements) === null || _a === void 0 ? void 0 : _a.delete(event.eventId);\n    }\n    measurement === null || measurement === void 0 ? void 0 : measurement.endMeasurement();\n    var durationMs = measurement === null || measurement === void 0 ? void 0 : measurement.flushMeasurement();\n    // null indicates no measurement was taken (e.g. needed performance APIs not present)\n    if (!durationMs) {\n      this.logger.trace(\"PerformanceClient: Performance measurement not taken\", rootEvent.correlationId);\n      return null;\n    }\n    this.logger.trace(\"PerformanceClient: Performance measurement ended for \" + event.name + \": \" + durationMs + \" ms\", event.correlationId);\n    // Add sub-measurement attribute to root event.\n    if (!isRoot) {\n      rootEvent[event.name + \"DurationMs\"] = Math.floor(durationMs);\n      return __assign({}, rootEvent);\n    }\n    var finalEvent = __assign(__assign({}, rootEvent), event);\n    var incompleteSubsCount = 0;\n    // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\n    (_b = finalEvent.incompleteSubMeasurements) === null || _b === void 0 ? void 0 : _b.forEach(function (subMeasurement) {\n      _this.logger.trace(\"PerformanceClient: Incomplete submeasurement \" + subMeasurement.name + \" found for \" + event.name, finalEvent.correlationId);\n      incompleteSubsCount++;\n    });\n    finalEvent.incompleteSubMeasurements = undefined;\n    finalEvent = __assign(__assign({}, finalEvent), {\n      durationMs: Math.round(durationMs),\n      queuedTimeMs: queueInfo.totalQueueTime,\n      queuedCount: queueInfo.totalQueueCount,\n      queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount,\n      status: PerformanceEventStatus.Completed,\n      incompleteSubsCount: incompleteSubsCount\n    });\n    this.truncateIntegralFields(finalEvent, this.getIntFields());\n    this.emitEvents([finalEvent], event.correlationId);\n    return finalEvent;\n  };\n  /**\r\n   * Saves extra information to be emitted when the measurements are flushed\r\n   * @param fields\r\n   * @param correlationId\r\n   */\n  PerformanceClient.prototype.addStaticFields = function (fields, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating static fields\");\n    var event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      this.eventsByCorrelationId.set(correlationId, __assign(__assign({}, event), fields));\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  };\n  /**\r\n   * Increment counters to be emitted when the measurements are flushed\r\n   * @param counters {Counters}\r\n   * @param correlationId {string} correlation identifier\r\n   */\n  PerformanceClient.prototype.increment = function (counters, correlationId) {\n    this.logger.trace(\"PerformanceClient: Updating counters\");\n    var event = this.eventsByCorrelationId.get(correlationId);\n    if (event) {\n      for (var counter in counters) {\n        if (!event.hasOwnProperty(counter)) {\n          event[counter] = 0;\n        }\n        event[counter] += counters[counter];\n      }\n    } else {\n      this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\n    }\n  };\n  /**\r\n   * Upserts event into event cache.\r\n   * First key is the correlation id, second key is the event id.\r\n   * Allows for events to be grouped by correlation id,\r\n   * and to easily allow for properties on them to be updated.\r\n   *\r\n   * @private\r\n   * @param {PerformanceEvent} event\r\n   */\n  PerformanceClient.prototype.cacheEventByCorrelationId = function (event) {\n    var rootEvent = this.eventsByCorrelationId.get(event.correlationId);\n    if (rootEvent) {\n      this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" added/updated\", event.correlationId);\n      rootEvent.incompleteSubMeasurements = rootEvent.incompleteSubMeasurements || new Map();\n      rootEvent.incompleteSubMeasurements.set(event.eventId, {\n        name: event.name,\n        startTimeMs: event.startTimeMs\n      });\n    } else {\n      this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" started\", event.correlationId);\n      this.eventsByCorrelationId.set(event.correlationId, __assign({}, event));\n    }\n  };\n  PerformanceClient.prototype.getQueueInfo = function (correlationId) {\n    var queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\n    if (!queueMeasurementForCorrelationId) {\n      this.logger.trace(\"PerformanceClient: no queue measurements found for for correlationId: \" + correlationId);\n    }\n    var totalQueueTime = 0;\n    var totalQueueCount = 0;\n    var manuallyCompletedCount = 0;\n    queueMeasurementForCorrelationId === null || queueMeasurementForCorrelationId === void 0 ? void 0 : queueMeasurementForCorrelationId.forEach(function (measurement) {\n      totalQueueTime += measurement.queueTime;\n      totalQueueCount++;\n      manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\n    });\n    return {\n      totalQueueTime: totalQueueTime,\n      totalQueueCount: totalQueueCount,\n      manuallyCompletedCount: manuallyCompletedCount\n    };\n  };\n  /**\r\n   * Removes measurements for a given correlation id.\r\n   *\r\n   * @param {string} correlationId\r\n   */\n  PerformanceClient.prototype.discardMeasurements = function (correlationId) {\n    this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\n    this.eventsByCorrelationId.delete(correlationId);\n  };\n  /**\r\n   * Removes cache for a given correlation id.\r\n   *\r\n   * @param {string} correlationId correlation identifier\r\n   */\n  PerformanceClient.prototype.discardCache = function (correlationId) {\n    this.discardMeasurements(correlationId);\n    this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\n    this.queueMeasurements.delete(correlationId);\n    this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\n    this.preQueueTimeByCorrelationId.delete(correlationId);\n  };\n  /**\r\n   * Registers a callback function to receive performance events.\r\n   *\r\n   * @param {PerformanceCallbackFunction} callback\r\n   * @returns {string}\r\n   */\n  PerformanceClient.prototype.addPerformanceCallback = function (callback) {\n    var callbackId = this.generateId();\n    this.callbacks.set(callbackId, callback);\n    this.logger.verbose(\"PerformanceClient: Performance callback registered with id: \" + callbackId);\n    return callbackId;\n  };\n  /**\r\n   * Removes a callback registered with addPerformanceCallback.\r\n   *\r\n   * @param {string} callbackId\r\n   * @returns {boolean}\r\n   */\n  PerformanceClient.prototype.removePerformanceCallback = function (callbackId) {\n    var result = this.callbacks.delete(callbackId);\n    if (result) {\n      this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" removed.\");\n    } else {\n      this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" not removed.\");\n    }\n    return result;\n  };\n  /**\r\n   * Emits events to all registered callbacks.\r\n   *\r\n   * @param {PerformanceEvent[]} events\r\n   * @param {?string} [correlationId]\r\n   */\n  PerformanceClient.prototype.emitEvents = function (events, correlationId) {\n    var _this = this;\n    this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\n    this.callbacks.forEach(function (callback, callbackId) {\n      _this.logger.trace(\"PerformanceClient: Emitting event to callback \" + callbackId, correlationId);\n      callback.apply(null, [events]);\n    });\n  };\n  /**\r\n   * Enforce truncation of integral fields in performance event.\r\n   * @param {PerformanceEvent} event performance event to update.\r\n   * @param {Set<string>} intFields integral fields.\r\n   */\n  PerformanceClient.prototype.truncateIntegralFields = function (event, intFields) {\n    intFields.forEach(function (key) {\n      if (key in event && typeof event[key] === \"number\") {\n        event[key] = Math.floor(event[key]);\n      }\n    });\n  };\n  return PerformanceClient;\n}();\nexport { PerformanceClient };","map":{"version":3,"names":["__assign","IntFields","PerformanceEventStatus","PerformanceClient","clientId","authority","logger","libraryName","libraryVersion","applicationTelemetry","callbacks","Map","eventsByCorrelationId","queueMeasurements","preQueueTimeByCorrelationId","prototype","startPerformanceMeasurement","measureName","correlationId","startPerformanceMeasuremeant","getIntFields","getPreQueueTime","eventName","preQueueEvent","get","trace","name","time","calculateQueuedTime","preQueueTime","currentTime","addQueueMeasurement","queueTime","manuallyCompleted","queueMeasurement","existingMeasurements","push","set","measurementArray","delete","startMeasurement","_this","_a","_b","eventCorrelationId","generateId","info","performanceMeasurement","inProgressEvent","eventId","status","InProgress","startTimeMs","Date","now","appName","appVersion","cacheEventByCorrelationId","endMeasurement","event","discardMeasurement","discardMeasurements","addStaticFields","fields","increment","counters","measurement","rootEvent","isRoot","queueInfo","totalQueueTime","totalQueueCount","manuallyCompletedCount","getQueueInfo","discardCache","incompleteSubMeasurements","durationMs","flushMeasurement","Math","floor","finalEvent","incompleteSubsCount","forEach","subMeasurement","undefined","round","queuedTimeMs","queuedCount","queuedManuallyCompletedCount","Completed","truncateIntegralFields","emitEvents","counter","hasOwnProperty","queueMeasurementForCorrelationId","addPerformanceCallback","callback","callbackId","verbose","removePerformanceCallback","result","events","apply","intFields","key"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceClient.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __assign } from '../../_virtual/_tslib.js';\nimport { IntFields, PerformanceEventStatus } from './PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar PerformanceClient = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of PerformanceClient,\r\n     * an abstract class containing core performance telemetry logic.\r\n     *\r\n     * @constructor\r\n     * @param {string} clientId Client ID of the application\r\n     * @param {string} authority Authority used by the application\r\n     * @param {Logger} logger Logger used by the application\r\n     * @param {string} libraryName Name of the library\r\n     * @param {string} libraryVersion Version of the library\r\n     */\r\n    function PerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) {\r\n        this.authority = authority;\r\n        this.libraryName = libraryName;\r\n        this.libraryVersion = libraryVersion;\r\n        this.applicationTelemetry = applicationTelemetry;\r\n        this.clientId = clientId;\r\n        this.logger = logger;\r\n        this.callbacks = new Map();\r\n        this.eventsByCorrelationId = new Map();\r\n        this.queueMeasurements = new Map();\r\n        this.preQueueTimeByCorrelationId = new Map();\r\n    }\r\n    /**\r\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n     * Note: this function can be changed to abstract at the next major version bump.\r\n     *\r\n     * @param {string} measureName\r\n     * @param {string} correlationId\r\n     * @returns {IPerformanceMeasurement}\r\n     */\r\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n    PerformanceClient.prototype.startPerformanceMeasurement = function (measureName, correlationId) {\r\n        return {};\r\n    };\r\n    /**\r\n     * Starts and returns an platform-specific implementation of IPerformanceMeasurement.\r\n     * Note: this incorrectly-named function will be removed at the next major version bump.\r\n     *\r\n     * @param {string} measureName\r\n     * @param {string} correlationId\r\n     * @returns {IPerformanceMeasurement}\r\n     */\r\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\r\n    PerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\r\n        return {};\r\n    };\r\n    /**\r\n     * Get integral fields.\r\n     * Override to change the set.\r\n     */\r\n    PerformanceClient.prototype.getIntFields = function () {\r\n        return IntFields;\r\n    };\r\n    /**\r\n     * Gets map of pre-queue times by correlation Id\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {string} correlationId\r\n     * @returns {number}\r\n     */\r\n    PerformanceClient.prototype.getPreQueueTime = function (eventName, correlationId) {\r\n        var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);\r\n        if (!preQueueEvent) {\r\n            this.logger.trace(\"PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: \" + correlationId + \", unable to add queue measurement\");\r\n            return;\r\n        }\r\n        else if (preQueueEvent.name !== eventName) {\r\n            this.logger.trace(\"PerformanceClient.getPreQueueTime: no pre-queue time found for \" + eventName + \", unable to add queue measurement\");\r\n            return;\r\n        }\r\n        return preQueueEvent.time;\r\n    };\r\n    /**\r\n     * Calculates the difference between current time and time when function was queued.\r\n     * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.\r\n     *\r\n     * @param {number} preQueueTime\r\n     * @param {number} currentTime\r\n     * @returns {number}\r\n     */\r\n    PerformanceClient.prototype.calculateQueuedTime = function (preQueueTime, currentTime) {\r\n        if (preQueueTime < 1) {\r\n            this.logger.trace(\"PerformanceClient: preQueueTime should be a positive integer and not \" + preQueueTime);\r\n            return 0;\r\n        }\r\n        if (currentTime < 1) {\r\n            this.logger.trace(\"PerformanceClient: currentTime should be a positive integer and not \" + currentTime);\r\n            return 0;\r\n        }\r\n        if (currentTime < preQueueTime) {\r\n            this.logger.trace(\"PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved\");\r\n            return 0;\r\n        }\r\n        return currentTime - preQueueTime;\r\n    };\r\n    /**\r\n     * Adds queue measurement time to QueueMeasurements array for given correlation ID.\r\n     *\r\n     * @param {PerformanceEvents} eventName\r\n     * @param {?string} correlationId\r\n     * @param {?number} queueTime\r\n     * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements\r\n     * @returns\r\n     */\r\n    PerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {\r\n        if (!correlationId) {\r\n            this.logger.trace(\"PerformanceClient.addQueueMeasurement: correlationId not provided for \" + eventName + \", cannot add queue measurement\");\r\n            return;\r\n        }\r\n        if (queueTime === 0) {\r\n            // Possible for there to be no queue time after calculation\r\n            this.logger.trace(\"PerformanceClient.addQueueMeasurement: queue time provided for \" + eventName + \" is \" + queueTime);\r\n        }\r\n        else if (!queueTime) {\r\n            this.logger.trace(\"PerformanceClient.addQueueMeasurement: no queue time provided for \" + eventName);\r\n            return;\r\n        }\r\n        var queueMeasurement = { eventName: eventName, queueTime: queueTime, manuallyCompleted: manuallyCompleted };\r\n        // Adds to existing correlation Id if present in queueMeasurements\r\n        var existingMeasurements = this.queueMeasurements.get(correlationId);\r\n        if (existingMeasurements) {\r\n            existingMeasurements.push(queueMeasurement);\r\n            this.queueMeasurements.set(correlationId, existingMeasurements);\r\n        }\r\n        else {\r\n            // Sets new correlation Id if not present in queueMeasurements\r\n            this.logger.trace(\"PerformanceClient.addQueueMeasurement: adding correlationId \" + correlationId + \" to queue measurements\");\r\n            var measurementArray = [queueMeasurement];\r\n            this.queueMeasurements.set(correlationId, measurementArray);\r\n        }\r\n        // Delete processed pre-queue event.\r\n        this.preQueueTimeByCorrelationId.delete(correlationId);\r\n    };\r\n    /**\r\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n     *\r\n     * @param {PerformanceEvents} measureName\r\n     * @param {?string} [correlationId]\r\n     * @returns {InProgressPerformanceEvent}\r\n     */\r\n    PerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\r\n        var _this = this;\r\n        var _a, _b;\r\n        // Generate a placeholder correlation if the request does not provide one\r\n        var eventCorrelationId = correlationId || this.generateId();\r\n        if (!correlationId) {\r\n            this.logger.info(\"PerformanceClient: No correlation id provided for \" + measureName + \", generating\", eventCorrelationId);\r\n        }\r\n        // Duplicate code to address spelling error will be removed at the next major version bump.\r\n        this.logger.trace(\"PerformanceClient: Performance measurement started for \" + measureName, eventCorrelationId);\r\n        var performanceMeasurement = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);\r\n        performanceMeasurement.startMeasurement();\r\n        var inProgressEvent = {\r\n            eventId: this.generateId(),\r\n            status: PerformanceEventStatus.InProgress,\r\n            authority: this.authority,\r\n            libraryName: this.libraryName,\r\n            libraryVersion: this.libraryVersion,\r\n            clientId: this.clientId,\r\n            name: measureName,\r\n            startTimeMs: Date.now(),\r\n            correlationId: eventCorrelationId,\r\n            appName: (_a = this.applicationTelemetry) === null || _a === void 0 ? void 0 : _a.appName,\r\n            appVersion: (_b = this.applicationTelemetry) === null || _b === void 0 ? void 0 : _b.appVersion,\r\n        };\r\n        // Store in progress events so they can be discarded if not ended properly\r\n        this.cacheEventByCorrelationId(inProgressEvent);\r\n        // Return the event and functions the caller can use to properly end/flush the measurement\r\n        return {\r\n            endMeasurement: function (event) {\r\n                return _this.endMeasurement(__assign(__assign({}, inProgressEvent), event), performanceMeasurement);\r\n            },\r\n            discardMeasurement: function () {\r\n                return _this.discardMeasurements(inProgressEvent.correlationId);\r\n            },\r\n            addStaticFields: function (fields) {\r\n                return _this.addStaticFields(fields, inProgressEvent.correlationId);\r\n            },\r\n            increment: function (counters) {\r\n                return _this.increment(counters, inProgressEvent.correlationId);\r\n            },\r\n            measurement: performanceMeasurement,\r\n            event: inProgressEvent\r\n        };\r\n    };\r\n    /**\r\n     * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,\r\n     * as consumers should instead use the function returned by startMeasurement.\r\n     * Adds a new field named as \"[event name]DurationMs\" for sub-measurements, completes and emits an event\r\n     * otherwise.\r\n     *\r\n     * @param {PerformanceEvent} event\r\n     * @param {IPerformanceMeasurement} measurement\r\n     * @returns {(PerformanceEvent | null)}\r\n     */\r\n    PerformanceClient.prototype.endMeasurement = function (event, measurement) {\r\n        var _this = this;\r\n        var _a, _b;\r\n        var rootEvent = this.eventsByCorrelationId.get(event.correlationId);\r\n        if (!rootEvent) {\r\n            this.logger.trace(\"PerformanceClient: Measurement not found for \" + event.eventId, event.correlationId);\r\n            return null;\r\n        }\r\n        var isRoot = event.eventId === rootEvent.eventId;\r\n        var queueInfo = {\r\n            totalQueueTime: 0,\r\n            totalQueueCount: 0,\r\n            manuallyCompletedCount: 0\r\n        };\r\n        if (isRoot) {\r\n            queueInfo = this.getQueueInfo(event.correlationId);\r\n            this.discardCache(rootEvent.correlationId);\r\n        }\r\n        else {\r\n            (_a = rootEvent.incompleteSubMeasurements) === null || _a === void 0 ? void 0 : _a.delete(event.eventId);\r\n        }\r\n        measurement === null || measurement === void 0 ? void 0 : measurement.endMeasurement();\r\n        var durationMs = measurement === null || measurement === void 0 ? void 0 : measurement.flushMeasurement();\r\n        // null indicates no measurement was taken (e.g. needed performance APIs not present)\r\n        if (!durationMs) {\r\n            this.logger.trace(\"PerformanceClient: Performance measurement not taken\", rootEvent.correlationId);\r\n            return null;\r\n        }\r\n        this.logger.trace(\"PerformanceClient: Performance measurement ended for \" + event.name + \": \" + durationMs + \" ms\", event.correlationId);\r\n        // Add sub-measurement attribute to root event.\r\n        if (!isRoot) {\r\n            rootEvent[event.name + \"DurationMs\"] = Math.floor(durationMs);\r\n            return __assign({}, rootEvent);\r\n        }\r\n        var finalEvent = __assign(__assign({}, rootEvent), event);\r\n        var incompleteSubsCount = 0;\r\n        // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.\r\n        (_b = finalEvent.incompleteSubMeasurements) === null || _b === void 0 ? void 0 : _b.forEach(function (subMeasurement) {\r\n            _this.logger.trace(\"PerformanceClient: Incomplete submeasurement \" + subMeasurement.name + \" found for \" + event.name, finalEvent.correlationId);\r\n            incompleteSubsCount++;\r\n        });\r\n        finalEvent.incompleteSubMeasurements = undefined;\r\n        finalEvent = __assign(__assign({}, finalEvent), { durationMs: Math.round(durationMs), queuedTimeMs: queueInfo.totalQueueTime, queuedCount: queueInfo.totalQueueCount, queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount, status: PerformanceEventStatus.Completed, incompleteSubsCount: incompleteSubsCount });\r\n        this.truncateIntegralFields(finalEvent, this.getIntFields());\r\n        this.emitEvents([finalEvent], event.correlationId);\r\n        return finalEvent;\r\n    };\r\n    /**\r\n     * Saves extra information to be emitted when the measurements are flushed\r\n     * @param fields\r\n     * @param correlationId\r\n     */\r\n    PerformanceClient.prototype.addStaticFields = function (fields, correlationId) {\r\n        this.logger.trace(\"PerformanceClient: Updating static fields\");\r\n        var event = this.eventsByCorrelationId.get(correlationId);\r\n        if (event) {\r\n            this.eventsByCorrelationId.set(correlationId, __assign(__assign({}, event), fields));\r\n        }\r\n        else {\r\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\r\n        }\r\n    };\r\n    /**\r\n     * Increment counters to be emitted when the measurements are flushed\r\n     * @param counters {Counters}\r\n     * @param correlationId {string} correlation identifier\r\n     */\r\n    PerformanceClient.prototype.increment = function (counters, correlationId) {\r\n        this.logger.trace(\"PerformanceClient: Updating counters\");\r\n        var event = this.eventsByCorrelationId.get(correlationId);\r\n        if (event) {\r\n            for (var counter in counters) {\r\n                if (!event.hasOwnProperty(counter)) {\r\n                    event[counter] = 0;\r\n                }\r\n                event[counter] += counters[counter];\r\n            }\r\n        }\r\n        else {\r\n            this.logger.trace(\"PerformanceClient: Event not found for\", correlationId);\r\n        }\r\n    };\r\n    /**\r\n     * Upserts event into event cache.\r\n     * First key is the correlation id, second key is the event id.\r\n     * Allows for events to be grouped by correlation id,\r\n     * and to easily allow for properties on them to be updated.\r\n     *\r\n     * @private\r\n     * @param {PerformanceEvent} event\r\n     */\r\n    PerformanceClient.prototype.cacheEventByCorrelationId = function (event) {\r\n        var rootEvent = this.eventsByCorrelationId.get(event.correlationId);\r\n        if (rootEvent) {\r\n            this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" added/updated\", event.correlationId);\r\n            rootEvent.incompleteSubMeasurements = rootEvent.incompleteSubMeasurements || new Map();\r\n            rootEvent.incompleteSubMeasurements.set(event.eventId, { name: event.name, startTimeMs: event.startTimeMs });\r\n        }\r\n        else {\r\n            this.logger.trace(\"PerformanceClient: Performance measurement for \" + event.name + \" started\", event.correlationId);\r\n            this.eventsByCorrelationId.set(event.correlationId, __assign({}, event));\r\n        }\r\n    };\r\n    PerformanceClient.prototype.getQueueInfo = function (correlationId) {\r\n        var queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);\r\n        if (!queueMeasurementForCorrelationId) {\r\n            this.logger.trace(\"PerformanceClient: no queue measurements found for for correlationId: \" + correlationId);\r\n        }\r\n        var totalQueueTime = 0;\r\n        var totalQueueCount = 0;\r\n        var manuallyCompletedCount = 0;\r\n        queueMeasurementForCorrelationId === null || queueMeasurementForCorrelationId === void 0 ? void 0 : queueMeasurementForCorrelationId.forEach(function (measurement) {\r\n            totalQueueTime += measurement.queueTime;\r\n            totalQueueCount++;\r\n            manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;\r\n        });\r\n        return {\r\n            totalQueueTime: totalQueueTime,\r\n            totalQueueCount: totalQueueCount,\r\n            manuallyCompletedCount: manuallyCompletedCount\r\n        };\r\n    };\r\n    /**\r\n     * Removes measurements for a given correlation id.\r\n     *\r\n     * @param {string} correlationId\r\n     */\r\n    PerformanceClient.prototype.discardMeasurements = function (correlationId) {\r\n        this.logger.trace(\"PerformanceClient: Performance measurements discarded\", correlationId);\r\n        this.eventsByCorrelationId.delete(correlationId);\r\n    };\r\n    /**\r\n     * Removes cache for a given correlation id.\r\n     *\r\n     * @param {string} correlationId correlation identifier\r\n     */\r\n    PerformanceClient.prototype.discardCache = function (correlationId) {\r\n        this.discardMeasurements(correlationId);\r\n        this.logger.trace(\"PerformanceClient: QueueMeasurements discarded\", correlationId);\r\n        this.queueMeasurements.delete(correlationId);\r\n        this.logger.trace(\"PerformanceClient: Pre-queue times discarded\", correlationId);\r\n        this.preQueueTimeByCorrelationId.delete(correlationId);\r\n    };\r\n    /**\r\n     * Registers a callback function to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */\r\n    PerformanceClient.prototype.addPerformanceCallback = function (callback) {\r\n        var callbackId = this.generateId();\r\n        this.callbacks.set(callbackId, callback);\r\n        this.logger.verbose(\"PerformanceClient: Performance callback registered with id: \" + callbackId);\r\n        return callbackId;\r\n    };\r\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */\r\n    PerformanceClient.prototype.removePerformanceCallback = function (callbackId) {\r\n        var result = this.callbacks.delete(callbackId);\r\n        if (result) {\r\n            this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" removed.\");\r\n        }\r\n        else {\r\n            this.logger.verbose(\"PerformanceClient: Performance callback \" + callbackId + \" not removed.\");\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Emits events to all registered callbacks.\r\n     *\r\n     * @param {PerformanceEvent[]} events\r\n     * @param {?string} [correlationId]\r\n     */\r\n    PerformanceClient.prototype.emitEvents = function (events, correlationId) {\r\n        var _this = this;\r\n        this.logger.verbose(\"PerformanceClient: Emitting performance events\", correlationId);\r\n        this.callbacks.forEach(function (callback, callbackId) {\r\n            _this.logger.trace(\"PerformanceClient: Emitting event to callback \" + callbackId, correlationId);\r\n            callback.apply(null, [events]);\r\n        });\r\n    };\r\n    /**\r\n     * Enforce truncation of integral fields in performance event.\r\n     * @param {PerformanceEvent} event performance event to update.\r\n     * @param {Set<string>} intFields integral fields.\r\n     */\r\n    PerformanceClient.prototype.truncateIntegralFields = function (event, intFields) {\r\n        intFields.forEach(function (key) {\r\n            if (key in event && typeof event[key] === \"number\") {\r\n                event[key] = Math.floor(event[key]);\r\n            }\r\n        });\r\n    };\r\n    return PerformanceClient;\r\n}());\n\nexport { PerformanceClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}