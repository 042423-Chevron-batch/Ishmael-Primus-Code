{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\nvar _core = require(\"@js-joda/core\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1900, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x08]);\nconst DateTime = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function () {\n    return 'datetime';\n  },\n  generateTypeInfo() {\n    return Buffer.from([_datetimen.default.id, 0x08]);\n  },\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n    return DATA_LENGTH;\n  },\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let date;\n    if (options.useUTC) {\n      date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n    let days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\n    let milliseconds, threeHundredthsOfSecond;\n    if (options.useUTC) {\n      let seconds = value.getUTCHours() * 60 * 60;\n      seconds += value.getUTCMinutes() * 60;\n      seconds += value.getUTCSeconds();\n      milliseconds = seconds * 1000 + value.getUTCMilliseconds();\n    } else {\n      let seconds = value.getHours() * 60 * 60;\n      seconds += value.getMinutes() * 60;\n      seconds += value.getSeconds();\n      milliseconds = seconds * 1000 + value.getMilliseconds();\n    }\n    threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n    threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\n\n    if (threeHundredthsOfSecond === 25920000) {\n      days += 1;\n      threeHundredthsOfSecond = 0;\n    }\n    const buffer = Buffer.alloc(8);\n    buffer.writeInt32LE(days, 0);\n    buffer.writeUInt32LE(threeHundredthsOfSecond, 4);\n    yield buffer;\n  },\n  // TODO: type 'any' needs to be revisited.\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n    return value;\n  }\n};\nvar _default = DateTime;\nexports.default = _default;\nmodule.exports = DateTime;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_datetimen","_interopRequireDefault","require","_core","obj","__esModule","EPOCH_DATE","LocalDate","ofYearDay","NULL_LENGTH","Buffer","from","DATA_LENGTH","DateTime","id","type","name","declaration","generateTypeInfo","generateParameterLength","parameter","options","generateParameterData","date","useUTC","of","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","days","until","ChronoUnit","DAYS","milliseconds","threeHundredthsOfSecond","seconds","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getHours","getMinutes","getSeconds","getMilliseconds","Math","round","buffer","alloc","writeInt32LE","writeUInt32LE","validate","Date","parse","isNaN","TypeError","_default","module"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/tedious/lib/data-types/datetime.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _datetimen = _interopRequireDefault(require(\"./datetimen\"));\n\nvar _core = require(\"@js-joda/core\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1900, 1);\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x08]);\nconst DateTime = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n  declaration: function () {\n    return 'datetime';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([_datetimen.default.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  generateParameterData: function* (parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let date;\n\n    if (options.useUTC) {\n      date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    let days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\n    let milliseconds, threeHundredthsOfSecond;\n\n    if (options.useUTC) {\n      let seconds = value.getUTCHours() * 60 * 60;\n      seconds += value.getUTCMinutes() * 60;\n      seconds += value.getUTCSeconds();\n      milliseconds = seconds * 1000 + value.getUTCMilliseconds();\n    } else {\n      let seconds = value.getHours() * 60 * 60;\n      seconds += value.getMinutes() * 60;\n      seconds += value.getSeconds();\n      milliseconds = seconds * 1000 + value.getMilliseconds();\n    }\n\n    threeHundredthsOfSecond = milliseconds / (3 + 1 / 3);\n    threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond); // 25920000 equals one day\n\n    if (threeHundredthsOfSecond === 25920000) {\n      days += 1;\n      threeHundredthsOfSecond = 0;\n    }\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeInt32LE(days, 0);\n    buffer.writeUInt32LE(threeHundredthsOfSecond, 4);\n    yield buffer;\n  },\n  // TODO: type 'any' needs to be revisited.\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\nvar _default = DateTime;\nexports.default = _default;\nmodule.exports = DateTime;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}