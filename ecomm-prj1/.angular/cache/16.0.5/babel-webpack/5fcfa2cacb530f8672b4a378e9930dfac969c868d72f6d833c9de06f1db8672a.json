{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingContext } from \"./tracingContext\";\nexport function createDefaultTracingSpan() {\n  return {\n    end: () => {\n      // noop\n    },\n    isRecording: () => false,\n    recordException: () => {\n      // noop\n    },\n    setAttribute: () => {\n      // noop\n    },\n    setStatus: () => {\n      // noop\n    }\n  };\n}\nexport function createDefaultInstrumenter() {\n  return {\n    createRequestHeaders: () => {\n      return {};\n    },\n    parseTraceparentHeader: () => {\n      return undefined;\n    },\n    startSpan: (_name, spanOptions) => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({\n          parentContext: spanOptions.tracingContext\n        })\n      };\n    },\n    withContext(_context, callback, ...callbackArgs) {\n      return callback(...callbackArgs);\n    }\n  };\n}\n/** @internal */\nlet instrumenterImplementation;\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n  instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n  if (!instrumenterImplementation) {\n    instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return instrumenterImplementation;\n}","map":{"version":3,"names":["createTracingContext","createDefaultTracingSpan","end","isRecording","recordException","setAttribute","setStatus","createDefaultInstrumenter","createRequestHeaders","parseTraceparentHeader","undefined","startSpan","_name","spanOptions","span","tracingContext","parentContext","withContext","_context","callback","callbackArgs","instrumenterImplementation","useInstrumenter","instrumenter","getInstrumenter"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/core-tracing/dist-esm/src/instrumenter.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createTracingContext } from \"./tracingContext\";\nexport function createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n    };\n}\nexport function createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/** @internal */\nlet instrumenterImplementation;\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter) {\n    instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter() {\n    if (!instrumenterImplementation) {\n        instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return instrumenterImplementation;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,oBAAoB,QAAQ,kBAAkB;AACvD,OAAO,SAASC,wBAAwBA,CAAA,EAAG;EACvC,OAAO;IACHC,GAAG,EAAEA,CAAA,KAAM;MACP;IAAA,CACH;IACDC,WAAW,EAAEA,CAAA,KAAM,KAAK;IACxBC,eAAe,EAAEA,CAAA,KAAM;MACnB;IAAA,CACH;IACDC,YAAY,EAAEA,CAAA,KAAM;MAChB;IAAA,CACH;IACDC,SAAS,EAAEA,CAAA,KAAM;MACb;IAAA;EAER,CAAC;AACL;AACA,OAAO,SAASC,yBAAyBA,CAAA,EAAG;EACxC,OAAO;IACHC,oBAAoB,EAAEA,CAAA,KAAM;MACxB,OAAO,CAAC,CAAC;IACb,CAAC;IACDC,sBAAsB,EAAEA,CAAA,KAAM;MAC1B,OAAOC,SAAS;IACpB,CAAC;IACDC,SAAS,EAAEA,CAACC,KAAK,EAAEC,WAAW,KAAK;MAC/B,OAAO;QACHC,IAAI,EAAEb,wBAAwB,EAAE;QAChCc,cAAc,EAAEf,oBAAoB,CAAC;UAAEgB,aAAa,EAAEH,WAAW,CAACE;QAAe,CAAC;MACtF,CAAC;IACL,CAAC;IACDE,WAAWA,CAACC,QAAQ,EAAEC,QAAQ,EAAE,GAAGC,YAAY,EAAE;MAC7C,OAAOD,QAAQ,CAAC,GAAGC,YAAY,CAAC;IACpC;EACJ,CAAC;AACL;AACA;AACA,IAAIC,0BAA0B;AAC9B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,YAAY,EAAE;EAC1CF,0BAA0B,GAAGE,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAAA,EAAG;EAC9B,IAAI,CAACH,0BAA0B,EAAE;IAC7BA,0BAA0B,GAAGd,yBAAyB,EAAE;EAC5D;EACA,OAAOc,0BAA0B;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}