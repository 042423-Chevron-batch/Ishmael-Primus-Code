{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { __awaiter, __generator, __assign, __extends } from '../_virtual/_tslib.js';\nimport { Separators, CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from './entities/AccountEntity.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { name, version } from '../packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\nvar CacheManager = /** @class */function () {\n  function CacheManager(clientId, cryptoImpl, logger) {\n    this.clientId = clientId;\n    this.cryptoImpl = cryptoImpl;\n    this.commonLogger = logger.clone(name, version);\n  }\n  /**\r\n   * Returns all accounts in cache\r\n   */\n  CacheManager.prototype.getAllAccounts = function () {\n    var _this = this;\n    var allAccountKeys = this.getAccountKeys();\n    if (allAccountKeys.length < 1) {\n      return [];\n    }\n    var accountEntities = allAccountKeys.reduce(function (accounts, key) {\n      var entity = _this.getAccount(key);\n      if (!entity) {\n        return accounts;\n      }\n      accounts.push(entity);\n      return accounts;\n    }, []);\n    if (accountEntities.length < 1) {\n      return [];\n    } else {\n      var allAccounts = accountEntities.map(function (accountEntity) {\n        return _this.getAccountInfoFromEntity(accountEntity);\n      });\n      return allAccounts;\n    }\n  };\n  /**\r\n   * Gets accountInfo object based on provided filters\r\n   */\n  CacheManager.prototype.getAccountInfoFilteredBy = function (accountFilter) {\n    var allAccounts = this.getAccountsFilteredBy(accountFilter);\n    if (allAccounts.length > 0) {\n      return this.getAccountInfoFromEntity(allAccounts[0]);\n    } else {\n      return null;\n    }\n  };\n  CacheManager.prototype.getAccountInfoFromEntity = function (accountEntity) {\n    var accountInfo = accountEntity.getAccountInfo();\n    var idToken = this.getIdToken(accountInfo);\n    if (idToken) {\n      accountInfo.idToken = idToken.secret;\n      accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\n    }\n    return accountInfo;\n  };\n  /**\r\n   * saves a cache record\r\n   * @param cacheRecord\r\n   */\n  CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!cacheRecord) {\n              throw ClientAuthError.createNullOrUndefinedCacheRecord();\n            }\n            if (!!cacheRecord.account) {\n              this.setAccount(cacheRecord.account);\n            }\n            if (!!cacheRecord.idToken) {\n              this.setIdTokenCredential(cacheRecord.idToken);\n            }\n            if (!!!cacheRecord.accessToken) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.saveAccessToken(cacheRecord.accessToken)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            if (!!cacheRecord.refreshToken) {\n              this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n            if (!!cacheRecord.appMetadata) {\n              this.setAppMetadata(cacheRecord.appMetadata);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * saves access token credential\r\n   * @param credential\r\n   */\n  CacheManager.prototype.saveAccessToken = function (credential) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accessTokenFilter, tokenKeys, currentScopes, removedAccessTokens;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            accessTokenFilter = {\n              clientId: credential.clientId,\n              credentialType: credential.credentialType,\n              environment: credential.environment,\n              homeAccountId: credential.homeAccountId,\n              realm: credential.realm,\n              tokenType: credential.tokenType,\n              requestedClaimsHash: credential.requestedClaimsHash\n            };\n            tokenKeys = this.getTokenKeys();\n            currentScopes = ScopeSet.fromString(credential.target);\n            removedAccessTokens = [];\n            tokenKeys.accessToken.forEach(function (key) {\n              if (!_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n                return;\n              }\n              var tokenEntity = _this.getAccessTokenCredential(key);\n              if (tokenEntity && _this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                  removedAccessTokens.push(_this.removeAccessToken(key));\n                }\n              }\n            });\n            return [4 /*yield*/, Promise.all(removedAccessTokens)];\n          case 1:\n            _a.sent();\n            this.setAccessTokenCredential(credential);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n  CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\n    var _this = this;\n    var allAccountKeys = this.getAccountKeys();\n    var matchingAccounts = [];\n    allAccountKeys.forEach(function (cacheKey) {\n      if (!_this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {\n        // Don't parse value if the key doesn't match the account filters\n        return;\n      }\n      var entity = _this.getAccount(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!accountFilter.homeAccountId && !_this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n        return;\n      }\n      if (!!accountFilter.localAccountId && !_this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\n        return;\n      }\n      if (!!accountFilter.username && !_this.matchUsername(entity, accountFilter.username)) {\n        return;\n      }\n      if (!!accountFilter.environment && !_this.matchEnvironment(entity, accountFilter.environment)) {\n        return;\n      }\n      if (!!accountFilter.realm && !_this.matchRealm(entity, accountFilter.realm)) {\n        return;\n      }\n      if (!!accountFilter.nativeAccountId && !_this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n        return;\n      }\n      matchingAccounts.push(entity);\n    });\n    return matchingAccounts;\n  };\n  /**\r\n   * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n   * @param key\r\n   * @param homeAccountId\r\n   * @param tenantId\r\n   * @returns\r\n   */\n  CacheManager.prototype.isAccountKey = function (key, homeAccountId, tenantId) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\n      // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n    if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n      return false;\n    }\n    if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n      return false;\n    }\n    // Do not check environment as aliasing can cause false negatives\n    return true;\n  };\n  /**\r\n   * Returns true if the given key matches our credential key schema.\r\n   * @param key\r\n   */\n  CacheManager.prototype.isCredentialKey = function (key) {\n    if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\n      // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n      return false;\n    }\n    var lowerCaseKey = key.toLowerCase();\n    // Credential keys must indicate what credential type they represent\n    if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 && lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\n      return false;\n    }\n    if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\n      // Refresh tokens must contain the client id or family id\n      var clientIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + this.clientId + Separators.CACHE_KEY_SEPARATOR;\n      var familyIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + THE_FAMILY_ID + Separators.CACHE_KEY_SEPARATOR;\n      if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n        return false;\n      }\n    } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n      // Tokens must contain the clientId\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Returns whether or not the given credential entity matches the filter\r\n   * @param entity\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.credentialMatchesFilter = function (entity, filter) {\n    if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n      return false;\n    }\n    if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n      return false;\n    }\n    /*\r\n     * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n     * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n     */\n    if (typeof filter.homeAccountId === \"string\" && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n      return false;\n    }\n    if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n      return false;\n    }\n    if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n      return false;\n    }\n    if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\n      return false;\n    }\n    if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n      return false;\n    }\n    /*\r\n     * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n     * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n     */\n    if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n      return false;\n    }\n    // If request OR cached entity has requested Claims Hash, check if they match\n    if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n      // Don't match if either is undefined or they are different\n      if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n        return false;\n      }\n    }\n    // Access Token with Auth Scheme specific matching\n    if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n      if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\n        return false;\n      }\n      // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n      if (filter.tokenType === AuthenticationScheme.SSH) {\n        if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  /**\r\n   * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n   * @param filter\r\n   */\n  CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\n    return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n  };\n  /**\r\n   * Support function to help match appMetadata\r\n   * @param environment\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    var matchingAppMetadata = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-appMetadata type cache entities\n      if (!_this.isAppMetadata(cacheKey)) {\n        return;\n      }\n      // Attempt retrieval\n      var entity = _this.getAppMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n      matchingAppMetadata[cacheKey] = entity;\n    });\n    return matchingAppMetadata;\n  };\n  /**\r\n   * retrieve authorityMetadata that contains a matching alias\r\n   * @param filter\r\n   */\n  CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\n    var _this = this;\n    var allCacheKeys = this.getAuthorityMetadataKeys();\n    var matchedEntity = null;\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-authorityMetadata type cache entities\n      if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\n        return;\n      }\n      // Attempt retrieval\n      var entity = _this.getAuthorityMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (entity.aliases.indexOf(host) === -1) {\n        return;\n      }\n      matchedEntity = entity;\n    });\n    return matchedEntity;\n  };\n  /**\r\n   * Removes all accounts and related tokens from cache.\r\n   */\n  CacheManager.prototype.removeAllAccounts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allAccountKeys, removedAccounts;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allAccountKeys = this.getAccountKeys();\n            removedAccounts = [];\n            allAccountKeys.forEach(function (cacheKey) {\n              removedAccounts.push(_this.removeAccount(cacheKey));\n            });\n            return [4 /*yield*/, Promise.all(removedAccounts)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes the account and related tokens for a given account key\r\n   * @param account\r\n   */\n  CacheManager.prototype.removeAccount = function (accountKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            account = this.getAccount(accountKey);\n            if (!account) {\n              throw ClientAuthError.createNoAccountFoundError();\n            }\n            return [4 /*yield*/, this.removeAccountContext(account)];\n          case 1:\n            _a.sent();\n            this.removeItem(accountKey);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes credentials associated with the provided account\r\n   * @param account\r\n   */\n  CacheManager.prototype.removeAccountContext = function (account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allTokenKeys, accountId, removedCredentials;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            allTokenKeys = this.getTokenKeys();\n            accountId = account.generateAccountId();\n            removedCredentials = [];\n            allTokenKeys.idToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                _this.removeIdToken(key);\n              }\n            });\n            allTokenKeys.accessToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(_this.removeAccessToken(key));\n              }\n            });\n            allTokenKeys.refreshToken.forEach(function (key) {\n              if (key.indexOf(accountId) === 0) {\n                _this.removeRefreshToken(key);\n              }\n            });\n            return [4 /*yield*/, Promise.all(removedCredentials)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * returns a boolean if the given credential is removed\r\n   * @param credential\r\n   */\n  CacheManager.prototype.removeAccessToken = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credential, accessTokenWithAuthSchemeEntity, kid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            credential = this.getAccessTokenCredential(key);\n            if (!credential) {\n              return [2 /*return*/];\n            }\n\n            if (!(credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3 /*break*/, 4];\n            if (!(credential.tokenType === AuthenticationScheme.POP)) return [3 /*break*/, 4];\n            accessTokenWithAuthSchemeEntity = credential;\n            kid = accessTokenWithAuthSchemeEntity.keyId;\n            if (!kid) return [3 /*break*/, 4];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cryptoImpl.removeTokenBindingKey(kid)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            _a.sent();\n            throw ClientAuthError.createBindingKeyNotRemovedError();\n          case 4:\n            return [2 /*return*/, this.removeItem(key)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all app metadata objects from cache.\r\n   */\n  CacheManager.prototype.removeAppMetadata = function () {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      if (_this.isAppMetadata(cacheKey)) {\n        _this.removeItem(cacheKey);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * Retrieve the cached credentials into a cacherecord\r\n   * @param account\r\n   * @param clientId\r\n   * @param scopes\r\n   * @param environment\r\n   * @param authScheme\r\n   */\n  CacheManager.prototype.readCacheRecord = function (account, request, environment) {\n    var tokenKeys = this.getTokenKeys();\n    var cachedAccount = this.readAccountFromCache(account);\n    var cachedIdToken = this.getIdToken(account, tokenKeys);\n    var cachedAccessToken = this.getAccessToken(account, request, tokenKeys);\n    var cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);\n    var cachedAppMetadata = this.readAppMetadataFromCache(environment);\n    if (cachedAccount && cachedIdToken) {\n      cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\n    }\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  };\n  /**\r\n   * Retrieve AccountEntity from cache\r\n   * @param account\r\n   */\n  CacheManager.prototype.readAccountFromCache = function (account) {\n    var accountKey = AccountEntity.generateAccountCacheKey(account);\n    return this.getAccount(accountKey);\n  };\n  /**\r\n   * Retrieve IdTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param inputRealm\r\n   */\n  CacheManager.prototype.getIdToken = function (account, tokenKeys) {\n    this.commonLogger.trace(\"CacheManager - getIdToken called\");\n    var idTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.clientId,\n      realm: account.tenantId\n    };\n    var idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n    var numIdTokens = idTokens.length;\n    if (numIdTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n      return null;\n    } else if (numIdTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n    this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\n    return idTokens[0];\n  };\n  /**\r\n   * Gets all idTokens matching the given filter\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.getIdTokensByFilter = function (filter, tokenKeys) {\n    var _this = this;\n    var idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\n    var idTokens = [];\n    idTokenKeys.forEach(function (key) {\n      if (!_this.idTokenKeyMatchesFilter(key, __assign({\n        clientId: _this.clientId\n      }, filter))) {\n        return;\n      }\n      var idToken = _this.getIdTokenCredential(key);\n      if (idToken && _this.credentialMatchesFilter(idToken, filter)) {\n        idTokens.push(idToken);\n      }\n    });\n    return idTokens;\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.idTokenKeyMatchesFilter = function (inputKey, filter) {\n    var key = inputKey.toLowerCase();\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Removes idToken from the cache\r\n   * @param key\r\n   */\n  CacheManager.prototype.removeIdToken = function (key) {\n    this.removeItem(key);\n  };\n  /**\r\n   * Removes refresh token from the cache\r\n   * @param key\r\n   */\n  CacheManager.prototype.removeRefreshToken = function (key) {\n    this.removeItem(key);\n  };\n  /**\r\n   * Retrieve AccessTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param scopes\r\n   * @param authScheme\r\n   */\n  CacheManager.prototype.getAccessToken = function (account, request, tokenKeys) {\n    var _this = this;\n    this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n    var scopes = ScopeSet.createSearchScopes(request.scopes);\n    var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n    /*\r\n     * Distinguish between Bearer and PoP/SSH token cache types\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */\n    var credentialType = authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase() ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: credentialType,\n      clientId: this.clientId,\n      realm: account.tenantId,\n      target: scopes,\n      tokenType: authScheme,\n      keyId: request.sshKid,\n      requestedClaimsHash: request.requestedClaimsHash\n    };\n    var accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\n    var accessTokens = [];\n    accessTokenKeys.forEach(function (key) {\n      // Validate key\n      if (_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n        var accessToken = _this.getAccessTokenCredential(key);\n        // Validate value\n        if (accessToken && _this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n          accessTokens.push(accessToken);\n        }\n      }\n    });\n    var numAccessTokens = accessTokens.length;\n    if (numAccessTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError.createMultipleMatchingTokensInCacheError();\n    }\n    this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n    return accessTokens[0];\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   * @param keyMustContainAllScopes\r\n   * @returns\r\n   */\n  CacheManager.prototype.accessTokenKeyMatchesFilter = function (inputKey, filter, keyMustContainAllScopes) {\n    var key = inputKey.toLowerCase();\n    if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.target) {\n      var scopes = filter.target.asArray();\n      for (var i = 0; i < scopes.length; i++) {\n        if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache lookup a missing scope would be a cache miss\n          return false;\n        } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\n          // When performing a cache write, any token with a subset of requested scopes should be replaced\n          return true;\n        }\n      }\n    }\n    return true;\n  };\n  /**\r\n   * Gets all access tokens matching the filter\r\n   * @param filter\r\n   * @returns\r\n   */\n  CacheManager.prototype.getAccessTokensByFilter = function (filter) {\n    var _this = this;\n    var tokenKeys = this.getTokenKeys();\n    var accessTokens = [];\n    tokenKeys.accessToken.forEach(function (key) {\n      if (!_this.accessTokenKeyMatchesFilter(key, filter, true)) {\n        return;\n      }\n      var accessToken = _this.getAccessTokenCredential(key);\n      if (accessToken && _this.credentialMatchesFilter(accessToken, filter)) {\n        accessTokens.push(accessToken);\n      }\n    });\n    return accessTokens;\n  };\n  /**\r\n   * Helper to retrieve the appropriate refresh token from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param familyRT\r\n   */\n  CacheManager.prototype.getRefreshToken = function (account, familyRT, tokenKeys) {\n    var _this = this;\n    this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n    var id = familyRT ? THE_FAMILY_ID : undefined;\n    var refreshTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.REFRESH_TOKEN,\n      clientId: this.clientId,\n      familyId: id\n    };\n    var refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\n    var refreshTokens = [];\n    refreshTokenKeys.forEach(function (key) {\n      // Validate key\n      if (_this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n        var refreshToken = _this.getRefreshTokenCredential(key);\n        // Validate value\n        if (refreshToken && _this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n          refreshTokens.push(refreshToken);\n        }\n      }\n    });\n    var numRefreshTokens = refreshTokens.length;\n    if (numRefreshTokens < 1) {\n      this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n      return null;\n    }\n    // address the else case after remove functions address environment aliases\n    this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n    return refreshTokens[0];\n  };\n  /**\r\n   * Validate the cache key against filter before retrieving and parsing cache value\r\n   * @param key\r\n   * @param filter\r\n   */\n  CacheManager.prototype.refreshTokenKeyMatchesFilter = function (inputKey, filter) {\n    var key = inputKey.toLowerCase();\n    if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\n      return false;\n    }\n    // If familyId is used, clientId is not in the key\n    if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n      return false;\n    }\n    if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * Retrieve AppMetadataEntity from cache\r\n   */\n  CacheManager.prototype.readAppMetadataFromCache = function (environment) {\n    var appMetadataFilter = {\n      environment: environment,\n      clientId: this.clientId\n    };\n    var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n    var appMetadataEntries = Object.keys(appMetadata).map(function (key) {\n      return appMetadata[key];\n    });\n    var numAppMetadata = appMetadataEntries.length;\n    if (numAppMetadata < 1) {\n      return null;\n    } else if (numAppMetadata > 1) {\n      throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\n    }\n    return appMetadataEntries[0];\n  };\n  /**\r\n   * Return the family_id value associated  with FOCI\r\n   * @param environment\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.isAppMetadataFOCI = function (environment) {\n    var appMetadata = this.readAppMetadataFromCache(environment);\n    return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param value\r\n   * @param homeAccountId\r\n   */\n  CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\n    return !!(typeof entity.homeAccountId === \"string\" && homeAccountId === entity.homeAccountId);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param entity\r\n   * @param localAccountId\r\n   * @returns\r\n   */\n  CacheManager.prototype.matchLocalAccountId = function (entity, localAccountId) {\n    return !!(typeof entity.localAccountId === \"string\" && localAccountId === entity.localAccountId);\n  };\n  /**\r\n   * helper to match usernames\r\n   * @param entity\r\n   * @param username\r\n   * @returns\r\n   */\n  CacheManager.prototype.matchUsername = function (entity, username) {\n    return !!(typeof entity.username === \"string\" && username.toLowerCase() === entity.username.toLowerCase());\n  };\n  /**\r\n   * helper to match assertion\r\n   * @param value\r\n   * @param oboAssertion\r\n   */\n  CacheManager.prototype.matchUserAssertionHash = function (entity, userAssertionHash) {\n    return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n  };\n  /**\r\n   * helper to match environment\r\n   * @param value\r\n   * @param environment\r\n   */\n  CacheManager.prototype.matchEnvironment = function (entity, environment) {\n    var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n    if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * helper to match credential type\r\n   * @param entity\r\n   * @param credentialType\r\n   */\n  CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\n    return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n  };\n  /**\r\n   * helper to match client ids\r\n   * @param entity\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.matchClientId = function (entity, clientId) {\n    return !!(entity.clientId && clientId === entity.clientId);\n  };\n  /**\r\n   * helper to match family ids\r\n   * @param entity\r\n   * @param familyId\r\n   */\n  CacheManager.prototype.matchFamilyId = function (entity, familyId) {\n    return !!(entity.familyId && familyId === entity.familyId);\n  };\n  /**\r\n   * helper to match realm\r\n   * @param entity\r\n   * @param realm\r\n   */\n  CacheManager.prototype.matchRealm = function (entity, realm) {\n    return !!(entity.realm && realm === entity.realm);\n  };\n  /**\r\n   * helper to match nativeAccountId\r\n   * @param entity\r\n   * @param nativeAccountId\r\n   * @returns boolean indicating the match result\r\n   */\n  CacheManager.prototype.matchNativeAccountId = function (entity, nativeAccountId) {\n    return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n  };\n  /**\r\n   * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n   * @param entity\r\n   * @param target\r\n   */\n  CacheManager.prototype.matchTarget = function (entity, target) {\n    var isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n    if (isNotAccessTokenCredential || !entity.target) {\n      return false;\n    }\n    var entityScopeSet = ScopeSet.fromString(entity.target);\n    return entityScopeSet.containsScopeSet(target);\n  };\n  /**\r\n   * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n  CacheManager.prototype.matchTokenType = function (entity, tokenType) {\n    return !!(entity.tokenType && entity.tokenType === tokenType);\n  };\n  /**\r\n   * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n   * @param entity\r\n   * @param tokenType\r\n   */\n  CacheManager.prototype.matchKeyId = function (entity, keyId) {\n    return !!(entity.keyId && entity.keyId === keyId);\n  };\n  /**\r\n   * returns if a given cache entity is of the type appmetadata\r\n   * @param key\r\n   */\n  CacheManager.prototype.isAppMetadata = function (key) {\n    return key.indexOf(APP_METADATA) !== -1;\n  };\n  /**\r\n   * returns if a given cache entity is of the type authoritymetadata\r\n   * @param key\r\n   */\n  CacheManager.prototype.isAuthorityMetadata = function (key) {\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n  };\n  /**\r\n   * returns cache key used for cloud instance metadata\r\n   */\n  CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\n    return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\n  };\n  /**\r\n   * Helper to convert serialized data to object\r\n   * @param obj\r\n   * @param json\r\n   */\n  CacheManager.toObject = function (obj, json) {\n    for (var propertyName in json) {\n      obj[propertyName] = json[propertyName];\n    }\n    return obj;\n  };\n  return CacheManager;\n}();\nvar DefaultStorageClass = /** @class */function (_super) {\n  __extends(DefaultStorageClass, _super);\n  function DefaultStorageClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DefaultStorageClass.prototype.setAccount = function () {\n    var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccount = function () {\n    var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAppMetadata = function () {\n    var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAppMetadata = function () {\n    var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setServerTelemetry = function () {\n    var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getServerTelemetry = function () {\n    var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setThrottlingCache = function () {\n    var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getThrottlingCache = function () {\n    var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.removeItem = function () {\n    var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.containsKey = function () {\n    var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getKeys = function () {\n    var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccountKeys = function () {\n    var notImplErr = \"Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getTokenKeys = function () {\n    var notImplErr = \"Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var notImplErr;\n      return __generator(this, function (_a) {\n        notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n        throw AuthError.createUnexpectedError(notImplErr);\n      });\n    });\n  };\n  DefaultStorageClass.prototype.updateCredentialCacheKey = function () {\n    var notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError.createUnexpectedError(notImplErr);\n  };\n  return DefaultStorageClass;\n}(CacheManager);\nexport { CacheManager, DefaultStorageClass };","map":{"version":3,"names":["__awaiter","__generator","__assign","__extends","Separators","CredentialType","AuthenticationScheme","THE_FAMILY_ID","APP_METADATA","AUTHORITY_METADATA_CONSTANTS","ScopeSet","AccountEntity","AuthError","ClientAuthError","AuthToken","name","version","CacheManager","clientId","cryptoImpl","logger","commonLogger","clone","prototype","getAllAccounts","_this","allAccountKeys","getAccountKeys","length","accountEntities","reduce","accounts","key","entity","getAccount","push","allAccounts","map","accountEntity","getAccountInfoFromEntity","getAccountInfoFilteredBy","accountFilter","getAccountsFilteredBy","accountInfo","getAccountInfo","idToken","getIdToken","secret","idTokenClaims","claims","saveCacheRecord","cacheRecord","_a","label","createNullOrUndefinedCacheRecord","account","setAccount","setIdTokenCredential","accessToken","saveAccessToken","sent","refreshToken","setRefreshTokenCredential","appMetadata","setAppMetadata","credential","accessTokenFilter","tokenKeys","currentScopes","removedAccessTokens","credentialType","environment","homeAccountId","realm","tokenType","requestedClaimsHash","getTokenKeys","fromString","target","forEach","accessTokenKeyMatchesFilter","tokenEntity","getAccessTokenCredential","credentialMatchesFilter","tokenScopeSet","intersectingScopeSets","removeAccessToken","Promise","all","setAccessTokenCredential","matchingAccounts","cacheKey","isAccountKey","matchHomeAccountId","localAccountId","matchLocalAccountId","username","matchUsername","matchEnvironment","matchRealm","nativeAccountId","matchNativeAccountId","tenantId","split","CACHE_KEY_SEPARATOR","toLowerCase","includes","isCredentialKey","lowerCaseKey","indexOf","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","clientIdValidation","familyIdValidation","filter","matchClientId","userAssertionHash","matchUserAssertionHash","matchCredentialType","familyId","matchFamilyId","matchTarget","matchTokenType","SSH","keyId","matchKeyId","getAppMetadataFilteredBy","getAppMetadataFilteredByInternal","allCacheKeys","getKeys","matchingAppMetadata","isAppMetadata","getAppMetadata","getAuthorityMetadataByAlias","host","getAuthorityMetadataKeys","matchedEntity","isAuthorityMetadata","getAuthorityMetadata","aliases","removeAllAccounts","removedAccounts","removeAccount","accountKey","createNoAccountFoundError","removeAccountContext","removeItem","allTokenKeys","accountId","removedCredentials","generateAccountId","removeIdToken","removeRefreshToken","accessTokenWithAuthSchemeEntity","kid","POP","trys","removeTokenBindingKey","createBindingKeyNotRemovedError","removeAppMetadata","readCacheRecord","request","cachedAccount","readAccountFromCache","cachedIdToken","cachedAccessToken","getAccessToken","cachedRefreshToken","getRefreshToken","cachedAppMetadata","readAppMetadataFromCache","generateAccountCacheKey","trace","idTokenFilter","idTokens","getIdTokensByFilter","numIdTokens","info","createMultipleMatchingTokensInCacheError","idTokenKeys","idTokenKeyMatchesFilter","getIdTokenCredential","inputKey","scopes","createSearchScopes","authScheme","authenticationScheme","BEARER","sshKid","accessTokenKeys","accessTokens","numAccessTokens","keyMustContainAllScopes","asArray","i","getAccessTokensByFilter","familyRT","id","undefined","refreshTokenFilter","refreshTokenKeys","refreshTokens","refreshTokenKeyMatchesFilter","getRefreshTokenCredential","numRefreshTokens","appMetadataFilter","appMetadataEntries","Object","keys","numAppMetadata","createMultipleMatchingAppMetadataInCacheError","isAppMetadataFOCI","cloudMetadata","isNotAccessTokenCredential","entityScopeSet","containsScopeSet","CACHE_KEY","generateAuthorityMetadataCacheKey","authority","toObject","obj","json","propertyName","DefaultStorageClass","_super","apply","arguments","notImplErr","createUnexpectedError","setServerTelemetry","getServerTelemetry","setAuthorityMetadata","setThrottlingCache","getThrottlingCache","containsKey","clear","updateCredentialCacheKey"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/cache/CacheManager.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { __awaiter, __generator, __assign, __extends } from '../_virtual/_tslib.js';\nimport { Separators, CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.js';\nimport { ScopeSet } from '../request/ScopeSet.js';\nimport { AccountEntity } from './entities/AccountEntity.js';\nimport { AuthError } from '../error/AuthError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { AuthToken } from '../account/AuthToken.js';\nimport { name, version } from '../packageMetadata.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\r\nvar CacheManager = /** @class */ (function () {\r\n    function CacheManager(clientId, cryptoImpl, logger) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n        this.commonLogger = logger.clone(name, version);\r\n    }\r\n    /**\r\n     * Returns all accounts in cache\r\n     */\r\n    CacheManager.prototype.getAllAccounts = function () {\r\n        var _this = this;\r\n        var allAccountKeys = this.getAccountKeys();\r\n        if (allAccountKeys.length < 1) {\r\n            return [];\r\n        }\r\n        var accountEntities = allAccountKeys.reduce(function (accounts, key) {\r\n            var entity = _this.getAccount(key);\r\n            if (!entity) {\r\n                return accounts;\r\n            }\r\n            accounts.push(entity);\r\n            return accounts;\r\n        }, []);\r\n        if (accountEntities.length < 1) {\r\n            return [];\r\n        }\r\n        else {\r\n            var allAccounts = accountEntities.map(function (accountEntity) {\r\n                return _this.getAccountInfoFromEntity(accountEntity);\r\n            });\r\n            return allAccounts;\r\n        }\r\n    };\r\n    /**\r\n     * Gets accountInfo object based on provided filters\r\n     */\r\n    CacheManager.prototype.getAccountInfoFilteredBy = function (accountFilter) {\r\n        var allAccounts = this.getAccountsFilteredBy(accountFilter);\r\n        if (allAccounts.length > 0) {\r\n            return this.getAccountInfoFromEntity(allAccounts[0]);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    CacheManager.prototype.getAccountInfoFromEntity = function (accountEntity) {\r\n        var accountInfo = accountEntity.getAccountInfo();\r\n        var idToken = this.getIdToken(accountInfo);\r\n        if (idToken) {\r\n            accountInfo.idToken = idToken.secret;\r\n            accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\r\n        }\r\n        return accountInfo;\r\n    };\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord\r\n     */\r\n    CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!cacheRecord) {\r\n                            throw ClientAuthError.createNullOrUndefinedCacheRecord();\r\n                        }\r\n                        if (!!cacheRecord.account) {\r\n                            this.setAccount(cacheRecord.account);\r\n                        }\r\n                        if (!!cacheRecord.idToken) {\r\n                            this.setIdTokenCredential(cacheRecord.idToken);\r\n                        }\r\n                        if (!!!cacheRecord.accessToken) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.saveAccessToken(cacheRecord.accessToken)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        if (!!cacheRecord.refreshToken) {\r\n                            this.setRefreshTokenCredential(cacheRecord.refreshToken);\r\n                        }\r\n                        if (!!cacheRecord.appMetadata) {\r\n                            this.setAppMetadata(cacheRecord.appMetadata);\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.saveAccessToken = function (credential) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var accessTokenFilter, tokenKeys, currentScopes, removedAccessTokens;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        accessTokenFilter = {\r\n                            clientId: credential.clientId,\r\n                            credentialType: credential.credentialType,\r\n                            environment: credential.environment,\r\n                            homeAccountId: credential.homeAccountId,\r\n                            realm: credential.realm,\r\n                            tokenType: credential.tokenType,\r\n                            requestedClaimsHash: credential.requestedClaimsHash\r\n                        };\r\n                        tokenKeys = this.getTokenKeys();\r\n                        currentScopes = ScopeSet.fromString(credential.target);\r\n                        removedAccessTokens = [];\r\n                        tokenKeys.accessToken.forEach(function (key) {\r\n                            if (!_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\r\n                                return;\r\n                            }\r\n                            var tokenEntity = _this.getAccessTokenCredential(key);\r\n                            if (tokenEntity && _this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\r\n                                var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                                    removedAccessTokens.push(_this.removeAccessToken(key));\r\n                                }\r\n                            }\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedAccessTokens)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.setAccessTokenCredential(credential);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\r\n        var _this = this;\r\n        var allAccountKeys = this.getAccountKeys();\r\n        var matchingAccounts = [];\r\n        allAccountKeys.forEach(function (cacheKey) {\r\n            if (!_this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {\r\n                // Don't parse value if the key doesn't match the account filters\r\n                return;\r\n            }\r\n            var entity = _this.getAccount(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.homeAccountId && !_this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.localAccountId && !_this.matchLocalAccountId(entity, accountFilter.localAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.username && !_this.matchUsername(entity, accountFilter.username)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.environment && !_this.matchEnvironment(entity, accountFilter.environment)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.realm && !_this.matchRealm(entity, accountFilter.realm)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.nativeAccountId && !_this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\r\n                return;\r\n            }\r\n            matchingAccounts.push(entity);\r\n        });\r\n        return matchingAccounts;\r\n    };\r\n    /**\r\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n     * @param key\r\n     * @param homeAccountId\r\n     * @param tenantId\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.isAccountKey = function (key, homeAccountId, tenantId) {\r\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {\r\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\r\n            return false;\r\n        }\r\n        if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\r\n            return false;\r\n        }\r\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\r\n            return false;\r\n        }\r\n        // Do not check environment as aliasing can cause false negatives\r\n        return true;\r\n    };\r\n    /**\r\n     * Returns true if the given key matches our credential key schema.\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isCredentialKey = function (key) {\r\n        if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {\r\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\r\n            return false;\r\n        }\r\n        var lowerCaseKey = key.toLowerCase();\r\n        // Credential keys must indicate what credential type they represent\r\n        if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 &&\r\n            lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\r\n            // Refresh tokens must contain the client id or family id\r\n            var clientIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + this.clientId + Separators.CACHE_KEY_SEPARATOR;\r\n            var familyIdValidation = \"\" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + THE_FAMILY_ID + Separators.CACHE_KEY_SEPARATOR;\r\n            if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\r\n                return false;\r\n            }\r\n        }\r\n        else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\r\n            // Tokens must contain the clientId\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.credentialMatchesFilter = function (entity, filter) {\r\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */\r\n        if ((typeof filter.homeAccountId === \"string\") && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\r\n            return false;\r\n        }\r\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\r\n            return false;\r\n        }\r\n        if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\r\n            return false;\r\n        }\r\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */\r\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\r\n            return false;\r\n        }\r\n        // If request OR cached entity has requested Claims Hash, check if they match\r\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\r\n            // Don't match if either is undefined or they are different\r\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\r\n                return false;\r\n            }\r\n        }\r\n        // Access Token with Auth Scheme specific matching\r\n        if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\r\n            if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\r\n                return false;\r\n            }\r\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\r\n            if (filter.tokenType === AuthenticationScheme.SSH) {\r\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\r\n        return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\r\n    };\r\n    /**\r\n     * Support function to help match appMetadata\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        var matchingAppMetadata = {};\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!_this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAppMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!environment && !_this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n            if (!!clientId && !_this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n            matchingAppMetadata[cacheKey] = entity;\r\n        });\r\n        return matchingAppMetadata;\r\n    };\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\r\n        var _this = this;\r\n        var allCacheKeys = this.getAuthorityMetadataKeys();\r\n        var matchedEntity = null;\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            var entity = _this.getAuthorityMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n            matchedEntity = entity;\r\n        });\r\n        return matchedEntity;\r\n    };\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    CacheManager.prototype.removeAllAccounts = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var allAccountKeys, removedAccounts;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        allAccountKeys = this.getAccountKeys();\r\n                        removedAccounts = [];\r\n                        allAccountKeys.forEach(function (cacheKey) {\r\n                            removedAccounts.push(_this.removeAccount(cacheKey));\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedAccounts)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccount = function (accountKey) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var account;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        account = this.getAccount(accountKey);\r\n                        if (!account) {\r\n                            throw ClientAuthError.createNoAccountFoundError();\r\n                        }\r\n                        return [4 /*yield*/, this.removeAccountContext(account)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this.removeItem(accountKey);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.removeAccountContext = function (account) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var allTokenKeys, accountId, removedCredentials;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        allTokenKeys = this.getTokenKeys();\r\n                        accountId = account.generateAccountId();\r\n                        removedCredentials = [];\r\n                        allTokenKeys.idToken.forEach(function (key) {\r\n                            if (key.indexOf(accountId) === 0) {\r\n                                _this.removeIdToken(key);\r\n                            }\r\n                        });\r\n                        allTokenKeys.accessToken.forEach(function (key) {\r\n                            if (key.indexOf(accountId) === 0) {\r\n                                removedCredentials.push(_this.removeAccessToken(key));\r\n                            }\r\n                        });\r\n                        allTokenKeys.refreshToken.forEach(function (key) {\r\n                            if (key.indexOf(accountId) === 0) {\r\n                                _this.removeRefreshToken(key);\r\n                            }\r\n                        });\r\n                        return [4 /*yield*/, Promise.all(removedCredentials)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */\r\n    CacheManager.prototype.removeAccessToken = function (key) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var credential, accessTokenWithAuthSchemeEntity, kid;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        credential = this.getAccessTokenCredential(key);\r\n                        if (!credential) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        if (!(credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3 /*break*/, 4];\r\n                        if (!(credential.tokenType === AuthenticationScheme.POP)) return [3 /*break*/, 4];\r\n                        accessTokenWithAuthSchemeEntity = credential;\r\n                        kid = accessTokenWithAuthSchemeEntity.keyId;\r\n                        if (!kid) return [3 /*break*/, 4];\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.cryptoImpl.removeTokenBindingKey(kid)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a.sent();\r\n                        throw ClientAuthError.createBindingKeyNotRemovedError();\r\n                    case 4: return [2 /*return*/, this.removeItem(key)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    CacheManager.prototype.removeAppMetadata = function () {\r\n        var _this = this;\r\n        var allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach(function (cacheKey) {\r\n            if (_this.isAppMetadata(cacheKey)) {\r\n                _this.removeItem(cacheKey);\r\n            }\r\n        });\r\n        return true;\r\n    };\r\n    /**\r\n     * Retrieve the cached credentials into a cacherecord\r\n     * @param account\r\n     * @param clientId\r\n     * @param scopes\r\n     * @param environment\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.readCacheRecord = function (account, request, environment) {\r\n        var tokenKeys = this.getTokenKeys();\r\n        var cachedAccount = this.readAccountFromCache(account);\r\n        var cachedIdToken = this.getIdToken(account, tokenKeys);\r\n        var cachedAccessToken = this.getAccessToken(account, request, tokenKeys);\r\n        var cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);\r\n        var cachedAppMetadata = this.readAppMetadataFromCache(environment);\r\n        if (cachedAccount && cachedIdToken) {\r\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\r\n        }\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    };\r\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */\r\n    CacheManager.prototype.readAccountFromCache = function (account) {\r\n        var accountKey = AccountEntity.generateAccountCacheKey(account);\r\n        return this.getAccount(accountKey);\r\n    };\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param inputRealm\r\n     */\r\n    CacheManager.prototype.getIdToken = function (account, tokenKeys) {\r\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\r\n        var idTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.clientId,\r\n            realm: account.tenantId,\r\n        };\r\n        var idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\r\n        var numIdTokens = idTokens.length;\r\n        if (numIdTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\r\n            return null;\r\n        }\r\n        else if (numIdTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning id token\");\r\n        return idTokens[0];\r\n    };\r\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.getIdTokensByFilter = function (filter, tokenKeys) {\r\n        var _this = this;\r\n        var idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\r\n        var idTokens = [];\r\n        idTokenKeys.forEach(function (key) {\r\n            if (!_this.idTokenKeyMatchesFilter(key, __assign({ clientId: _this.clientId }, filter))) {\r\n                return;\r\n            }\r\n            var idToken = _this.getIdTokenCredential(key);\r\n            if (idToken && _this.credentialMatchesFilter(idToken, filter)) {\r\n                idTokens.push(idToken);\r\n            }\r\n        });\r\n        return idTokens;\r\n    };\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.idTokenKeyMatchesFilter = function (inputKey, filter) {\r\n        var key = inputKey.toLowerCase();\r\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.removeIdToken = function (key) {\r\n        this.removeItem(key);\r\n    };\r\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.removeRefreshToken = function (key) {\r\n        this.removeItem(key);\r\n    };\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param scopes\r\n     * @param authScheme\r\n     */\r\n    CacheManager.prototype.getAccessToken = function (account, request, tokenKeys) {\r\n        var _this = this;\r\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\r\n        var scopes = ScopeSet.createSearchScopes(request.scopes);\r\n        var authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        var credentialType = (authScheme && authScheme.toLowerCase() !== AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n        var accessTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: this.clientId,\r\n            realm: account.tenantId,\r\n            target: scopes,\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n        };\r\n        var accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\r\n        var accessTokens = [];\r\n        accessTokenKeys.forEach(function (key) {\r\n            // Validate key\r\n            if (_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\r\n                var accessToken = _this.getAccessTokenCredential(key);\r\n                // Validate value\r\n                if (accessToken && _this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\r\n                    accessTokens.push(accessToken);\r\n                }\r\n            }\r\n        });\r\n        var numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\r\n        return accessTokens[0];\r\n    };\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.accessTokenKeyMatchesFilter = function (inputKey, filter, keyMustContainAllScopes) {\r\n        var key = inputKey.toLowerCase();\r\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.target) {\r\n            var scopes = filter.target.asArray();\r\n            for (var i = 0; i < scopes.length; i++) {\r\n                if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache lookup a missing scope would be a cache miss\r\n                    return false;\r\n                }\r\n                else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.getAccessTokensByFilter = function (filter) {\r\n        var _this = this;\r\n        var tokenKeys = this.getTokenKeys();\r\n        var accessTokens = [];\r\n        tokenKeys.accessToken.forEach(function (key) {\r\n            if (!_this.accessTokenKeyMatchesFilter(key, filter, true)) {\r\n                return;\r\n            }\r\n            var accessToken = _this.getAccessTokenCredential(key);\r\n            if (accessToken && _this.credentialMatchesFilter(accessToken, filter)) {\r\n                accessTokens.push(accessToken);\r\n            }\r\n        });\r\n        return accessTokens;\r\n    };\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param familyRT\r\n     */\r\n    CacheManager.prototype.getRefreshToken = function (account, familyRT, tokenKeys) {\r\n        var _this = this;\r\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\r\n        var id = familyRT ? THE_FAMILY_ID : undefined;\r\n        var refreshTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: this.clientId,\r\n            familyId: id,\r\n        };\r\n        var refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\r\n        var refreshTokens = [];\r\n        refreshTokenKeys.forEach(function (key) {\r\n            // Validate key\r\n            if (_this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\r\n                var refreshToken = _this.getRefreshTokenCredential(key);\r\n                // Validate value\r\n                if (refreshToken && _this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\r\n                    refreshTokens.push(refreshToken);\r\n                }\r\n            }\r\n        });\r\n        var numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\r\n        return refreshTokens[0];\r\n    };\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */\r\n    CacheManager.prototype.refreshTokenKeyMatchesFilter = function (inputKey, filter) {\r\n        var key = inputKey.toLowerCase();\r\n        if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        // If familyId is used, clientId is not in the key\r\n        if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    CacheManager.prototype.readAppMetadataFromCache = function (environment) {\r\n        var appMetadataFilter = {\r\n            environment: environment,\r\n            clientId: this.clientId,\r\n        };\r\n        var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });\r\n        var numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        }\r\n        else if (numAppMetadata > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\r\n        }\r\n        return appMetadataEntries[0];\r\n    };\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.isAppMetadataFOCI = function (environment) {\r\n        var appMetadata = this.readAppMetadataFromCache(environment);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    };\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\r\n        return !!((typeof entity.homeAccountId === \"string\") && (homeAccountId === entity.homeAccountId));\r\n    };\r\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.matchLocalAccountId = function (entity, localAccountId) {\r\n        return !!((typeof entity.localAccountId === \"string\") && (localAccountId === entity.localAccountId));\r\n    };\r\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */\r\n    CacheManager.prototype.matchUsername = function (entity, username) {\r\n        return !!((typeof entity.username === \"string\") && (username.toLowerCase() === entity.username.toLowerCase()));\r\n    };\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    CacheManager.prototype.matchUserAssertionHash = function (entity, userAssertionHash) {\r\n        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\r\n    };\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    CacheManager.prototype.matchEnvironment = function (entity, environment) {\r\n        var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\r\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    };\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    CacheManager.prototype.matchClientId = function (entity, clientId) {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    };\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    CacheManager.prototype.matchFamilyId = function (entity, familyId) {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    };\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    CacheManager.prototype.matchRealm = function (entity, realm) {\r\n        return !!(entity.realm && realm === entity.realm);\r\n    };\r\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */\r\n    CacheManager.prototype.matchNativeAccountId = function (entity, nativeAccountId) {\r\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\r\n    };\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    CacheManager.prototype.matchTarget = function (entity, target) {\r\n        var isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\r\n        if (isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n        var entityScopeSet = ScopeSet.fromString(entity.target);\r\n        return entityScopeSet.containsScopeSet(target);\r\n    };\r\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    CacheManager.prototype.matchTokenType = function (entity, tokenType) {\r\n        return !!(entity.tokenType && entity.tokenType === tokenType);\r\n    };\r\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    CacheManager.prototype.matchKeyId = function (entity, keyId) {\r\n        return !!(entity.keyId && entity.keyId === keyId);\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAppMetadata = function (key) {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    };\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    CacheManager.prototype.isAuthorityMetadata = function (key) {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    };\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\r\n        return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\r\n    };\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    CacheManager.toObject = function (obj, json) {\r\n        for (var propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    };\r\n    return CacheManager;\r\n}());\r\nvar DefaultStorageClass = /** @class */ (function (_super) {\r\n    __extends(DefaultStorageClass, _super);\r\n    function DefaultStorageClass() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultStorageClass.prototype.setAccount = function () {\r\n        var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccount = function () {\r\n        var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getIdTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccessTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\r\n        var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAppMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getServerTelemetry = function () {\r\n        var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadata = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\r\n        var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.setThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getThrottlingCache = function () {\r\n        var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.removeItem = function () {\r\n        var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.containsKey = function () {\r\n        var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getKeys = function () {\r\n        var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getAccountKeys = function () {\r\n        var notImplErr = \"Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.getTokenKeys = function () {\r\n        var notImplErr = \"Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    DefaultStorageClass.prototype.clear = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var notImplErr;\r\n            return __generator(this, function (_a) {\r\n                notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n                throw AuthError.createUnexpectedError(notImplErr);\r\n            });\r\n        });\r\n    };\r\n    DefaultStorageClass.prototype.updateCredentialCacheKey = function () {\r\n        var notImplErr = \"Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    };\r\n    return DefaultStorageClass;\r\n}(CacheManager));\n\nexport { CacheManager, DefaultStorageClass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}