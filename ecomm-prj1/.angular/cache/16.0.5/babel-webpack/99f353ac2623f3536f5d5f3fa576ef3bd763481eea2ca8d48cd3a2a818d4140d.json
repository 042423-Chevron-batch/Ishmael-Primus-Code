{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\nimport { checkTenantId } from \"../util/checkTenantId\";\nconst logger = credentialLogger(\"UsernamePasswordCredential\");\n/**\n * Enables authentication to Azure Active Directory with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nexport class UsernamePasswordCredential {\n  /**\n   * Creates an instance of the UsernamePasswordCredential with the details\n   * needed to authenticate against Azure Active Directory with a username\n   * and password.\n   *\n   * @param tenantIdOrName - The Azure Active Directory tenant (directory) ID or name.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param username - The user account's e-mail address (user name).\n   * @param password - The user account's account password\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(tenantIdOrName, clientId, username, password, options) {\n    checkTenantId(logger, tenantIdOrName);\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantIdOrName;\n    this.clientId = clientId;\n    this.username = username;\n    this.password = password;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  getToken(scopes, options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions: newOptions\n      } = tracingClient.startSpan(\"UsernamePasswordCredential.getToken\", options);\n      try {\n        const urlSuffix = getIdentityTokenEndpointSuffix(_this.tenantId);\n        const params = new URLSearchParams({\n          response_type: \"token\",\n          grant_type: \"password\",\n          client_id: _this.clientId,\n          username: _this.username,\n          password: _this.password,\n          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n        });\n        const webResource = createPipelineRequest({\n          url: `${_this.identityClient.authorityHost}/${_this.tenantId}/${urlSuffix}`,\n          method: \"POST\",\n          body: params.toString(),\n          headers: createHttpHeaders({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }),\n          abortSignal: options && options.abortSignal,\n          tracingOptions: newOptions.tracingOptions\n        });\n        const tokenResponse = yield _this.identityClient.sendTokenRequest(webResource);\n        logger.getToken.info(formatSuccess(scopes));\n        return tokenResponse && tokenResponse.accessToken || null;\n      } catch (err) {\n        span.setStatus({\n          status: \"error\",\n          error: err\n        });\n        logger.getToken.info(formatError(scopes, err));\n        throw err;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n}","map":{"version":3,"names":["createHttpHeaders","createPipelineRequest","IdentityClient","credentialLogger","formatError","formatSuccess","getIdentityTokenEndpointSuffix","tracingClient","checkTenantId","logger","UsernamePasswordCredential","constructor","tenantIdOrName","clientId","username","password","options","identityClient","tenantId","getToken","scopes","_this","_asyncToGenerator","span","updatedOptions","newOptions","startSpan","urlSuffix","params","URLSearchParams","response_type","grant_type","client_id","scope","join","webResource","url","authorityHost","method","body","toString","headers","Accept","abortSignal","tracingOptions","tokenResponse","sendTokenRequest","info","accessToken","err","setStatus","status","error","end"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/identity/dist-esm/src/credentials/usernamePasswordCredential.browser.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\nimport { checkTenantId } from \"../util/checkTenantId\";\nconst logger = credentialLogger(\"UsernamePasswordCredential\");\n/**\n * Enables authentication to Azure Active Directory with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nexport class UsernamePasswordCredential {\n    /**\n     * Creates an instance of the UsernamePasswordCredential with the details\n     * needed to authenticate against Azure Active Directory with a username\n     * and password.\n     *\n     * @param tenantIdOrName - The Azure Active Directory tenant (directory) ID or name.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param username - The user account's e-mail address (user name).\n     * @param password - The user account's account password\n     * @param options - Options for configuring the client which makes the authentication request.\n     */\n    constructor(tenantIdOrName, clientId, username, password, options) {\n        checkTenantId(logger, tenantIdOrName);\n        this.identityClient = new IdentityClient(options);\n        this.tenantId = tenantIdOrName;\n        this.clientId = clientId;\n        this.username = username;\n        this.password = password;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if\n     * successful.  If authentication cannot be performed at this time, this method may\n     * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n     * containing failure details will be thrown.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */\n    async getToken(scopes, options) {\n        const { span, updatedOptions: newOptions } = tracingClient.startSpan(\"UsernamePasswordCredential.getToken\", options);\n        try {\n            const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n            const params = new URLSearchParams({\n                response_type: \"token\",\n                grant_type: \"password\",\n                client_id: this.clientId,\n                username: this.username,\n                password: this.password,\n                scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n            });\n            const webResource = createPipelineRequest({\n                url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n                method: \"POST\",\n                body: params.toString(),\n                headers: createHttpHeaders({\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\n                }),\n                abortSignal: options && options.abortSignal,\n                tracingOptions: newOptions.tracingOptions,\n            });\n            const tokenResponse = await this.identityClient.sendTokenRequest(webResource);\n            logger.getToken.info(formatSuccess(scopes));\n            return (tokenResponse && tokenResponse.accessToken) || null;\n        }\n        catch (err) {\n            span.setStatus({\n                status: \"error\",\n                error: err,\n            });\n            logger.getToken.info(formatError(scopes, err));\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,iBAAiB,EAAEC,qBAAqB,QAAQ,2BAA2B;AACpF,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,gBAAgB,EAAEC,WAAW,EAAEC,aAAa,QAAQ,iBAAiB;AAC9E,SAASC,8BAA8B,QAAQ,+BAA+B;AAC9E,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,uBAAuB;AACrD,MAAMC,MAAM,GAAGN,gBAAgB,CAAC,4BAA4B,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,0BAA0B,CAAC;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,cAAc,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAC/DR,aAAa,CAACC,MAAM,EAAEG,cAAc,CAAC;IACrC,IAAI,CAACK,cAAc,GAAG,IAAIf,cAAc,CAACc,OAAO,CAAC;IACjD,IAAI,CAACE,QAAQ,GAAGN,cAAc;IAC9B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACUI,QAAQA,CAACC,MAAM,EAAEJ,OAAO,EAAE;IAAA,IAAAK,KAAA;IAAA,OAAAC,iBAAA;MAC5B,MAAM;QAAEC,IAAI;QAAEC,cAAc,EAAEC;MAAW,CAAC,GAAGlB,aAAa,CAACmB,SAAS,CAAC,qCAAqC,EAAEV,OAAO,CAAC;MACpH,IAAI;QACA,MAAMW,SAAS,GAAGrB,8BAA8B,CAACe,KAAI,CAACH,QAAQ,CAAC;QAC/D,MAAMU,MAAM,GAAG,IAAIC,eAAe,CAAC;UAC/BC,aAAa,EAAE,OAAO;UACtBC,UAAU,EAAE,UAAU;UACtBC,SAAS,EAAEX,KAAI,CAACR,QAAQ;UACxBC,QAAQ,EAAEO,KAAI,CAACP,QAAQ;UACvBC,QAAQ,EAAEM,KAAI,CAACN,QAAQ;UACvBkB,KAAK,EAAE,OAAOb,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACc,IAAI,CAAC,GAAG;QAChE,CAAC,CAAC;QACF,MAAMC,WAAW,GAAGlC,qBAAqB,CAAC;UACtCmC,GAAG,EAAG,GAAEf,KAAI,CAACJ,cAAc,CAACoB,aAAc,IAAGhB,KAAI,CAACH,QAAS,IAAGS,SAAU,EAAC;UACzEW,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEX,MAAM,CAACY,QAAQ,EAAE;UACvBC,OAAO,EAAEzC,iBAAiB,CAAC;YACvB0C,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE;UACpB,CAAC,CAAC;UACFC,WAAW,EAAE3B,OAAO,IAAIA,OAAO,CAAC2B,WAAW;UAC3CC,cAAc,EAAEnB,UAAU,CAACmB;QAC/B,CAAC,CAAC;QACF,MAAMC,aAAa,SAASxB,KAAI,CAACJ,cAAc,CAAC6B,gBAAgB,CAACX,WAAW,CAAC;QAC7E1B,MAAM,CAACU,QAAQ,CAAC4B,IAAI,CAAC1C,aAAa,CAACe,MAAM,CAAC,CAAC;QAC3C,OAAQyB,aAAa,IAAIA,aAAa,CAACG,WAAW,IAAK,IAAI;MAC/D,CAAC,CACD,OAAOC,GAAG,EAAE;QACR1B,IAAI,CAAC2B,SAAS,CAAC;UACXC,MAAM,EAAE,OAAO;UACfC,KAAK,EAAEH;QACX,CAAC,CAAC;QACFxC,MAAM,CAACU,QAAQ,CAAC4B,IAAI,CAAC3C,WAAW,CAACgB,MAAM,EAAE6B,GAAG,CAAC,CAAC;QAC9C,MAAMA,GAAG;MACb,CAAC,SACO;QACJ1B,IAAI,CAAC8B,GAAG,EAAE;MACd;IAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}