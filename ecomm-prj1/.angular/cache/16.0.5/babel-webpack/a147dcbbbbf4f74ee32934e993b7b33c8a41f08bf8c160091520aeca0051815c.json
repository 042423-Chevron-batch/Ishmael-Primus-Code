{"ast":null,"code":"/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\n\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants, Separators } from '../../utils/Constants.js';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar ServerTelemetryManager = /** @class */function () {\n  function ServerTelemetryManager(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\r\n   * API to add MSER Telemetry to request\r\n   */\n  ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\n    var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\n    var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var regionDiscoveryFields = this.getRegionDiscoveryFields();\n    var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to add MSER Telemetry for the last failed request\r\n   */\n  ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\n    var lastRequests = this.getLastRequests();\n    var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errorCount = lastRequests.errors.length;\n    // Indicate whether this header contains all data or partial data\n    var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to cache token failures for MSER data capture\r\n   * @param error\r\n   */\n  ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\n    var lastRequests = this.getLastRequests();\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n      lastRequests.failedRequests.shift(); // correlationId\n      lastRequests.errors.shift();\n    }\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n    if (!StringUtils.isEmpty(error.subError)) {\n      lastRequests.errors.push(error.subError);\n    } else if (!StringUtils.isEmpty(error.errorCode)) {\n      lastRequests.errors.push(error.errorCode);\n    } else if (!!error && error.toString()) {\n      lastRequests.errors.push(error.toString());\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  };\n  /**\r\n   * Update server telemetry cache entry by incrementing cache hit counter\r\n   */\n  ServerTelemetryManager.prototype.incrementCacheHits = function () {\n    var lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  };\n  /**\r\n   * Get the server telemetry entity from cache or initialize a new one\r\n   */\n  ServerTelemetryManager.prototype.getLastRequests = function () {\n    var initialValue = new ServerTelemetryEntity();\n    var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  };\n  /**\r\n   * Remove server telemetry cache entry\r\n   */\n  ServerTelemetryManager.prototype.clearTelemetryCache = function () {\n    var lastRequests = this.getLastRequests();\n    var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var errorCount = lastRequests.errors.length;\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      var serverTelemEntity = new ServerTelemetryEntity();\n      serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n      serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  };\n  /**\r\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n   * @param serverTelemetryEntity\r\n   */\n  ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\n    var i;\n    var maxErrors = 0;\n    var dataSize = 0;\n    var errorCount = serverTelemetryEntity.errors.length;\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\n      var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\n      var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\n      // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n    return maxErrors;\n  };\n  /**\r\n   * Get the region discovery fields\r\n   *\r\n   * @returns string\r\n   */\n  ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\n    var regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\n    regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\n    return regionDiscoveryFields.join(\",\");\n  };\n  /**\r\n   * Update the region discovery metadata\r\n   *\r\n   * @param regionDiscoveryMetadata\r\n   * @returns void\r\n   */\n  ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  };\n  /**\r\n   * Set cache outcome\r\n   */\n  ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  };\n  return ServerTelemetryManager;\n}();\nexport { ServerTelemetryManager };","map":{"version":3,"names":["SERVER_TELEM_CONSTANTS","CacheOutcome","Constants","Separators","ServerTelemetryEntity","StringUtils","ServerTelemetryManager","telemetryRequest","cacheManager","cacheOutcome","NO_CACHE_HIT","apiId","correlationId","wrapperSKU","EMPTY_STRING","wrapperVer","telemetryCacheKey","CACHE_KEY","CACHE_KEY_SEPARATOR","clientId","prototype","generateCurrentRequestHeaderValue","request","VALUE_SEPARATOR","platformFields","join","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","generateLastRequestHeaderValue","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","length","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","cacheFailedRequest","error","MAX_CACHED_ERRORS","shift","push","isEmpty","subError","errorCode","toString","UNKNOWN_ERROR","setServerTelemetry","incrementCacheHits","initialValue","getServerTelemetry","clearTelemetryCache","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","updateRegionDiscoveryMetadata","regionDiscoveryMetadata","region_used","region_source","region_outcome","setCacheOutcome"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/msal-browser/node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.js"],"sourcesContent":["/*! @azure/msal-common v13.1.0 2023-06-07 */\n'use strict';\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants, Separators } from '../../utils/Constants.js';\nimport { ServerTelemetryEntity } from '../../cache/entities/ServerTelemetryEntity.js';\nimport { StringUtils } from '../../utils/StringUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nvar ServerTelemetryManager = /** @class */ (function () {\r\n    function ServerTelemetryManager(telemetryRequest, cacheManager) {\r\n        this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\r\n        var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\r\n        var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        var errorCount = lastRequests.errors.length;\r\n        // Indicate whether this header contains all data or partial data\r\n        var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    };\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\r\n        var lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n        if (!StringUtils.isEmpty(error.subError)) {\r\n            lastRequests.errors.push(error.subError);\r\n        }\r\n        else if (!StringUtils.isEmpty(error.errorCode)) {\r\n            lastRequests.errors.push(error.errorCode);\r\n        }\r\n        else if (!!error && error.toString()) {\r\n            lastRequests.errors.push(error.toString());\r\n        }\r\n        else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return;\r\n    };\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    ServerTelemetryManager.prototype.incrementCacheHits = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return lastRequests.cacheHits;\r\n    };\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    ServerTelemetryManager.prototype.getLastRequests = function () {\r\n        var initialValue = new ServerTelemetryEntity();\r\n        var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\r\n        return lastRequests || initialValue;\r\n    };\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    ServerTelemetryManager.prototype.clearTelemetryCache = function () {\r\n        var lastRequests = this.getLastRequests();\r\n        var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        var errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey);\r\n        }\r\n        else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            var serverTelemEntity = new ServerTelemetryEntity();\r\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\r\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\r\n        var i;\r\n        var maxErrors = 0;\r\n        var dataSize = 0;\r\n        var errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;\r\n            var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;\r\n            var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return maxErrors;\r\n    };\r\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */\r\n    ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\r\n        var regionDiscoveryFields = [];\r\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\r\n        return regionDiscoveryFields.join(\",\");\r\n    };\r\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    };\r\n    /**\r\n     * Set cache outcome\r\n     */\r\n    ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\r\n        this.cacheOutcome = cacheOutcome;\r\n    };\r\n    return ServerTelemetryManager;\r\n}());\n\nexport { ServerTelemetryManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}