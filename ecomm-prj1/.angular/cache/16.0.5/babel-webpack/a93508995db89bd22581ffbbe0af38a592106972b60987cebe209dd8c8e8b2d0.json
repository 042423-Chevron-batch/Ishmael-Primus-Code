{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isErrorResponse(errorResponse) {\n  return errorResponse && typeof errorResponse.error === \"string\" && typeof errorResponse.error_description === \"string\";\n}\n/**\n * The Error.name value of an CredentialUnavailable\n */\nexport const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nexport class CredentialUnavailableError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = CredentialUnavailableErrorName;\n  }\n}\n/**\n * The Error.name value of an AuthenticationError\n */\nexport const AuthenticationErrorName = \"AuthenticationError\";\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nexport class AuthenticationError extends Error {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(statusCode, errorBody) {\n    let errorResponse = {\n      error: \"unknown\",\n      errorDescription: \"An unknown error occurred and no additional details are available.\"\n    };\n    if (isErrorResponse(errorBody)) {\n      errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n    } else if (typeof errorBody === \"string\") {\n      try {\n        // Most error responses will contain JSON-formatted error details\n        // in the response body\n        const oauthErrorResponse = JSON.parse(errorBody);\n        errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n      } catch (e) {\n        if (statusCode === 400) {\n          errorResponse = {\n            error: \"authority_not_found\",\n            errorDescription: \"The specified authority URL was not found.\"\n          };\n        } else {\n          errorResponse = {\n            error: \"unknown_error\",\n            errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`\n          };\n        }\n      }\n    } else {\n      errorResponse = {\n        error: \"unknown_error\",\n        errorDescription: \"An unknown error occurred and no additional details are available.\"\n      };\n    }\n    super(`${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`);\n    this.statusCode = statusCode;\n    this.errorResponse = errorResponse;\n    // Ensure that this type reports the correct name\n    this.name = AuthenticationErrorName;\n  }\n}\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nexport const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nexport class AggregateAuthenticationError extends Error {\n  constructor(errors, errorMessage) {\n    const errorDetail = errors.join(\"\\n\");\n    super(`${errorMessage}\\n${errorDetail}`);\n    this.errors = errors;\n    // Ensure that this type reports the correct name\n    this.name = AggregateAuthenticationErrorName;\n  }\n}\nfunction convertOAuthErrorResponseToErrorResponse(errorBody) {\n  return {\n    error: errorBody.error,\n    errorDescription: errorBody.error_description,\n    correlationId: errorBody.correlation_id,\n    errorCodes: errorBody.error_codes,\n    timestamp: errorBody.timestamp,\n    traceId: errorBody.trace_id\n  };\n}\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nexport class AuthenticationRequiredError extends Error {\n  constructor(\n  /**\n   * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n   */\n  options) {\n    super(options.message);\n    this.scopes = options.scopes;\n    this.getTokenOptions = options.getTokenOptions;\n    this.name = \"AuthenticationRequiredError\";\n  }\n}","map":{"version":3,"names":["isErrorResponse","errorResponse","error","error_description","CredentialUnavailableErrorName","CredentialUnavailableError","Error","constructor","message","name","AuthenticationErrorName","AuthenticationError","statusCode","errorBody","errorDescription","convertOAuthErrorResponseToErrorResponse","oauthErrorResponse","JSON","parse","e","AggregateAuthenticationErrorName","AggregateAuthenticationError","errors","errorMessage","errorDetail","join","correlationId","correlation_id","errorCodes","error_codes","timestamp","traceId","trace_id","AuthenticationRequiredError","options","scopes","getTokenOptions"],"sources":["C:/Users/ishma/Revature/Ishmael-Primus-Code-/ecomm-prj1/node_modules/@azure/identity/dist-esm/src/errors.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isErrorResponse(errorResponse) {\n    return (errorResponse &&\n        typeof errorResponse.error === \"string\" &&\n        typeof errorResponse.error_description === \"string\");\n}\n/**\n * The Error.name value of an CredentialUnavailable\n */\nexport const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nexport class CredentialUnavailableError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = CredentialUnavailableErrorName;\n    }\n}\n/**\n * The Error.name value of an AuthenticationError\n */\nexport const AuthenticationErrorName = \"AuthenticationError\";\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nexport class AuthenticationError extends Error {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    constructor(statusCode, errorBody) {\n        let errorResponse = {\n            error: \"unknown\",\n            errorDescription: \"An unknown error occurred and no additional details are available.\",\n        };\n        if (isErrorResponse(errorBody)) {\n            errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n        }\n        else if (typeof errorBody === \"string\") {\n            try {\n                // Most error responses will contain JSON-formatted error details\n                // in the response body\n                const oauthErrorResponse = JSON.parse(errorBody);\n                errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n            }\n            catch (e) {\n                if (statusCode === 400) {\n                    errorResponse = {\n                        error: \"authority_not_found\",\n                        errorDescription: \"The specified authority URL was not found.\",\n                    };\n                }\n                else {\n                    errorResponse = {\n                        error: \"unknown_error\",\n                        errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`,\n                    };\n                }\n            }\n        }\n        else {\n            errorResponse = {\n                error: \"unknown_error\",\n                errorDescription: \"An unknown error occurred and no additional details are available.\",\n            };\n        }\n        super(`${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`);\n        this.statusCode = statusCode;\n        this.errorResponse = errorResponse;\n        // Ensure that this type reports the correct name\n        this.name = AuthenticationErrorName;\n    }\n}\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nexport const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nexport class AggregateAuthenticationError extends Error {\n    constructor(errors, errorMessage) {\n        const errorDetail = errors.join(\"\\n\");\n        super(`${errorMessage}\\n${errorDetail}`);\n        this.errors = errors;\n        // Ensure that this type reports the correct name\n        this.name = AggregateAuthenticationErrorName;\n    }\n}\nfunction convertOAuthErrorResponseToErrorResponse(errorBody) {\n    return {\n        error: errorBody.error,\n        errorDescription: errorBody.error_description,\n        correlationId: errorBody.correlation_id,\n        errorCodes: errorBody.error_codes,\n        timestamp: errorBody.timestamp,\n        traceId: errorBody.trace_id,\n    };\n}\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nexport class AuthenticationRequiredError extends Error {\n    constructor(\n    /**\n     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n     */\n    options) {\n        super(options.message);\n        this.scopes = options.scopes;\n        this.getTokenOptions = options.getTokenOptions;\n        this.name = \"AuthenticationRequiredError\";\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}